{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Administraci\u00f3n de Sistemas Operativos \u00b6 Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Administraci\u00f3n de Sistemas Operativos , que se imparte en el segundo curso del ciclo formativo de grado superior de Administraci\u00f3n de Sistemas Inform\u00e1ticos en Red. La duraci\u00f3n del m\u00f3dulo es de 120 horas lectivas, a raz\u00f3n de 6 horas semanales , y se desarrolla a lo largo de los dos primeros trimestres del curso . Se ha planificado bas\u00e1ndose en 3 sesiones de 2 horas lectivas por semana. \u00bfQu\u00e9 voy a aprender? \u00b6 Administrar sistemas operativos de servidor, instalando y configurando el software, en condiciones de calidad para asegurar el funcionamiento del sistema. Administrar servicios de recursos compartidos (acceso a directorios, impresi\u00f3n, accesos remotos, entre otros) instalando y configurando el software, en condiciones de calidad. Administrar usuarios de acuerdo a las especificaciones de explotaci\u00f3n para garantizar los accesos y la disponibilidad de los recursos del sistema. Gestionar los recursos de diferentes sistemas operativos (programando y verificando su cumplimiento). Resultados de aprendizaje \u00b6 Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Administra el servicio de directorio interpretando especificaciones e integr\u00e1ndolo en una red. Administra procesos del sistema describi\u00e9ndolos y aplicando criterios de seguridad y eficiencia. Gestiona la automatizaci\u00f3n de tareas del sistema, aplicando criterios de eficiencia y utilizando comandos y herramientas gr\u00e1ficas. Administra de forma remota el sistema operativo en red valorando su importancia y aplicando criterios de seguridad. Administra servidores de impresi\u00f3n describiendo sus funciones e integr\u00e1ndolos en una red. Integra sistemas operativos libres y propietarios, justificando y garantizando su interoperabilidad. Unidades did\u00e1cticas / Temporalizaci\u00f3n \u00b6 A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 3, y parte de la unidad 4. As\u00ed pues, desde la mitad de la unidad 4 a la unidad 7 se ver\u00e1n en la segunda evaluaci\u00f3n. Primera evaluaci\u00f3n. (Duraci\u00f3n estimada: 68 sesiones) \u00b6 Tools: Scripting y Docker. (18h) Scripts de Linux. (bash). Scripts de PowerShell. Introducci\u00f3n a Docker. Administraci\u00f3n de servicio de directorio. (24h) LDAP. Directorio Activo con Windows Server. Administraci\u00f3n de procesos del sistema. (18h) El planificador. Algoritmos de planificaci\u00f3n de procesos. Sincronizaci\u00f3n, Interrupciones y excepciones. Secuencia de arranque del sistema. Segunda evaluaci\u00f3n. (Duraci\u00f3n estimada: 62 sesiones) \u00b6 Informaci\u00f3n del sistema. (16h). B\u00fasqueda de informaci\u00f3n del sistema. \u00d3rdenes. Herramientas gr\u00e1ficas. Gesti\u00f3n de la informaci\u00f3n del sistema. Rendimiento . Estad\u00edsticas. Servicios de acceso y administraci\u00f3n remota. (12h) Terminales en modo texto. Servicios de acceso remoto del propio sistema operativo. Escritorio remoto. Herramientas gr\u00e1ficas externas para la administraci\u00f3n remota. Administrador de servidores de impresi\u00f3n. (12h) Tipos de impresoras para trabajo en red. Protocolos de impresi\u00f3n. Servidores de impresi\u00f3n. Integraci\u00f3n de sistemas operativos. (20h) Samba. NFS. Instrumentos de calificaci\u00f3n \u00b6 La nota de cada evaluaci\u00f3n se calcula mediante: 40% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto 3: Entregada y soluci\u00f3n correcta. 60% Actividad de evaluaci\u00f3n Una o dos pruebas por evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Inicio"},{"location":"index.html#administracion-de-sistemas-operativos","text":"Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Administraci\u00f3n de Sistemas Operativos , que se imparte en el segundo curso del ciclo formativo de grado superior de Administraci\u00f3n de Sistemas Inform\u00e1ticos en Red. La duraci\u00f3n del m\u00f3dulo es de 120 horas lectivas, a raz\u00f3n de 6 horas semanales , y se desarrolla a lo largo de los dos primeros trimestres del curso . Se ha planificado bas\u00e1ndose en 3 sesiones de 2 horas lectivas por semana.","title":"Administraci\u00f3n de Sistemas Operativos"},{"location":"index.html#que-voy-a-aprender","text":"Administrar sistemas operativos de servidor, instalando y configurando el software, en condiciones de calidad para asegurar el funcionamiento del sistema. Administrar servicios de recursos compartidos (acceso a directorios, impresi\u00f3n, accesos remotos, entre otros) instalando y configurando el software, en condiciones de calidad. Administrar usuarios de acuerdo a las especificaciones de explotaci\u00f3n para garantizar los accesos y la disponibilidad de los recursos del sistema. Gestionar los recursos de diferentes sistemas operativos (programando y verificando su cumplimiento).","title":"\u00bfQu\u00e9 voy a aprender?"},{"location":"index.html#resultados-de-aprendizaje","text":"Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Administra el servicio de directorio interpretando especificaciones e integr\u00e1ndolo en una red. Administra procesos del sistema describi\u00e9ndolos y aplicando criterios de seguridad y eficiencia. Gestiona la automatizaci\u00f3n de tareas del sistema, aplicando criterios de eficiencia y utilizando comandos y herramientas gr\u00e1ficas. Administra de forma remota el sistema operativo en red valorando su importancia y aplicando criterios de seguridad. Administra servidores de impresi\u00f3n describiendo sus funciones e integr\u00e1ndolos en una red. Integra sistemas operativos libres y propietarios, justificando y garantizando su interoperabilidad.","title":"Resultados de aprendizaje"},{"location":"index.html#unidades-didacticas-temporalizacion","text":"A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 3, y parte de la unidad 4. As\u00ed pues, desde la mitad de la unidad 4 a la unidad 7 se ver\u00e1n en la segunda evaluaci\u00f3n.","title":"Unidades did\u00e1cticas / Temporalizaci\u00f3n"},{"location":"index.html#primera-evaluacion-duracion-estimada-68-sesiones","text":"Tools: Scripting y Docker. (18h) Scripts de Linux. (bash). Scripts de PowerShell. Introducci\u00f3n a Docker. Administraci\u00f3n de servicio de directorio. (24h) LDAP. Directorio Activo con Windows Server. Administraci\u00f3n de procesos del sistema. (18h) El planificador. Algoritmos de planificaci\u00f3n de procesos. Sincronizaci\u00f3n, Interrupciones y excepciones. Secuencia de arranque del sistema.","title":"Primera evaluaci\u00f3n. (Duraci\u00f3n estimada: 68 sesiones)"},{"location":"index.html#segunda-evaluacion-duracion-estimada-62-sesiones","text":"Informaci\u00f3n del sistema. (16h). B\u00fasqueda de informaci\u00f3n del sistema. \u00d3rdenes. Herramientas gr\u00e1ficas. Gesti\u00f3n de la informaci\u00f3n del sistema. Rendimiento . Estad\u00edsticas. Servicios de acceso y administraci\u00f3n remota. (12h) Terminales en modo texto. Servicios de acceso remoto del propio sistema operativo. Escritorio remoto. Herramientas gr\u00e1ficas externas para la administraci\u00f3n remota. Administrador de servidores de impresi\u00f3n. (12h) Tipos de impresoras para trabajo en red. Protocolos de impresi\u00f3n. Servidores de impresi\u00f3n. Integraci\u00f3n de sistemas operativos. (20h) Samba. NFS.","title":"Segunda evaluaci\u00f3n. (Duraci\u00f3n estimada: 62 sesiones)"},{"location":"index.html#instrumentos-de-calificacion","text":"La nota de cada evaluaci\u00f3n se calcula mediante: 40% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto 3: Entregada y soluci\u00f3n correcta. 60% Actividad de evaluaci\u00f3n Una o dos pruebas por evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Instrumentos de calificaci\u00f3n"},{"location":"011_ShellScripting.html","text":"Shell Scripting \u00b6 Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 3 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje y Criterios de evaluaci\u00f3n: Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Se han utilizado y combinado las estructuras del lenguaje para crear guiones. Se han utilizado herramientas para depurar errores sint\u00e1cticos y de ejecuci\u00f3n. Se han interpretado guiones de configuraci\u00f3n del sistema operativo. Se han realizado cambios y adaptaciones de guiones del sistema. Se han creado y probado guiones de administraci\u00f3n de servicios. Se han creado y probado guiones de automatizaci\u00f3n de tareas. Se han implantado guiones en sistemas libres . Se han consultado y utilizado librer\u00edas de funciones. Se han documentado los guiones creados. Introducci\u00f3n Linux \u00b6 Breve Historia \u00b6 1969 La empresa AT&T desarrolla el sistema operativo UNIX y vendido posteriormente a Novell. 1983 Richard Stallman comienza el proyecto GNU (GNU is Not Unix) para crear un SO tipo UNIX pero de software libre. Software libre: Aquel software, que una vez adquirido (no tiene porque ser gratuito), puede ser usado, copiado, modificado y redistribuido, con cambios o mejoras. 1985 Microsoft publica Windows, un sistema operativo con interfaz gr\u00e1fica de usuario (GUI) para su sistema operativo MS-DOS. 1991 Linus Torvald comienza a programar el sistema operativo Linux (Linus + UNIX). El c\u00f3digo era totalmente nuevo, pero emulaba el funcionamiento del sistema operativo MINIX (Tanenbaum), con estructura de micronucleo. 1992 Se juntan el proyecto Linux y GNU \u2192 GNU/Linux. 2001 Se lanza el primer sistema operativo MAC (MAC OS X) con interfaz de escritorio. MAC est\u00e1 basado en UNIX. Principales Actores \u00b6 Principales Actores en la creaci\u00f3n de GNU/Linux Caracter\u00edsticas \u00b6 Software Libre \u2192 Cualquiera puede usarlo o descargarlo. Licencias GPL (General Public License) de GNU. La Licencia P\u00fablica General de GNU o m\u00e1s conocida por su nombre en ingl\u00e9s GNU General Public License es una licencia de derecho de autor ampliamente usada en el mundo del software libre y c\u00f3digo abierto, \u200b y garantiza a los usuarios finales la libertad de usar, estudiar, compartir y modificar el software. C\u00f3digo Abierto \u2192 Cualquiera puede ver y modificar el c\u00f3digo. En la siguiente tabla se muestra algunas de las principales caracter\u00edsticas. Tabla con algunas caracter\u00edsticas de Linux Distribuciones \u00b6 Gratuitas: Ubuntu, CentOS, Mint, Fedora, Knoppix, OpenSUSE. En el caso de Ubuntu sacan distribuciones LTS que tienen mayor tiempo de actualizaciones. Las versiones indican el a\u00f1o y el mes en que se saca dicha versi\u00f3n. Por ejemplo 17.04 (A\u00f1o 2017, Abril). Pago: RedHat o SUSE. Se paga por el soporte, no por el software en s\u00ed. Las distribuciones de pago tambi\u00e9n suelen tener sus versiones gratuitas. Principales distribuciones \u00b6 Algunas Distribuciones de Linux Shell \u00b6 En inform\u00e1tica, el shell o int\u00e9rprete de \u00f3rdenes o int\u00e9rprete de comandos es el programa inform\u00e1tico que provee una interfaz de usuario para acceder a los servicios del sistema operativo. Dependiendo del tipo de interfaz que empleen, los shells pueden ser: De l\u00edneas texto ( CLI , Command-Line Interface, interfaz de l\u00ednea de comandos), Gr\u00e1ficos ( GUI , Graphical User Interface, interfaz gr\u00e1fica de usuario), De lenguaje natural ( NUI , Natural User Interface, interfaz natural de usuario). En un terminal (Shell) es posible crear cualquier comando que el usuario necesite, incluso para las tareas m\u00e1s espec\u00edficas. Debido a estar directamente conectado al Kernel a diferencia de las aplicaciones como se puede observar en la siguiente figura. Estructura de Linux Tip Es buena pr\u00e1ctica que el administrador del sistema tenga conocimientos en el manejo del terminal as\u00ed como en la programaci\u00f3n de scripts. Info Linux dispone de varios Shell diferentes csh , bash , sh , ksh , zsh , etc... En este tema utilizaremos el Shell bash . Formato comandos \u00b6 En general, el formato de las \u00f3rdenes de GNU/Linux es el siguiente: Comando , que indica la acci\u00f3n que se va a ejecutar. Modificadores , que cambian el comportamiento est\u00e1ndar del comando para adaptarlo a las necesidades. Argumentos , elementos necesarios para realizar la acci\u00f3n del comando. Warning Un dato a tener en cuenta cuando se trabaja con un terminal, es que GNU/Linux distingue entre may\u00fasculas y nim\u00fasculas, es decir, la ejecuci\u00f3n de comandos en el CLI de Linux es CASE SENSITIVE . Principales comandos \u00b6 Comando Acci\u00f3n Comando Acci\u00f3n ls muestra el contenido de una carpeta uname muestra informaci\u00f3n del sistema df muestra estado del disco cd cambiar de directorio fsck comprueba integridad de discos mkdir crear directorios mount monta particiones y vol\u00famenes shutdown apaga el equipo ( restart o reboot ) unmount desmonta particiones y vol\u00famenes clear limpia la pantalla fdisk administra particiones date/cal muestra hora/calendario del sistema echo imprime por pantalla who muestra quien est\u00e1 conectado Shell Script en GNU/Linux \u00b6 Un Shell script (gui\u00f3n) es un archivo de texto que contiene una serie de comandos que, ordenados de forma espec\u00edfica, realizan la tarea para la que fueron dise\u00f1ados, es decir, es un programa escrito de comandos Shell para ser ejecutados de forma secuencial. De esta forma se pueden automatizar tareas repetitivas ahorrando tiempo al administrador. Un programa escrito en shell se denomina shellscript, programa shell o simplemente un shell. Creaci\u00f3n Shell scripts \u00b6 Para crear un script utilizaremos cualquiera de los editores de texto plano como vi , vim , nano . Despu\u00e9s de crear el archivo hay que dotarlo de permisos de lectura y ejecuci\u00f3n. chmod ugo=rx script.sh Para ejecutar el archivo: ubicados en la carpeta que contiene el archivo, se pueden utilizar tres formas: Se teclea el nombre del archivo en el terminal precedido del comando sh sh script.sh Precedido de un punto . . script.sh ./ script.sh Definir la carpeta dentro de la variable de entorno PATH (tambi\u00e9n editando el fichero .bashrc ). Una vez realizado ya se podr\u00eda ejecutar directamente el fichero con el nombre del script. mkdir /home/administrador/scripts PATH=$PATH:/home/administrador/scripts export PATH Info Cualquiera de estas dos primeras formas ejecutar\u00e1 el contenido del shell script en un subshell o hilo del terminal original. El programa se ejecuta hasta que se terminan las \u00f3rdenes del archivo, se recibe una se\u00f1al de finalizaci\u00f3n, se encuentra un error sint\u00e1ctico o se llega a una orden exit . Cuando el programa termina, el subshell muere y el terminal original toma el control del sistema. Esto no ocurre si se usa la opci\u00f3n de PATH , la cual ejecuta el contenido del shell script en el mismo terminal donde fue invocado. El primer Shellscript \u00b6 Crea un ejemplo llamado listar.sh cd ~ mkdir scripts cd scripts touch listar.sh nano listar.sh Genera, guarda y prueba el siguiente c\u00f3digo. #! /bin/bash clear ls -la echo \u201cListado realizado el \u201c$(date) Comentarios \u00b6 Para realizar un comentario se usa el car\u00e1cter # Cuando el terminal encuentra una l\u00ednea que comienza con este car\u00e1cter, ignora todo lo que existe desde \u00e9l hasta el final de l\u00ednea. A esta regla existe una excepci\u00f3n: #!/bin/bash Info Indica el terminal que ser\u00e1 utilizado por el shell script, no un comentario. Esta l\u00ednea debe ser la primera del fichero que, a\u00fan siendo opcional, indica el tipo de lenguaje en el que ha sido escrito el programa. Si la versi\u00f3n de GNU/Linux dispone de el terminal especificado en esta l\u00ednea, ejecutar\u00e1 el c\u00f3digo con \u00e9l, si no es as\u00ed, utilizar\u00e1 el que por defecto tenga asignado el usuario que lo ejecuta. Argumentos o Par\u00e1metros \u00b6 Son especificaciones que se le hacen al programa al momento de llamarlo para obtener un efecto diferente. Introducen un valor, cadena o variable dentro del script. Utilizaci\u00f3n de par\u00e1metros: S\u00edmbolo Funci\u00f3n $1 representa el 1\u00ba par\u00e1metro pasado al script $2 representa el 2\u00ba par\u00e1metro $3 representa el 3\u00ba par\u00e1metro (podemos usar hasta $9) $* representa todos los par\u00e1metros separados por espacio $# representa el n\u00famero de par\u00e1metros que se han pasado $0 representa el par\u00e1metro 0, es decir, el nombre del script o el nombre de la funci\u00f3n Ejemplo: #!/bin/bash echo \u2018El primer par\u00e1metro que se ha pasado es \u2018 $1 echo \u2018El tercer par\u00e1metro que se ha pasado es \u2018 $3 echo \u2018El conjunto de todos los par\u00e1metros : \u2018 $* echo \u2018Me has pasado un total de \u2018 $# \u2018 par\u00e1metros\u2019\u201d echo \u2018El par\u00e1metro 0 es : \u2018 $0 #Fin del script ./script.sh Caballo Perro 675 Nueva El primer par\u00e1metro que se ha pasado es Caballo El tercer par\u00e1metro que se ha pasado es 675 El conjunto de todos los par\u00e1metros : Caballo Perro 675 Nueva Me has pasado un total de 4 par\u00e1metros El par\u00e1metro 0 es : ./script.sh Info Argumento especial $? Contiene el valor que devuelve la ejecuci\u00f3n de un comando. Puede tener dos valores: cero si se ha ejecutado bien y se interpreta como verdadero, o distinto de cero si se ha ejecutado mal y se interpreta como falso. 0 -> Si el \u00faltimo comando se ejecut\u00f3 con \u00e9xito !0 -> Si el \u00faltimo comando no de ejecut\u00f3 con \u00e9xito Variables \u00b6 Es un par\u00e1metro que cambia su valor durante la ejecuci\u00f3n del programa Se da un nombre para identificarla y recuperarla, antecedido por el car\u00e1cter $ Info En shellscript no se declaran y no importa el tipo . El nombre de la variable puede estar compuesto por letras y n\u00fameros y por el car\u00e1cter subrayado \u201c _ \u201d. Ejemplo: #! /bin/bash #********************************* #Este es mi segundo script #********************************* MIVARIABLE=\u2018Administraci\u00f3n de Sistemas Operativos ASO\u2019 echo $MIVARIABLE Warning Deben empezar por letra o \u201c _ \u201d En ning\u00fan caso pueden empezar por un n\u00famero, ya que esa nomenclatura est\u00e1 reservada a los par\u00e1metros. El contenido de estas variables ser\u00e1 siempre tomado como si fuesen cadenas alfanum\u00e9ricas, es decir, ser\u00e1n tratadas como cadenas de texto. Por lo tanto se necesitan operandos o comandos espec\u00edficos para realizar operaciones con valores num\u00e9ricos de las variables. Explicado en el apartado de Operadores Aritm\u00e9ticos . Variables de entorno \u00b6 Cada terminal durante su ejecuci\u00f3n tiene acceso a dos \u00e1mbitos de memoria: Datos Locales Una variable declarada en un terminal solo ser\u00e1 accesible desde el terminal en el que declara. Datos Global Engloban a todos los terminales que se est\u00e9n ejecutando. Son las denominadas Variables de Entorno . Ejemplo de principales variables de entorno: Variable Funci\u00f3n $BASH Ruta del programa Bash $HOME Ruta completa del home del usuario $PATH Lista los directorios de donde busca los programas $RANDOM Devuelve un valor num\u00e9rico aleatorio Entrada y salida del Shell Script \u00b6 Para poder interactuar con un programa de terminal es necesario disponer de un mecanismo de entrada de datos. Para dinamizar el resultado de los shell scripts y un dispositivo de salida que mantenga informado al usuario en todo momento de los que est\u00e1 ocurriendo. Para la entrada de datos se utiliza el comando read y para la salida el comando echo . echo \u00b6 Su tarea es la de mostrar informaci\u00f3n con mensajes de texto lanzados por pantalla Modificador Funci\u00f3n -e para usar las opciones hay utilizar el modificador \\c Sirve para eliminar el salto de l\u00ednea natural del comando echo . \\n nueva l\u00ednea. \\t tabulador horizontal. \\v tabulador vertical. Info Si se antepone el s\u00edmbolo del d\u00f3lar delante de una variable, mostrar\u00e1 su contenido Si es necesario mostrar frases con espacios, debe situarse entre comillas Warning La orden echo permite expandir variables siempre que se usen las comillas dobles. Ejemplo: #!/bin/bash NOMBRE=Javi echo \u201chola $NOMBRE\u201d El texto mostrado por pantalla ser\u00e1: hola javi read \u00b6 Esta herramienta asigna el texto que el usuario ha escrito en el terminal y a una o m\u00e1s variables. Lo que hace read es detener la ejecuci\u00f3n del shell script y pasa el testigo al usuario. Hasta que \u00e9ste no introduzca los datos, la ejecuci\u00f3n del programa no avanzar\u00e1. Ejemplo: #!/bin/bash echo \u201cIntroduce tu nombre : \u201d read NOMBRE echo \u201cHola $NOMBRE\u201d Info Cuando se utiliza read con varios nombres de variables, el primer campo tecleado por el usuario se asigna a la primera variable, el segundo campo a la segunda y as\u00ed sucesivamente Ejemplo: #!/bin/bash read -p \u201cIntroduce tres n\u00fameros (separados por un espacio) : \u201d num1 num2 num3 echo \u201cLos n\u00famero introducidos son $num1, $num2 y $num3\u201d Info En este ejemplo se ha usado el modificador -p el cual permite imprimir un mensaje antes de la recogida de los datos, prescindiendo de primer comando echo del ejemplo anterior. Operadores en shell script \u00b6 Todas las variables creadas en un terminal se tratan como cadenas de texto, incluso si su contenido es s\u00f3lo num\u00e9rico. Este es el motivo por el cual si lanzamos el siguiente c\u00f3digo, no se obtendr\u00e1 el resultado esperado: #!/bin/bash var1=15 var2=5 echo \u201c$var1+$var2\u201d Warning La salida de este programa no ser\u00e1 un n\u00famero 20 , sino la cadena de caracteres 15+5 . Esto es as\u00ed porque la suma de cadenas de texto, son esas cadenas de texto unidas de forma consecutiva. Existen tres tipos de operadores seg\u00fan el trabajo que realicen: aritm\u00e9ticos, relacionales y l\u00f3gicos aritm\u00e9ticos \u00b6 Los operadores aritm\u00e9ticos realizan operaciones matem\u00e1ticas, como sumas o restas con operandos. \"Manipulan\" datos num\u00e9ricos, tanto enteros como reales. S\u00edmbolo Funci\u00f3n + suma - resta * multiplicaci\u00f3n / divisi\u00f3n % modulo (resto) = asignaci\u00f3n Ejemplo: #!/bin/bash #********************************* #Esto es mi tercer script #********************************* NUMERO=4 let SUMA=NUMERO+3 echo $SUMA NUMERO=5 let SUMA=NUMERO+5 echo $SUMA NUMERO=10 let SUMA=NUMERO-10 relacionales \u00b6 Este tipo de operadores tan s\u00f3lo devuelven dos posibles valores; verdadero o falso . Existen subtipos seg\u00fan se comparen cadenas o n\u00fameros. 1. Operadores relacionales para n\u00fameros Operador Acci\u00f3n -eq Comprueba si dos n\u00fameros son iguales. -ne Detecta si dos n\u00fameros son diferentes. -gt Revisa si la izquierda es mayor que derecha. -lt Verifica si la izquierda es menor que derecha. -ge Coteja si la izquierda es mayor o igual que derecha. -le Constata si la izquierda es menor o igual que derecha. 2. Operadores relacionales para cadenas de texto o de cuerda Operador Acci\u00f3n -z Comprueba si la longitud de la cadena es cero. -n Eval\u00faa si la longitud de la cadena no es cero. = Verifica si las cadenas son iguales. != Coteja si las cadenas son diferentes. cadena Revisa si la cadena es nula. 3. Operadores relacionales para archivos y directorios Operador Acci\u00f3n -a Comprueba si existe el archivo. -r Eval\u00faa si la longitud de la cadena no es cero. -w Confirma si existe el archivo y tiene permisos de escritura. -x Constata si existe el archivo y tiene permisos de ejecuci\u00f3n. -f Escruta si existe y es un fichero regular. -d Escruta si existe y es un fichero regular. -h Coteja si existe y es un enlace. -s Revisa si existe el archivo y su tama\u00f1o es mayor a cero. l\u00f3gicos \u00b6 Se utilizan para evaluar condiciones, no elementos. Comprueba el resultado de dos operandos y devuelve verdadero o falso en funci\u00f3n del valor que arrojen los operandos. Los tipos son: Operador Acci\u00f3n && AND , devuelve verdadero si todas condiciones que eval\u00faa son verdaderas. Se puede representar: -a o && . || OR , da como resultado verdadero si alguna de las condiciones que eval\u00faa es verdadera. Se representar: -o o || . ! negaci\u00f3n , invierte el significado del operando. de verdadero a falso, y viceversa. Con ! o not . Info Para realizar c\u00e1lculos aritm\u00e9ticos es necesario utilizar expresiones como expr , let o los expansores . expr \u00b6 Este comando toma los argumentos dados como expresiones num\u00e9ricas, los eval\u00faa e imprime el resultado. Cada t\u00e9rmino de la expresi\u00f3n debe ir separado por espacios en blanco. Soporta diferentes operaciones: sumar, restar, multiplicar y dividir enteros utilizando los operadores aritm\u00e9ticos para el c\u00e1lculo del m\u00f3dulo. Tip MEJOR NO UTILIZAR Desafortunadamente, expr es dif\u00edcil de utilizar debido a las colisiones entre su sintaxis y la propia del terminal. Puesto que * es el s\u00edmbolo comod\u00edn, deber\u00e1 ir precedido por una barra invertida para que el terminal lo interprete literalmente como un asterisco. Adem\u00e1s, es muy inc\u00f3modo de trabajar ya que los espacios entre los elementos de una expresi\u00f3n son cr\u00edticos. Ejemplo: #!/bin/bash var=5 resultado=`expr $1 + $var + 1 echo $resultado` let \u00b6 Facilita la sintaxis de estas operaciones aritm\u00e9ticas reduci\u00e9ndolas a la m\u00ednima expresi\u00f3n. No es necesario incluir el s\u00edmbolo del d\u00f3lar que precede a las variables. Se configura como un comando m\u00e1s c\u00f3modo de ejecutar. Ejemplo: #!/bin/bash var=5 let resultado=$1+var+1 echo $resultado expansores \u00b6 Para las operaciones aritm\u00e9ticas se utilizan los dobles par\u00e9ntesis. Realizan la operaci\u00f3n contenida dentro de ellos lanzando la ejecuci\u00f3n fuera de ellos una vez resuelta. Ejemplo: #!/bin/bash var=5 echo $(($1+$var+1)) echo $(($1 + $var + 1)) Tip Consejo de uso , ya que es mucho m\u00e1s intuitivo que las anteriores expresiones. Redirecciones \u00b6 Una redirecci\u00f3n consiste en trasladar la informaci\u00f3n de un fichero de dispositivo a otro. Para ello se utilizan los siguientes s\u00edmbolos: S\u00edmbolo Acci\u00f3n < redirecciona la entrada desde el fichero stdin (entrada est\u00e1ndar) > env\u00eda la salida de stdout (salida est\u00e1ndar) a un fichero especificado >> a\u00f1ade la salida de stdout (salida est\u00e1ndar) a un fichero especificado 2> env\u00eda la salida de stderr (error est\u00e1ndar) a un fichero especificado * Ejemplo: sh script.sh 2>/dev/null Info El objetivo de la expresi\u00f3n anterior puede ser utilizada en la administraci\u00f3n de sistemas para descartar el error est\u00e1ndar de un proceso, de esta forma no aparecer\u00e1n los mensajes de error por el terminal; es muy utilizado . Tuber\u00edas \u00b6 Forma pr\u00e1ctica de redireccionar la salida est\u00e1ndar de un programa hacia la entrada est\u00e1ndar de otro. Esto se logra usando el s\u00edmbolo | (pipeline). Ejemplo: $ cat archivo.txt | wc Info El comando anterior utiliza tuberias para redireccionar la salida est\u00e1ndar del comando cat y pasarla como entrada est\u00e1ndar del comando wc para contar las l\u00edneas y palabras de un archivo. alias \u00b6 Alias es un comando que se ejecuta desde un terminal que permite configurar v\u00ednculos entre varios comandos. Cada usuario puede asignar una palabra f\u00e1cil de recordar a uno o m\u00e1s comandos que, por lo general, pueden ser m\u00e1s complicados de recordar. Ejemplo: alias listado=\u2019ls -lia>\u2019 Sistema de notaci\u00f3n \u00b6 Antes de lanzarse a escribir una sola l\u00ednea de c\u00f3digo es necesario pensar en la resoluci\u00f3n del problema tal y como se ha indicado. La creaci\u00f3n de una soluci\u00f3n a un problema siguiendo un conjunto de instrucciones se denomina algoritmo. Es necesario invertir el tiempo suficiente para construir ese algoritmo ya que esa ser\u00e1 la soluci\u00f3n que se debe implementar en c\u00f3digo. Existen varios sistemas de representaci\u00f3n para describir esos algoritmos; pseudoc\u00f3digo , la descripci\u00f3n narrada o diagramas Nassi-Shneiderman , pero en este manual se ha optado por los diagramas de flujo ya que resultan m\u00e1s intuitivos. Diagramas de flujo \u00b6 Los diagramas de flujo o flujogramas son la representaci\u00f3n gr\u00e1fica de la soluci\u00f3n algor\u00edtmica de un problema. Para dise\u00f1arlos se emplean figuras normalizadas que representan una acci\u00f3n dentro del procedimiento. Cada una de estas figuras representa un paso a seguir dentro del algoritmo. Note Para su construcci\u00f3n se han de respetar las siguientes reglas: Tiene un elemento de inicio en la parte superior y uno final en la parte inferior. Se escribe de arriba hacia abajo y de izquierda a derecha. Siempre se usan flechas verticales u horizontales, jam\u00e1s curvas u oblicuas Se debe evitar cruce de flujos. En cada paso expresar una acci\u00f3n concreta. En lo sucesivo se ilustrar\u00e1n las diferentes estructuras de control a trav\u00e9s de esta t\u00e9cnica la cual facilita su comprensi\u00f3n. En la siguiente figura se puede observar simbolog\u00eda para dise\u00f1ar diagramas de flujo. Simbolog\u00eda diagramas. Control de flujo \u00b6 Controlar el flujo es determinar el orden en el que se ejecutar\u00e1n las instrucciones en un programa. Si no existiese las estructuras de control del flujo, todo el c\u00f3digo se ejecutar\u00edan de forma secuencial, es decir, empezar\u00edan por la primera instrucci\u00f3n y se ejecutar\u00edan una a una hasta llegar a la \u00faltima. Este modo de ejecuci\u00f3n esta realizado por estructuras secuenciales . Ejemplo: Estructura secuencial. Warning La estructura secuencial no es v\u00e1lida para solucionar la mayor\u00eda de los problemas que se plantean. Para ello es necesario la elecci\u00f3n de un c\u00f3digo u otro en funci\u00f3n de ciertas condiciones, formado otro tipo de estrcuturas que son conocidas como estructuras condicionales ; entre las cuales podemos destacar: Estructuras Alternativas , seg\u00fan si se cumple la condici\u00f3n o no, se realizar\u00e1 una tarea u otra. Ejemplo de utilizaci\u00f3n con la sentencia: if . Estructuras Iterativas , cuando necesario ejecutar algunas instrucciones repetidas veces. Ejemplo de utilizaci\u00f3n con la sentencia: for . Estructuras condicionales \u00b6 Las estructuras de selecci\u00f3n permiten ejecutar diferentes instrucciones dependiendo del valor de una variable o expresi\u00f3n. Tambi\u00e9n se les llama ramificaciones, estructuras de decisi\u00f3n o alternativas. Cuando se usan, no todas las instrucciones del programa se ejecutan, solo las especificadas para el valor de la variable durante esa ejecuci\u00f3n. Las estructuras de selecci\u00f3n m\u00e1s comunes son las que proporcionan ramificaciones dobles ( if ) y m\u00faltiples ( elif y case ). Estructura alternativa doble: if \u00b6 La forma general de la orden if es: if [ expresi\u00f3n ] then realizar este c\u00f3digo si expresi\u00f3n es verdadera fi Estructura alternativa simple. Ejemplo: if [ $# -eq 1 ] then VAR=$1 fi Info El c\u00f3digo anterior comprueba se ha pasado alg\u00fan argumento ,es decir, si han pasado un par\u00e1metro. En caso afirmativo, asigna el contenido de ese par\u00e1metro a la variable VAR. Warning Hay que recordar siempre cerrar esta estructura para indicarle al terminal donde termina, en este caso, se cierra con la palabra reservada fi . Estructura alternativa multiple if then else \u00b6 En este caso se contempla tambi\u00e9n la posibilidad de ejecutar alguna acci\u00f3n si no se cumple la expresi\u00f3n. La forma general del if then else es: if [ expresi\u00f3n ] then realizar si expresi\u00f3n es verdadera else realizar si expresi\u00f3n es falsa fi Estructura alternativa doble. Ejemplo: if [ $a -gt $b ] then echo \"$a es mayor que $b\" else echo \"$a es menor que $b\" fi La estructura if then elif else \u00b6 Permite una segunda evaluaci\u00f3n para ejecutar c\u00f3digo a trav\u00e9s de la estructura elif . Es posible colocar tantos elif como condiciones se requiera evaluar. La forma general del if then elif else es: if [ exp1 ] then realizar si exp1 es verdadera elif [ exp2 ] then realizar si exp1 es falsa, pero es verdadera exp2 elif [ exp3 ] then realizar si exp1 y exp2 son falsas, pero es verdadera exp3 else realizar si todas las expresiones son falsas fi Ejemplo: if [ $a -gt $b ] then echo \"$a es mayor que $b\" elif [ $a -eq $b ] then echo \"$a es igual que $b\" else echo \"$a es menor que $b\" fi Info Este ejemplo ampl\u00eda el anterior comprobando si, adem\u00e1s, los valores de a y b son iguales. Warning El \u00faltimo caso se realiza con la sentencia else . La estructura case \u00b6 La estructura case permite realizar varias acciones en funci\u00f3n del valor de una variable. La limitaci\u00f3n que tan s\u00f3lo se comprueba si es igual a ese valor. La forma general del case es: case VARIABLE in valor1) Se ejecuta si VARIABLE tiene el valor1 ;; valor2) Se ejecuta si VARIABLE tiene el valor2 ;; *) Se ejecuta por defecto ;; esac Estructura Alternativa Multiple. Estructuras de iteraci\u00f3n \u00b6 Son operaciones que se deben ejecutar un n\u00famero repetido de veces para resolver un problema. El conjunto de instrucciones que se ejecuta dentro de esta estructura, se denomina ciclo, bucle o lazo. Iteraci\u00f3n es cada una de las pasadas o ejecuciones de todas las instrucciones contenidas en el bucle. Estas repeticiones de c\u00f3digo van a depender de la evaluaci\u00f3n de una condici\u00f3n o del valor de una variable. Es posible repetir un c\u00f3digo hasta que se cumpla o deje de cumplir una condici\u00f3n pero tambi\u00e9n se posible la repetici\u00f3n tantas veces como indique una variable. Warning Hay que tener mucho cuidado a la hora de dise\u00f1ar estas estructuras y no caer en el error de construir bucles infinitos , es decir, estructuras que nunca dejar\u00e1n de ejecutarse ya que no tienen condici\u00f3n de salida o, si la tienen, \u00e9sta nunca se va a cumplir. Para utilizar esta estructura en algoritmos, se usan: Contador: es una variable cuyo valor se incrementa o decrementa en una cantidad constante cada vez que se produce un determinado suceso o acci\u00f3n. Los contadores se utilizan con la finalidad de contar sucesos o acciones internas de un bucle. Info La inicializaci\u00f3n consiste en asignarle al contador un valor. Se situar\u00e1 antes y fuera del bucle. Acumulador o Totalizador es una variable que suma sobre s\u00ed misma un conjunto de valores para de esta manera tener el total de todos ellos en una sola variable. Info La diferencia entre un contador y un acumulador es que mientras el primero va aumentando de uno en uno, el acumulador va aumentando en una cantidad variable. Banderas , conocidas tambi\u00e9n como interruptores, switch, flags o conmutadores. Son variables que pueden tomar solamente dos valores durante la ejecuci\u00f3n del programa, los cuales pueden ser cero o uno, o bien los valores booleanos verdadero o falso. Info Se les suele llamar interruptores porque cuando toman un valor est\u00e1n simulando un interruptor abierto/cerrado o encendido/apagado. Estructura Iterativa. Las estructuras while y until \u00b6 Estas estructuras van a repetir el c\u00f3digo que contienen mientras la expresi\u00f3n evaluada sea verdadera. El funcionamiento es l\u00f3gico: Eval\u00faa la condici\u00f3n, si es falsa, no realiza ninguna acci\u00f3n y continua con el siguiente c\u00f3digo del programa. Si es verdadera entra en el bucle y ejecuta el c\u00f3digo que contiene. Al finalizar la ejecuci\u00f3n, al iterar, vuelve a evaluar la condici\u00f3n y vuelve a repetir la operaci\u00f3n anterior. Warning Al construir una estructura while es preciso asegurarse que en alg\u00fan momento de su ejecuci\u00f3n la condici\u00f3n dejar\u00e1 de cumplirse y se romper\u00e1 el ciclo, si no, \u00e9ste ser\u00e1 infinito, a menos que el usuario o el sistema interrumpa su ejecuci\u00f3n. WHILE while [ expresi\u00f3n ] do c\u00f3digo se repite MIENTRAS la expresi\u00f3n sea verdadera done UNTIL until [ expresi\u00f3n ] do c\u00f3digo se repite HASTA que la expresi\u00f3n sea verdadera done Info La diferencia es que un until se ejecuta como m\u00ednimo una vez, ya que ejecuta el c\u00f3digo y luego comprueba, mientras que el while es posible que nunca se ejecute, ya que es posible que la condici\u00f3n de entrada nunca se cumpla. Ejemplo: while [ expresi\u00f3n ] #! /bin/bash read -p \u201cEscribe un n\u00famero : \u201c num i=1 while [ $i -le 10 ] do let res=num*i echo \u201c$i x $num = $res\u201d let i=i+1 done Info Este c\u00f3digo imprime por pantalla la tabla de multiplicar del n\u00famero que el usuario ha especificado. Las l\u00edneas contenidas entre do y done se ejecutar\u00e1n mientras i sea menor o igual a diez. Al final de cada iteraci\u00f3n el valor de i se incrementa en uno (es un contador) por lo que en diez iteraciones la condici\u00f3n dejar\u00e1 de cumplirse y el bucle se romper\u00e1. La estructuras for \u00b6 Esta estructura permite repetir c\u00f3digo por cada elemento de un conjunto determinado. No necesita condici\u00f3n de salida ya que al finalizar los elementos del conjunto acabar\u00e1 con su ejecuci\u00f3n. la forma general es: for variable in conjunto do estas l\u00edneas se repiten una vez por cada elemento del conjunto variable toma los valores del conjunto, uno en cada iteraci\u00f3n done * Ejemplo: #! /bin/bash read -p \u201cEscribe la direcci\u00f3n de una carpeta : \u201c car for i in $(ls $car) do if [ -f $i ] then echo \u201c$i es un archivo de tipo regular\u201d elif [ -d $i ] then echo \u201c$i es un archivo de tipo directorio\u201d else echo \u201c$i es otro tipo de archivo o no existe\u201d fi done Info Este ejemplo se van a mostrar los nombres de los ficheros que contiene un directorio y dir\u00e1 si es un directorio o un fichero. Romper un bucle de forma deliberada \u00b6 No s\u00f3lo es posible terminar un bucle cuando se cumpla una condici\u00f3n o cuando se terminen los elementos de un conjunto, shell script proporciona dos formas de alterar el funcionamiento de la estructura en un bucle y romperla en funci\u00f3n de las necesidades del programa: break rompe el bucle que lo contiene y contin\u00faa la ejecuci\u00f3n del script. continue rompe la iteraci\u00f3n que lo contiene, pero mantiene el bucle, que continuar\u00e1 con la siguiente iteraci\u00f3n hasta que termine su ejecuci\u00f3n. exit detiene la ejecuci\u00f3n del script. Este comando no es exclusivo de las estructuras iterativas, pero cobra especial sentido en este \u00e1mbito. Vectores en shell script \u00b6 Un vector es una estructura de datos que permite almacenar una colecci\u00f3n de elementos. Por el hecho de tratarse de una estructura de datos es posible realizar operaciones sobre \u00e9l como buscar, eliminar y agregar elementos a su estructura. Los elementos se encuentran ordenados en funci\u00f3n de como han sido introducidos en la estructura. Para acceder a cada elemento ser\u00e1 necesario especificar la posici\u00f3n que ocupan dentro de ella, teniendo presente que la numeraci\u00f3n de los vectores comienza desde cero, no desde uno. Info Un buen ejemplo de uso ser\u00eda, por ejemplo, para recoger el listado de archivos que hay en una carpeta. Esquema de un vector de doce elementos. Para definir un vector disponemos de dos formas: Impl\u00edcita: hace referencia a que el vector ha sido declarado y al mismo tiempo se han inicializado sus valores. Expl\u00edcitamente: cuando el vector no requiere que se inicialice mientras se declara, es decir, pueden ser inicializados con posterioridad. Para declarar un vector hay que utilizar la siguiente estructura: declare -a meses=(\"enero\" \"febrero\" \"marzo\") Tambi\u00e9n es posible utilizar alguna expresi\u00f3n para completar un vector, como con el operador rango ... declare -a letras=( {N..Z} {s..z} ) echo ${letras[*]} Info Esto crear\u00e1 un vector con el siguiente contenido y lo mostrar\u00e1 por pantalla as\u00ed: N O P Q R S T U V W X Y Z s t u v w x y z Para a\u00f1adir un elemento a la estructura se debe indicar el \u00edndice o posici\u00f3n que ocupar\u00e1 el nuevo dato. Si el \u00edndice es mayor que la \u00faltima posici\u00f3n de la estructura, se escribir\u00e1 al final de la misma. Si se usa un \u00edndice que ya contiene un dato, \u00e9ste ser\u00e1 sobrescrito. meses[3]=\"abril\" Para mostrar el contenido del vector: echo ${meses[*]} Info Mostrar\u00e1: enero febrero marzo abril Es buena idea conocer el n\u00famero de elementos que contiene un vector para poder introducir datos de forma correcta y no sobrescribir por accidente alg\u00fan valor ya almacenado. As\u00ed es posible utilizar: Comando Acci\u00f3n ${meses[*]} Muestra todos los valores del vector ${!meses[*]} Muestra todos los \u00edndices del vector ${#meses[*]} Devuelve el n\u00famero de valores del vector ${#meses[0]} Imprime la longitud del primer dato del vector Para recorrer los valores que contiene esta estructura se puede utilizar un bucle for for item in ${meses[*]} do echo $item done * Tambi\u00e9n se puede utilizar sus \u00edndices para mostrar los datos contenidos. for index in ${!meses[*]} do echo ${meses[$index]} done Es una estructura muy \u00fatil en la que se puede guardar cualquier tipo de informaci\u00f3n, como por ejemplo los ficheros que contiene una carpeta: i=0; for fichero in $(ls -a) do ficheros[$i]=$fichero; let i=i+1; done Funciones en shell script \u00b6 Una funci\u00f3n es un conjunto de l\u00edneas de c\u00f3digo que se identifican a trav\u00e9s de un identificador y que se ejecutan al invocar ese identificador. Se podr\u00eda definir como un shell script dentro de un shell script. Sirve para organizarlo en unidades l\u00f3gicas m\u00e1s peque\u00f1as de manera que sea m\u00e1s f\u00e1cil mantenerlo. Las funciones aceptan par\u00e1metros, de id\u00e9ntica manera que los shell script, por lo que su uso tambi\u00e9n es muy intuitivo. La estructura de una funci\u00f3n queda definida de la siguiente manera: function nombre_funci\u00f3n(){ c\u00f3digo que se ejecutar\u00e1 al llamar a la funci\u00f3n } Info source Para incluir el c\u00f3digo de un fichero en otro tan s\u00f3lo ser\u00e1 necesario utilizar la palabra source seguida de la ruta de ese fichero. * * Tambi\u00e9n es posible usar el punto para poder cargarlo: source funciones.sh o ./funciones.sh Las funciones suelen declararse al inicio del documento y luego utilizadas a lo largo del programa. Uno de los objetivos es optimizar el c\u00f3digo, mediante el \"aprovechamiento\" de c\u00f3digo. Cuando un conjunto de l\u00edneas de c\u00f3digo se repiten, es posible agruparlas bajo un nombre y utilizar ese nombre en lugar de repetir este c\u00f3digo. Ejemplo: #! /bin/bash function imprimir_tabla(){ echo \u201cTabla del n\u00famero $1\u201d for i in 1 2 3 4 5 6 7 8 9 10 do let res=$1*i echo \u201c$i x $1 = $res\u201d done } read -p \u201cEscribe un n\u00famero : \u201c num imprimir_tabla $num imprimir_tabla 5 } En este ejemplo se ha construido una funci\u00f3n para imprimir la tabla de multiplicar de un n\u00famero pasado como par\u00e1metro. En la siguiente l\u00ednea le pedimos al programa que imprima la tabla del n\u00famero cinco. No se ha necesitado escribir el c\u00f3digo que imprime la su tabla de multiplicar de nuevo, ya que con invocar el nombre de la funci\u00f3n el programa ya sabe que c\u00f3digo debe ejecutar. Warning N\u00f3tese que el valor de $1 no se pasa como par\u00e1metro del shell script, si no como par\u00e1metro a la funci\u00f3n imprimir_tabla tras haberlo preguntado al usuario. Hay que tener en cuenta que las variables que se declaran dentro de una funci\u00f3n existen \u00fanicamente dentro de ella. Si es preciso utilizar una variable fuera de una funci\u00f3n se puede usar return , que devuelve un valor fuera de ella, o usar la palabra reservada GLOBAL Es preferible utilizar el primer m\u00e9todo para que devuelva un valor que ser\u00e1 recogido en otra variable fuera de la funci\u00f3n que lo origin\u00f3. Actividades \u00b6 Note Escribe el c\u00f3digo de los scripts en ShellScript que se detallan en cada ejercicio. Deber\u00e1s crear un fichero de texto para cada ejercicio con el siguiente nombre: ejXXX.sh, donde las X representan el n\u00famero de ejercicio. Una vez terminada la pr\u00e1ctica, comprime todos estos ficheros en uno y s\u00fabelos al Moodle. Actividades iniciales \u00b6 Crea un shell script que muestre por pantalla el mensaje \u201c \u00a1Hola Mundo! \u201d. Realiza un shell script que admita un \u00fanico par\u00e1metro correspondiente al nombre de un fichero de texto. Mostrar\u00e1 por pantalla el n\u00famero de l\u00edneas del mismo utilizando el comando wc . Crea un shell script que muestre por pantalla el resultado de de las siguientes operaciones. Debes tener en cuenta que a, b y c son variables enteras que son preguntadas al usuario al iniciar el script. a%b a/c 2 * b + 3 * (a-c) a * (b/c) (a*c)%b Actividades de desarrollo UD1_01 \u00b6 Modifica el shell script realizado en el ejercicio 102 para comprobar si el fichero existe. En tal caso debe contar el n\u00famero de l\u00edneas del mismo a trav\u00e9s del comando wc y mostrar un mensaje indicando dicho n\u00famero. Si el fichero no existe, debe mostrar un mensaje de error y salir. Crea un shell script que al ejecutarlo muestre por pantalla uno de estos mensajes \u201cBuenos d\u00edas\u201d , \u201cBuenas tardes\u201d o \u201cBuenas noches\u201d , en funci\u00f3n de la hora que sea en el sistema (de 8:00 de la ma\u00f1ana a 15:00 ser\u00e1 ma\u00f1ana, de 15:00 a 20:00 ser\u00e1 tarde y el resto ser\u00e1 noche). Para obtener la hora del sistema utiliza el comando date. Construye un programa denominado AGENDA que permita mediante un men\u00fa, el mantenimiento de un peque\u00f1o archivo lista.txt con el nombre, direcci\u00f3n y tel\u00e9fono de varias personas. Debes incluir estas opciones al programa: A\u00f1adir (a\u00f1adir un registro) Buscar (buscar entradas por nombre, direcci\u00f3n o tel\u00e9fono) Listar (visualizar todo el archivo). Ordenar (ordenar los registros alfab\u00e9ticamente). Borrar (borrar el archivo). Crea un shell script que sume los n\u00fameros del 1 al 1000 mediante una estructura for , while y until . Actividades de desarrollo UD1_02 \u00b6 Construye los siguientes dos shell script utilizando estructuras iterativas: el primero ej108A.sh , que pida un n\u00famero e indique si se trata de un n\u00famero par y si es n\u00famero primo. el tercero ej108B.sh , que muestre las 10 primeras tablas de multiplicar por pantalla. Existir\u00e1 un tiempo de espera de dos segundos entre tabla (usa el comando sleep para ello). Crea un shell script para jugar a \u201cDoble o Nada\u201d. Consistir\u00e1 en adivinar un n\u00famero entre 1 y 10 (este n\u00famero ser\u00e1 generado al azar por el ordenador, para ello debes utilizar la funci\u00f3n $RANDOM de la siguiente manera numero=$RANDOM % 10 ). * A\u00f1ade al juego las siguientes caracter\u00edsticas: El jugador apuesta una cantidad de un valor inicial de 100 puntos. Si sale cara obtiene el doble de la cantidad apostada. Si sale cruz pierde todo lo apostado. El shell script debe llevar la cuenta de las tiradas y de la cantidad ganada. Al final de la partida mostrar\u00e1 un informe por pantalla a modo de resumen. Modificar el shell script anterior para que permita ir jugando hasta que el jugador decida abandonar el juego (para ello deber\u00e1 pulsar la tecla \u201cx\u201d del teclado), o no tenga m\u00e1s dinero que apostar. Tampoco podr\u00e1 apostar m\u00e1s dinero del que dispone en su \u201ccartera virtual\u201d. Actividades de desarrollo UD1_03 \u00b6 Realiza un script que permita crear un informe de las IP libres en la red en la que se encuentra el equipo. Debe contener las siguientes opciones: El informe contendr\u00e1 un listado de todas las IP de la red a la que pertenece el equipo indicando si est\u00e1 libe o no (usa el comando ping). En el informe debe aparecer el tipo de red (rango CIDR) en el que est\u00e1 inmerso el ordenador con el nombre de la red , su broadcast y su m\u00e1scara de subred . Esta informaci\u00f3n la pod\u00e9is obtener desde el comando ifconfig. Note Para facilitar los c\u00e1lculos asumimos que el equipo donde se ejecuta el script se encuentra en una \u00fanica red, es decir, solo posee una tarjeta de red. Crea un script que rellene un vector con cien valores aleatorios y muestre en pantalla en una sola l\u00ednea los valores generados.","title":"1.1- ShellScripting"},{"location":"011_ShellScripting.html#shell-scripting","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 3 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje y Criterios de evaluaci\u00f3n: Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Se han utilizado y combinado las estructuras del lenguaje para crear guiones. Se han utilizado herramientas para depurar errores sint\u00e1cticos y de ejecuci\u00f3n. Se han interpretado guiones de configuraci\u00f3n del sistema operativo. Se han realizado cambios y adaptaciones de guiones del sistema. Se han creado y probado guiones de administraci\u00f3n de servicios. Se han creado y probado guiones de automatizaci\u00f3n de tareas. Se han implantado guiones en sistemas libres . Se han consultado y utilizado librer\u00edas de funciones. Se han documentado los guiones creados.","title":"Shell Scripting"},{"location":"011_ShellScripting.html#introduccion-linux","text":"","title":"Introducci\u00f3n Linux"},{"location":"011_ShellScripting.html#breve-historia","text":"1969 La empresa AT&T desarrolla el sistema operativo UNIX y vendido posteriormente a Novell. 1983 Richard Stallman comienza el proyecto GNU (GNU is Not Unix) para crear un SO tipo UNIX pero de software libre. Software libre: Aquel software, que una vez adquirido (no tiene porque ser gratuito), puede ser usado, copiado, modificado y redistribuido, con cambios o mejoras. 1985 Microsoft publica Windows, un sistema operativo con interfaz gr\u00e1fica de usuario (GUI) para su sistema operativo MS-DOS. 1991 Linus Torvald comienza a programar el sistema operativo Linux (Linus + UNIX). El c\u00f3digo era totalmente nuevo, pero emulaba el funcionamiento del sistema operativo MINIX (Tanenbaum), con estructura de micronucleo. 1992 Se juntan el proyecto Linux y GNU \u2192 GNU/Linux. 2001 Se lanza el primer sistema operativo MAC (MAC OS X) con interfaz de escritorio. MAC est\u00e1 basado en UNIX.","title":"Breve Historia"},{"location":"011_ShellScripting.html#principales-actores","text":"Principales Actores en la creaci\u00f3n de GNU/Linux","title":"Principales Actores"},{"location":"011_ShellScripting.html#caracteristicas","text":"Software Libre \u2192 Cualquiera puede usarlo o descargarlo. Licencias GPL (General Public License) de GNU. La Licencia P\u00fablica General de GNU o m\u00e1s conocida por su nombre en ingl\u00e9s GNU General Public License es una licencia de derecho de autor ampliamente usada en el mundo del software libre y c\u00f3digo abierto, \u200b y garantiza a los usuarios finales la libertad de usar, estudiar, compartir y modificar el software. C\u00f3digo Abierto \u2192 Cualquiera puede ver y modificar el c\u00f3digo. En la siguiente tabla se muestra algunas de las principales caracter\u00edsticas. Tabla con algunas caracter\u00edsticas de Linux","title":"Caracter\u00edsticas"},{"location":"011_ShellScripting.html#distribuciones","text":"Gratuitas: Ubuntu, CentOS, Mint, Fedora, Knoppix, OpenSUSE. En el caso de Ubuntu sacan distribuciones LTS que tienen mayor tiempo de actualizaciones. Las versiones indican el a\u00f1o y el mes en que se saca dicha versi\u00f3n. Por ejemplo 17.04 (A\u00f1o 2017, Abril). Pago: RedHat o SUSE. Se paga por el soporte, no por el software en s\u00ed. Las distribuciones de pago tambi\u00e9n suelen tener sus versiones gratuitas.","title":"Distribuciones"},{"location":"011_ShellScripting.html#principales-distribuciones","text":"Algunas Distribuciones de Linux","title":"Principales distribuciones"},{"location":"011_ShellScripting.html#shell","text":"En inform\u00e1tica, el shell o int\u00e9rprete de \u00f3rdenes o int\u00e9rprete de comandos es el programa inform\u00e1tico que provee una interfaz de usuario para acceder a los servicios del sistema operativo. Dependiendo del tipo de interfaz que empleen, los shells pueden ser: De l\u00edneas texto ( CLI , Command-Line Interface, interfaz de l\u00ednea de comandos), Gr\u00e1ficos ( GUI , Graphical User Interface, interfaz gr\u00e1fica de usuario), De lenguaje natural ( NUI , Natural User Interface, interfaz natural de usuario). En un terminal (Shell) es posible crear cualquier comando que el usuario necesite, incluso para las tareas m\u00e1s espec\u00edficas. Debido a estar directamente conectado al Kernel a diferencia de las aplicaciones como se puede observar en la siguiente figura. Estructura de Linux Tip Es buena pr\u00e1ctica que el administrador del sistema tenga conocimientos en el manejo del terminal as\u00ed como en la programaci\u00f3n de scripts. Info Linux dispone de varios Shell diferentes csh , bash , sh , ksh , zsh , etc... En este tema utilizaremos el Shell bash .","title":"Shell"},{"location":"011_ShellScripting.html#formato-comandos","text":"En general, el formato de las \u00f3rdenes de GNU/Linux es el siguiente: Comando , que indica la acci\u00f3n que se va a ejecutar. Modificadores , que cambian el comportamiento est\u00e1ndar del comando para adaptarlo a las necesidades. Argumentos , elementos necesarios para realizar la acci\u00f3n del comando. Warning Un dato a tener en cuenta cuando se trabaja con un terminal, es que GNU/Linux distingue entre may\u00fasculas y nim\u00fasculas, es decir, la ejecuci\u00f3n de comandos en el CLI de Linux es CASE SENSITIVE .","title":"Formato comandos"},{"location":"011_ShellScripting.html#principales-comandos","text":"Comando Acci\u00f3n Comando Acci\u00f3n ls muestra el contenido de una carpeta uname muestra informaci\u00f3n del sistema df muestra estado del disco cd cambiar de directorio fsck comprueba integridad de discos mkdir crear directorios mount monta particiones y vol\u00famenes shutdown apaga el equipo ( restart o reboot ) unmount desmonta particiones y vol\u00famenes clear limpia la pantalla fdisk administra particiones date/cal muestra hora/calendario del sistema echo imprime por pantalla who muestra quien est\u00e1 conectado","title":"Principales comandos"},{"location":"011_ShellScripting.html#shell-script-en-gnulinux","text":"Un Shell script (gui\u00f3n) es un archivo de texto que contiene una serie de comandos que, ordenados de forma espec\u00edfica, realizan la tarea para la que fueron dise\u00f1ados, es decir, es un programa escrito de comandos Shell para ser ejecutados de forma secuencial. De esta forma se pueden automatizar tareas repetitivas ahorrando tiempo al administrador. Un programa escrito en shell se denomina shellscript, programa shell o simplemente un shell.","title":"Shell Script en GNU/Linux"},{"location":"011_ShellScripting.html#creacion-shell-scripts","text":"Para crear un script utilizaremos cualquiera de los editores de texto plano como vi , vim , nano . Despu\u00e9s de crear el archivo hay que dotarlo de permisos de lectura y ejecuci\u00f3n. chmod ugo=rx script.sh Para ejecutar el archivo: ubicados en la carpeta que contiene el archivo, se pueden utilizar tres formas: Se teclea el nombre del archivo en el terminal precedido del comando sh sh script.sh Precedido de un punto . . script.sh ./ script.sh Definir la carpeta dentro de la variable de entorno PATH (tambi\u00e9n editando el fichero .bashrc ). Una vez realizado ya se podr\u00eda ejecutar directamente el fichero con el nombre del script. mkdir /home/administrador/scripts PATH=$PATH:/home/administrador/scripts export PATH Info Cualquiera de estas dos primeras formas ejecutar\u00e1 el contenido del shell script en un subshell o hilo del terminal original. El programa se ejecuta hasta que se terminan las \u00f3rdenes del archivo, se recibe una se\u00f1al de finalizaci\u00f3n, se encuentra un error sint\u00e1ctico o se llega a una orden exit . Cuando el programa termina, el subshell muere y el terminal original toma el control del sistema. Esto no ocurre si se usa la opci\u00f3n de PATH , la cual ejecuta el contenido del shell script en el mismo terminal donde fue invocado.","title":"Creaci\u00f3n Shell scripts"},{"location":"011_ShellScripting.html#el-primer-shellscript","text":"Crea un ejemplo llamado listar.sh cd ~ mkdir scripts cd scripts touch listar.sh nano listar.sh Genera, guarda y prueba el siguiente c\u00f3digo. #! /bin/bash clear ls -la echo \u201cListado realizado el \u201c$(date)","title":"El primer Shellscript"},{"location":"011_ShellScripting.html#comentarios","text":"Para realizar un comentario se usa el car\u00e1cter # Cuando el terminal encuentra una l\u00ednea que comienza con este car\u00e1cter, ignora todo lo que existe desde \u00e9l hasta el final de l\u00ednea. A esta regla existe una excepci\u00f3n: #!/bin/bash Info Indica el terminal que ser\u00e1 utilizado por el shell script, no un comentario. Esta l\u00ednea debe ser la primera del fichero que, a\u00fan siendo opcional, indica el tipo de lenguaje en el que ha sido escrito el programa. Si la versi\u00f3n de GNU/Linux dispone de el terminal especificado en esta l\u00ednea, ejecutar\u00e1 el c\u00f3digo con \u00e9l, si no es as\u00ed, utilizar\u00e1 el que por defecto tenga asignado el usuario que lo ejecuta.","title":"Comentarios"},{"location":"011_ShellScripting.html#argumentos-o-parametros","text":"Son especificaciones que se le hacen al programa al momento de llamarlo para obtener un efecto diferente. Introducen un valor, cadena o variable dentro del script. Utilizaci\u00f3n de par\u00e1metros: S\u00edmbolo Funci\u00f3n $1 representa el 1\u00ba par\u00e1metro pasado al script $2 representa el 2\u00ba par\u00e1metro $3 representa el 3\u00ba par\u00e1metro (podemos usar hasta $9) $* representa todos los par\u00e1metros separados por espacio $# representa el n\u00famero de par\u00e1metros que se han pasado $0 representa el par\u00e1metro 0, es decir, el nombre del script o el nombre de la funci\u00f3n Ejemplo: #!/bin/bash echo \u2018El primer par\u00e1metro que se ha pasado es \u2018 $1 echo \u2018El tercer par\u00e1metro que se ha pasado es \u2018 $3 echo \u2018El conjunto de todos los par\u00e1metros : \u2018 $* echo \u2018Me has pasado un total de \u2018 $# \u2018 par\u00e1metros\u2019\u201d echo \u2018El par\u00e1metro 0 es : \u2018 $0 #Fin del script ./script.sh Caballo Perro 675 Nueva El primer par\u00e1metro que se ha pasado es Caballo El tercer par\u00e1metro que se ha pasado es 675 El conjunto de todos los par\u00e1metros : Caballo Perro 675 Nueva Me has pasado un total de 4 par\u00e1metros El par\u00e1metro 0 es : ./script.sh Info Argumento especial $? Contiene el valor que devuelve la ejecuci\u00f3n de un comando. Puede tener dos valores: cero si se ha ejecutado bien y se interpreta como verdadero, o distinto de cero si se ha ejecutado mal y se interpreta como falso. 0 -> Si el \u00faltimo comando se ejecut\u00f3 con \u00e9xito !0 -> Si el \u00faltimo comando no de ejecut\u00f3 con \u00e9xito","title":"Argumentos o Par\u00e1metros"},{"location":"011_ShellScripting.html#variables","text":"Es un par\u00e1metro que cambia su valor durante la ejecuci\u00f3n del programa Se da un nombre para identificarla y recuperarla, antecedido por el car\u00e1cter $ Info En shellscript no se declaran y no importa el tipo . El nombre de la variable puede estar compuesto por letras y n\u00fameros y por el car\u00e1cter subrayado \u201c _ \u201d. Ejemplo: #! /bin/bash #********************************* #Este es mi segundo script #********************************* MIVARIABLE=\u2018Administraci\u00f3n de Sistemas Operativos ASO\u2019 echo $MIVARIABLE Warning Deben empezar por letra o \u201c _ \u201d En ning\u00fan caso pueden empezar por un n\u00famero, ya que esa nomenclatura est\u00e1 reservada a los par\u00e1metros. El contenido de estas variables ser\u00e1 siempre tomado como si fuesen cadenas alfanum\u00e9ricas, es decir, ser\u00e1n tratadas como cadenas de texto. Por lo tanto se necesitan operandos o comandos espec\u00edficos para realizar operaciones con valores num\u00e9ricos de las variables. Explicado en el apartado de Operadores Aritm\u00e9ticos .","title":"Variables"},{"location":"011_ShellScripting.html#variables-de-entorno","text":"Cada terminal durante su ejecuci\u00f3n tiene acceso a dos \u00e1mbitos de memoria: Datos Locales Una variable declarada en un terminal solo ser\u00e1 accesible desde el terminal en el que declara. Datos Global Engloban a todos los terminales que se est\u00e9n ejecutando. Son las denominadas Variables de Entorno . Ejemplo de principales variables de entorno: Variable Funci\u00f3n $BASH Ruta del programa Bash $HOME Ruta completa del home del usuario $PATH Lista los directorios de donde busca los programas $RANDOM Devuelve un valor num\u00e9rico aleatorio","title":"Variables de entorno"},{"location":"011_ShellScripting.html#entrada-y-salida-del-shell-script","text":"Para poder interactuar con un programa de terminal es necesario disponer de un mecanismo de entrada de datos. Para dinamizar el resultado de los shell scripts y un dispositivo de salida que mantenga informado al usuario en todo momento de los que est\u00e1 ocurriendo. Para la entrada de datos se utiliza el comando read y para la salida el comando echo .","title":"Entrada y salida del Shell Script"},{"location":"011_ShellScripting.html#operadores-en-shell-script","text":"Todas las variables creadas en un terminal se tratan como cadenas de texto, incluso si su contenido es s\u00f3lo num\u00e9rico. Este es el motivo por el cual si lanzamos el siguiente c\u00f3digo, no se obtendr\u00e1 el resultado esperado: #!/bin/bash var1=15 var2=5 echo \u201c$var1+$var2\u201d Warning La salida de este programa no ser\u00e1 un n\u00famero 20 , sino la cadena de caracteres 15+5 . Esto es as\u00ed porque la suma de cadenas de texto, son esas cadenas de texto unidas de forma consecutiva. Existen tres tipos de operadores seg\u00fan el trabajo que realicen: aritm\u00e9ticos, relacionales y l\u00f3gicos","title":"Operadores en shell script"},{"location":"011_ShellScripting.html#redirecciones","text":"Una redirecci\u00f3n consiste en trasladar la informaci\u00f3n de un fichero de dispositivo a otro. Para ello se utilizan los siguientes s\u00edmbolos: S\u00edmbolo Acci\u00f3n < redirecciona la entrada desde el fichero stdin (entrada est\u00e1ndar) > env\u00eda la salida de stdout (salida est\u00e1ndar) a un fichero especificado >> a\u00f1ade la salida de stdout (salida est\u00e1ndar) a un fichero especificado 2> env\u00eda la salida de stderr (error est\u00e1ndar) a un fichero especificado * Ejemplo: sh script.sh 2>/dev/null Info El objetivo de la expresi\u00f3n anterior puede ser utilizada en la administraci\u00f3n de sistemas para descartar el error est\u00e1ndar de un proceso, de esta forma no aparecer\u00e1n los mensajes de error por el terminal; es muy utilizado .","title":"Redirecciones"},{"location":"011_ShellScripting.html#tuberias","text":"Forma pr\u00e1ctica de redireccionar la salida est\u00e1ndar de un programa hacia la entrada est\u00e1ndar de otro. Esto se logra usando el s\u00edmbolo | (pipeline). Ejemplo: $ cat archivo.txt | wc Info El comando anterior utiliza tuberias para redireccionar la salida est\u00e1ndar del comando cat y pasarla como entrada est\u00e1ndar del comando wc para contar las l\u00edneas y palabras de un archivo.","title":"Tuber\u00edas"},{"location":"011_ShellScripting.html#alias","text":"Alias es un comando que se ejecuta desde un terminal que permite configurar v\u00ednculos entre varios comandos. Cada usuario puede asignar una palabra f\u00e1cil de recordar a uno o m\u00e1s comandos que, por lo general, pueden ser m\u00e1s complicados de recordar. Ejemplo: alias listado=\u2019ls -lia>\u2019","title":"alias"},{"location":"011_ShellScripting.html#sistema-de-notacion","text":"Antes de lanzarse a escribir una sola l\u00ednea de c\u00f3digo es necesario pensar en la resoluci\u00f3n del problema tal y como se ha indicado. La creaci\u00f3n de una soluci\u00f3n a un problema siguiendo un conjunto de instrucciones se denomina algoritmo. Es necesario invertir el tiempo suficiente para construir ese algoritmo ya que esa ser\u00e1 la soluci\u00f3n que se debe implementar en c\u00f3digo. Existen varios sistemas de representaci\u00f3n para describir esos algoritmos; pseudoc\u00f3digo , la descripci\u00f3n narrada o diagramas Nassi-Shneiderman , pero en este manual se ha optado por los diagramas de flujo ya que resultan m\u00e1s intuitivos.","title":"Sistema de notaci\u00f3n"},{"location":"011_ShellScripting.html#diagramas-de-flujo","text":"Los diagramas de flujo o flujogramas son la representaci\u00f3n gr\u00e1fica de la soluci\u00f3n algor\u00edtmica de un problema. Para dise\u00f1arlos se emplean figuras normalizadas que representan una acci\u00f3n dentro del procedimiento. Cada una de estas figuras representa un paso a seguir dentro del algoritmo. Note Para su construcci\u00f3n se han de respetar las siguientes reglas: Tiene un elemento de inicio en la parte superior y uno final en la parte inferior. Se escribe de arriba hacia abajo y de izquierda a derecha. Siempre se usan flechas verticales u horizontales, jam\u00e1s curvas u oblicuas Se debe evitar cruce de flujos. En cada paso expresar una acci\u00f3n concreta. En lo sucesivo se ilustrar\u00e1n las diferentes estructuras de control a trav\u00e9s de esta t\u00e9cnica la cual facilita su comprensi\u00f3n. En la siguiente figura se puede observar simbolog\u00eda para dise\u00f1ar diagramas de flujo. Simbolog\u00eda diagramas.","title":"Diagramas de flujo"},{"location":"011_ShellScripting.html#control-de-flujo","text":"Controlar el flujo es determinar el orden en el que se ejecutar\u00e1n las instrucciones en un programa. Si no existiese las estructuras de control del flujo, todo el c\u00f3digo se ejecutar\u00edan de forma secuencial, es decir, empezar\u00edan por la primera instrucci\u00f3n y se ejecutar\u00edan una a una hasta llegar a la \u00faltima. Este modo de ejecuci\u00f3n esta realizado por estructuras secuenciales . Ejemplo: Estructura secuencial. Warning La estructura secuencial no es v\u00e1lida para solucionar la mayor\u00eda de los problemas que se plantean. Para ello es necesario la elecci\u00f3n de un c\u00f3digo u otro en funci\u00f3n de ciertas condiciones, formado otro tipo de estrcuturas que son conocidas como estructuras condicionales ; entre las cuales podemos destacar: Estructuras Alternativas , seg\u00fan si se cumple la condici\u00f3n o no, se realizar\u00e1 una tarea u otra. Ejemplo de utilizaci\u00f3n con la sentencia: if . Estructuras Iterativas , cuando necesario ejecutar algunas instrucciones repetidas veces. Ejemplo de utilizaci\u00f3n con la sentencia: for .","title":"Control de flujo"},{"location":"011_ShellScripting.html#estructuras-condicionales","text":"Las estructuras de selecci\u00f3n permiten ejecutar diferentes instrucciones dependiendo del valor de una variable o expresi\u00f3n. Tambi\u00e9n se les llama ramificaciones, estructuras de decisi\u00f3n o alternativas. Cuando se usan, no todas las instrucciones del programa se ejecutan, solo las especificadas para el valor de la variable durante esa ejecuci\u00f3n. Las estructuras de selecci\u00f3n m\u00e1s comunes son las que proporcionan ramificaciones dobles ( if ) y m\u00faltiples ( elif y case ).","title":"Estructuras condicionales"},{"location":"011_ShellScripting.html#estructuras-de-iteracion","text":"Son operaciones que se deben ejecutar un n\u00famero repetido de veces para resolver un problema. El conjunto de instrucciones que se ejecuta dentro de esta estructura, se denomina ciclo, bucle o lazo. Iteraci\u00f3n es cada una de las pasadas o ejecuciones de todas las instrucciones contenidas en el bucle. Estas repeticiones de c\u00f3digo van a depender de la evaluaci\u00f3n de una condici\u00f3n o del valor de una variable. Es posible repetir un c\u00f3digo hasta que se cumpla o deje de cumplir una condici\u00f3n pero tambi\u00e9n se posible la repetici\u00f3n tantas veces como indique una variable. Warning Hay que tener mucho cuidado a la hora de dise\u00f1ar estas estructuras y no caer en el error de construir bucles infinitos , es decir, estructuras que nunca dejar\u00e1n de ejecutarse ya que no tienen condici\u00f3n de salida o, si la tienen, \u00e9sta nunca se va a cumplir. Para utilizar esta estructura en algoritmos, se usan: Contador: es una variable cuyo valor se incrementa o decrementa en una cantidad constante cada vez que se produce un determinado suceso o acci\u00f3n. Los contadores se utilizan con la finalidad de contar sucesos o acciones internas de un bucle. Info La inicializaci\u00f3n consiste en asignarle al contador un valor. Se situar\u00e1 antes y fuera del bucle. Acumulador o Totalizador es una variable que suma sobre s\u00ed misma un conjunto de valores para de esta manera tener el total de todos ellos en una sola variable. Info La diferencia entre un contador y un acumulador es que mientras el primero va aumentando de uno en uno, el acumulador va aumentando en una cantidad variable. Banderas , conocidas tambi\u00e9n como interruptores, switch, flags o conmutadores. Son variables que pueden tomar solamente dos valores durante la ejecuci\u00f3n del programa, los cuales pueden ser cero o uno, o bien los valores booleanos verdadero o falso. Info Se les suele llamar interruptores porque cuando toman un valor est\u00e1n simulando un interruptor abierto/cerrado o encendido/apagado. Estructura Iterativa.","title":"Estructuras de iteraci\u00f3n"},{"location":"011_ShellScripting.html#vectores-en-shell-script","text":"Un vector es una estructura de datos que permite almacenar una colecci\u00f3n de elementos. Por el hecho de tratarse de una estructura de datos es posible realizar operaciones sobre \u00e9l como buscar, eliminar y agregar elementos a su estructura. Los elementos se encuentran ordenados en funci\u00f3n de como han sido introducidos en la estructura. Para acceder a cada elemento ser\u00e1 necesario especificar la posici\u00f3n que ocupan dentro de ella, teniendo presente que la numeraci\u00f3n de los vectores comienza desde cero, no desde uno. Info Un buen ejemplo de uso ser\u00eda, por ejemplo, para recoger el listado de archivos que hay en una carpeta. Esquema de un vector de doce elementos. Para definir un vector disponemos de dos formas: Impl\u00edcita: hace referencia a que el vector ha sido declarado y al mismo tiempo se han inicializado sus valores. Expl\u00edcitamente: cuando el vector no requiere que se inicialice mientras se declara, es decir, pueden ser inicializados con posterioridad. Para declarar un vector hay que utilizar la siguiente estructura: declare -a meses=(\"enero\" \"febrero\" \"marzo\") Tambi\u00e9n es posible utilizar alguna expresi\u00f3n para completar un vector, como con el operador rango ... declare -a letras=( {N..Z} {s..z} ) echo ${letras[*]} Info Esto crear\u00e1 un vector con el siguiente contenido y lo mostrar\u00e1 por pantalla as\u00ed: N O P Q R S T U V W X Y Z s t u v w x y z Para a\u00f1adir un elemento a la estructura se debe indicar el \u00edndice o posici\u00f3n que ocupar\u00e1 el nuevo dato. Si el \u00edndice es mayor que la \u00faltima posici\u00f3n de la estructura, se escribir\u00e1 al final de la misma. Si se usa un \u00edndice que ya contiene un dato, \u00e9ste ser\u00e1 sobrescrito. meses[3]=\"abril\" Para mostrar el contenido del vector: echo ${meses[*]} Info Mostrar\u00e1: enero febrero marzo abril Es buena idea conocer el n\u00famero de elementos que contiene un vector para poder introducir datos de forma correcta y no sobrescribir por accidente alg\u00fan valor ya almacenado. As\u00ed es posible utilizar: Comando Acci\u00f3n ${meses[*]} Muestra todos los valores del vector ${!meses[*]} Muestra todos los \u00edndices del vector ${#meses[*]} Devuelve el n\u00famero de valores del vector ${#meses[0]} Imprime la longitud del primer dato del vector Para recorrer los valores que contiene esta estructura se puede utilizar un bucle for for item in ${meses[*]} do echo $item done * Tambi\u00e9n se puede utilizar sus \u00edndices para mostrar los datos contenidos. for index in ${!meses[*]} do echo ${meses[$index]} done Es una estructura muy \u00fatil en la que se puede guardar cualquier tipo de informaci\u00f3n, como por ejemplo los ficheros que contiene una carpeta: i=0; for fichero in $(ls -a) do ficheros[$i]=$fichero; let i=i+1; done","title":"Vectores en shell script"},{"location":"011_ShellScripting.html#funciones-en-shell-script","text":"Una funci\u00f3n es un conjunto de l\u00edneas de c\u00f3digo que se identifican a trav\u00e9s de un identificador y que se ejecutan al invocar ese identificador. Se podr\u00eda definir como un shell script dentro de un shell script. Sirve para organizarlo en unidades l\u00f3gicas m\u00e1s peque\u00f1as de manera que sea m\u00e1s f\u00e1cil mantenerlo. Las funciones aceptan par\u00e1metros, de id\u00e9ntica manera que los shell script, por lo que su uso tambi\u00e9n es muy intuitivo. La estructura de una funci\u00f3n queda definida de la siguiente manera: function nombre_funci\u00f3n(){ c\u00f3digo que se ejecutar\u00e1 al llamar a la funci\u00f3n } Info source Para incluir el c\u00f3digo de un fichero en otro tan s\u00f3lo ser\u00e1 necesario utilizar la palabra source seguida de la ruta de ese fichero. * * Tambi\u00e9n es posible usar el punto para poder cargarlo: source funciones.sh o ./funciones.sh Las funciones suelen declararse al inicio del documento y luego utilizadas a lo largo del programa. Uno de los objetivos es optimizar el c\u00f3digo, mediante el \"aprovechamiento\" de c\u00f3digo. Cuando un conjunto de l\u00edneas de c\u00f3digo se repiten, es posible agruparlas bajo un nombre y utilizar ese nombre en lugar de repetir este c\u00f3digo. Ejemplo: #! /bin/bash function imprimir_tabla(){ echo \u201cTabla del n\u00famero $1\u201d for i in 1 2 3 4 5 6 7 8 9 10 do let res=$1*i echo \u201c$i x $1 = $res\u201d done } read -p \u201cEscribe un n\u00famero : \u201c num imprimir_tabla $num imprimir_tabla 5 } En este ejemplo se ha construido una funci\u00f3n para imprimir la tabla de multiplicar de un n\u00famero pasado como par\u00e1metro. En la siguiente l\u00ednea le pedimos al programa que imprima la tabla del n\u00famero cinco. No se ha necesitado escribir el c\u00f3digo que imprime la su tabla de multiplicar de nuevo, ya que con invocar el nombre de la funci\u00f3n el programa ya sabe que c\u00f3digo debe ejecutar. Warning N\u00f3tese que el valor de $1 no se pasa como par\u00e1metro del shell script, si no como par\u00e1metro a la funci\u00f3n imprimir_tabla tras haberlo preguntado al usuario. Hay que tener en cuenta que las variables que se declaran dentro de una funci\u00f3n existen \u00fanicamente dentro de ella. Si es preciso utilizar una variable fuera de una funci\u00f3n se puede usar return , que devuelve un valor fuera de ella, o usar la palabra reservada GLOBAL Es preferible utilizar el primer m\u00e9todo para que devuelva un valor que ser\u00e1 recogido en otra variable fuera de la funci\u00f3n que lo origin\u00f3.","title":"Funciones en shell script"},{"location":"011_ShellScripting.html#actividades","text":"Note Escribe el c\u00f3digo de los scripts en ShellScript que se detallan en cada ejercicio. Deber\u00e1s crear un fichero de texto para cada ejercicio con el siguiente nombre: ejXXX.sh, donde las X representan el n\u00famero de ejercicio. Una vez terminada la pr\u00e1ctica, comprime todos estos ficheros en uno y s\u00fabelos al Moodle.","title":"Actividades"},{"location":"011_ShellScripting.html#actividades-iniciales","text":"Crea un shell script que muestre por pantalla el mensaje \u201c \u00a1Hola Mundo! \u201d. Realiza un shell script que admita un \u00fanico par\u00e1metro correspondiente al nombre de un fichero de texto. Mostrar\u00e1 por pantalla el n\u00famero de l\u00edneas del mismo utilizando el comando wc . Crea un shell script que muestre por pantalla el resultado de de las siguientes operaciones. Debes tener en cuenta que a, b y c son variables enteras que son preguntadas al usuario al iniciar el script. a%b a/c 2 * b + 3 * (a-c) a * (b/c) (a*c)%b","title":"Actividades iniciales"},{"location":"011_ShellScripting.html#actividades-de-desarrollo-ud1_01","text":"Modifica el shell script realizado en el ejercicio 102 para comprobar si el fichero existe. En tal caso debe contar el n\u00famero de l\u00edneas del mismo a trav\u00e9s del comando wc y mostrar un mensaje indicando dicho n\u00famero. Si el fichero no existe, debe mostrar un mensaje de error y salir. Crea un shell script que al ejecutarlo muestre por pantalla uno de estos mensajes \u201cBuenos d\u00edas\u201d , \u201cBuenas tardes\u201d o \u201cBuenas noches\u201d , en funci\u00f3n de la hora que sea en el sistema (de 8:00 de la ma\u00f1ana a 15:00 ser\u00e1 ma\u00f1ana, de 15:00 a 20:00 ser\u00e1 tarde y el resto ser\u00e1 noche). Para obtener la hora del sistema utiliza el comando date. Construye un programa denominado AGENDA que permita mediante un men\u00fa, el mantenimiento de un peque\u00f1o archivo lista.txt con el nombre, direcci\u00f3n y tel\u00e9fono de varias personas. Debes incluir estas opciones al programa: A\u00f1adir (a\u00f1adir un registro) Buscar (buscar entradas por nombre, direcci\u00f3n o tel\u00e9fono) Listar (visualizar todo el archivo). Ordenar (ordenar los registros alfab\u00e9ticamente). Borrar (borrar el archivo). Crea un shell script que sume los n\u00fameros del 1 al 1000 mediante una estructura for , while y until .","title":"Actividades de desarrollo UD1_01"},{"location":"011_ShellScripting.html#actividades-de-desarrollo-ud1_02","text":"Construye los siguientes dos shell script utilizando estructuras iterativas: el primero ej108A.sh , que pida un n\u00famero e indique si se trata de un n\u00famero par y si es n\u00famero primo. el tercero ej108B.sh , que muestre las 10 primeras tablas de multiplicar por pantalla. Existir\u00e1 un tiempo de espera de dos segundos entre tabla (usa el comando sleep para ello). Crea un shell script para jugar a \u201cDoble o Nada\u201d. Consistir\u00e1 en adivinar un n\u00famero entre 1 y 10 (este n\u00famero ser\u00e1 generado al azar por el ordenador, para ello debes utilizar la funci\u00f3n $RANDOM de la siguiente manera numero=$RANDOM % 10 ). * A\u00f1ade al juego las siguientes caracter\u00edsticas: El jugador apuesta una cantidad de un valor inicial de 100 puntos. Si sale cara obtiene el doble de la cantidad apostada. Si sale cruz pierde todo lo apostado. El shell script debe llevar la cuenta de las tiradas y de la cantidad ganada. Al final de la partida mostrar\u00e1 un informe por pantalla a modo de resumen. Modificar el shell script anterior para que permita ir jugando hasta que el jugador decida abandonar el juego (para ello deber\u00e1 pulsar la tecla \u201cx\u201d del teclado), o no tenga m\u00e1s dinero que apostar. Tampoco podr\u00e1 apostar m\u00e1s dinero del que dispone en su \u201ccartera virtual\u201d.","title":"Actividades de desarrollo UD1_02"},{"location":"011_ShellScripting.html#actividades-de-desarrollo-ud1_03","text":"Realiza un script que permita crear un informe de las IP libres en la red en la que se encuentra el equipo. Debe contener las siguientes opciones: El informe contendr\u00e1 un listado de todas las IP de la red a la que pertenece el equipo indicando si est\u00e1 libe o no (usa el comando ping). En el informe debe aparecer el tipo de red (rango CIDR) en el que est\u00e1 inmerso el ordenador con el nombre de la red , su broadcast y su m\u00e1scara de subred . Esta informaci\u00f3n la pod\u00e9is obtener desde el comando ifconfig. Note Para facilitar los c\u00e1lculos asumimos que el equipo donde se ejecuta el script se encuentra en una \u00fanica red, es decir, solo posee una tarjeta de red. Crea un script que rellene un vector con cien valores aleatorios y muestre en pantalla en una sola l\u00ednea los valores generados.","title":"Actividades de desarrollo UD1_03"},{"location":"012_PowerShell.html","text":"Power Shell \u00b6 Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 3 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje y Criterios de evaluaci\u00f3n: Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Se han utilizado y combinado las estructuras del lenguaje para crear guiones. Se han utilizado herramientas para depurar errores sint\u00e1cticos y de ejecuci\u00f3n. Se han interpretado guiones de configuraci\u00f3n del sistema operativo. Se han realizado cambios y adaptaciones de guiones del sistema. Se han creado y probado guiones de administraci\u00f3n de servicios. Se han creado y probado guiones de automatizaci\u00f3n de tareas. Se han implantado guiones en sistemas propietarios . Se han consultado y utilizado librer\u00edas de funciones. Se han documentado los guiones creados. Introducci\u00f3n \u00b6 Los sistemas operativos basados en Microsoft Windows cuentan con la herramienta PowerShell , que surgi\u00f3 ante las carencias que presenta el viejo terminal basado en MS-DOS . PowerShell es una interfaz de consola (CLI) con posibilidad de escritura y uni\u00f3n de comandos por medio de instrucciones (scripts). Esta interfaz de consola est\u00e1 dise\u00f1ada para su uso por parte de administradores de sistemas , con el prop\u00f3sito de automatizar tareas o realizarlas de forma m\u00e1s controlada. En abril de 2006 Microsoft lanz\u00f3 una nueva interfaz CLI, con una sintaxis moderna que comparte similitudes con el lenguaje Perl. Perl es un lenguaje de programaci\u00f3n dise\u00f1ado por Larry Wall en 1987. Perl toma caracter\u00edsticas del lenguaje C, del lenguaje interpretado bourne shell, AWK, sed, Lisp y, en un grado inferior, de muchos otros lenguajes de programaci\u00f3n. Se trata de una interfaz gratuita, y que antes de Microsoft Windows 7 no se inclu\u00eda con el sistema operativo. En la actualidad, est\u00e1 incluida en todos los sistemas operativos de Microsoft, aunque requiere la presencia de .NET framework del que hereda sus caracter\u00edsticas orientadas a objetos. En agosto de 2016, Microsoft public\u00f3 su c\u00f3digo en GitHub para que pueda portarse a otros sistemas como GNU/Linux y MAC OSX. Los comandos incluidas en PowerShell reciben el nombre de cmdlets (command-let) y posee conjuntos espec\u00edficos para trabajar con Active Directory, Exchange , entre otros roles de servidor. Info cmdlets Existen cientos de cdmlet en la versi\u00f3n 5.1 de PowerShell. Es posible consultar la ayuda de cada uno de ellos en la p\u00e1gina oficial de Microsoft. Otra ventaja de PowerShell es que se dispone de la mayor\u00eda de comandos que del CLI tradicional de Microsoft. De ese modo, es posible ejecutar el comando dir en lugar del Get-ChildItem , cmdlet que realiza la misma tarea. En realidad lo que est\u00e1 usando es un alias del segundo para lanzar el primero. Dispone de autocompletado de comandos y par\u00e1metros que facilitar\u00e1 las tareas de creaci\u00f3n de scripts. Basta con comenzar a escribir un cmdlet y pulsarla tecla Tab. Si utilizamos PowerShell ISE al escribir aparecer\u00e1 una ventana con todos los cmdlets que coincidan con el texto escrito, incluso puede aparecer un recuadro con ayuda sobre su sintaxis. Para aceptar la sugerencia se pulsar la tecla Intro . Note Los nombres de todos los cmdlets est\u00e1n formados por un verbo, un gui\u00f3n y un nombre en singular. Habitualmente, se escribe con may\u00fasculas la primera letra de cada palabra, pero no se trata m\u00e1s que de una norma de estilo, porque PowerShell no distingue entre may\u00fasculas y min\u00fasculas. Primer Script \u00b6 Al igual que ocurre en GNU/Linux un script de PowerShell no es m\u00e1s que un archivo de texto plano que contiene una secuencia de comando y de cmdlets para realizar una tarea. La diferencia con ellos es que aqu\u00ed ser\u00e1 necesario dotarlos de una extensi\u00f3n; ps1 . Example Write-Host \"Hola!. Esto es mi primer script en PowerShell\" Write-Host \"Y esto es una segunda l\u00ednea\" A continuaci\u00f3n, se guarda el script desde el men\u00fa Acci\u00f3n \u2192 Guardar Como\u2026 asign\u00e1ndole un nombre. Para ejecutarlo tan s\u00f3lo es necesario escribir su nombre en el terminal de PowerShell anteponiendo un punto y una barra. Example ./Script.ps1 Aunque tambi\u00e9n es posible ejecutar el script desde la herramienta gr\u00e1fica pulsando la tecla F5 , ejecutar una parte de \u00e9l con F8 o detener la ejecuci\u00f3n con Ctrl+Intro . PowerShell ISE \u00b6 PowerShell viene acompa\u00f1ado de una herramienta gr\u00e1fica que facilita la administraci\u00f3n de todos los scripts. Se denomina Microsoft PowerShell ISE (Integrated Scripting Environment) , y se accede a trav\u00e9s de: Administrador del servidor \u2192 Herramientas \u2192 Windows PowerShell ISE . El uso de esta herramienta gr\u00e1fica va a facilitar la creaci\u00f3n de los scripts de forma significativa. Es pr\u00e1ctico comenzar con esta ayuda ya que la sintaxis de los cmdlets, aunque sea l\u00f3gica y sencilla, tambi\u00e9n lo es amplia y desconocida. Interfaz de la herramienta Windows PowerShell ISE Info Uno de los aspectos m\u00e1s interesantes que posee esta aplicaci\u00f3n es la barra de informaci\u00f3n que muestra un listado de todos los cmdlets de esta herramienta. Permite filtrarlos por funci\u00f3n y consultar la ayuda de cada uno de ellos. Tambi\u00e9n posee un formulario destinado a generar el c\u00f3digo de un cmdlet de forma autom\u00e1tica. Example Creaci\u00f3n de un comando que realice una copia de seguridad de los scripts de trabajo en una memoria externa. Es necesario el uso de Copy-Item para ello, pero no se conoce su sintaxis. Si escribimos este cmdlet en el recuadro Nombre y se pulsa sobre Mostrar Ayuda , aparecer\u00e1 un formulario con sus opciones. Tras completar las necesarias y pulsando el bot\u00f3n Insertar situado en la parte inferior, el c\u00f3digo completo ser\u00e1 escrito la parte destinada al terminal. Creaci\u00f3n autom\u00e1tica de scripts en Windows PowerShell ISE. Comentarios \u00b6 Note Los comentarios en PowerShell se realizan precediendo a la l\u00ednea con el car\u00e1cter # si se trata de una sola l\u00ednea y <# y #> si es multil\u00ednea. Par\u00e1metros en PowerShell \u00b6 Como ocurr\u00eda en GNU/Linux, los par\u00e1metros que reciba el script se deben recoger de forma interna en una variable para poder operar con ellos. Example param ([string]$nombre) Write-Host \"Hola!. Esto es mi primer script en PowerShell\" Write-Host \"Y esto es una segunda l\u00ednea\" Write-Host \"Hola de nuevo, tu nombre es $nombre\" Note El script anterior esperar\u00e1 un par\u00e1metro de tipo string que ser\u00e1 contenido en la variable nombre. En la cuarta l\u00ednea mostrar\u00e1 el contenido de la variable por pantalla. Para poder ejecutar este script, ser\u00e1 necesario acompa\u00f1arlo de un par\u00e1metro del siguiente modo. ./Script.ps1 \u201cF\u00ba Javier Hern\u00e1ndez Ill\u00e1n\u201d Para entender por completo el ejemplo anterior, ser\u00e1 necesario ver como PowerShell maneja las variables . Variables \u00b6 Para definir una variable en PowerShell s\u00f3lo tenemos que nombrarla utilizando para ello cualquier combinaci\u00f3n de caracteres, ya sean n\u00fameros, letras o s\u00edmbolos. Es posible utilizar espacios en el nombre, aunque en este caso el nombre debe ir rodeado por s\u00edmbolos de llaves {} . Al contrario que ocurre en shellscript, PowerShell es fuertemente tipado , lo que significa que las variables no son tratadas como cadenas de texto, sino que hay que especificar el tipo de dato que se guardar\u00e1 en ella. Para definir variables es posible utilizar el m\u00e9todo expl\u00edcito (adem\u00e1s con New-Variable y sus opciones), pero tambi\u00e9n se puede utilizar el m\u00e9todo impl\u00edcito anteponiendo el s\u00edmbolo $ delante del nombre. Info Get-Variable En cualquier momento puedes obtener una lista completa de las variables que se hayan definido hasta ese momento. Para lograrlo, basta con utilizar Get- Variable. Implicita \u00b6 Tipo Descripci\u00f3n [string] Cadena de caracteres Unicode [char] Un s\u00f3lo car\u00e1cter Unicode de 16 bits [byte] Un s\u00f3lo car\u00e1cter Unicode de 8 bits [int] Entero con signo de 32 bits [float] N\u00famero con coma flotante de 32 bits [double] N\u00famero con coma flotante de 64 bits [datetime] Fecha y Hora [bool] Valor l\u00f3gico booleano Example $numero = 9.99 $Final_2021 = 30 ${Mi variable} = \u201cContiene espacios en el nombre\u201d En la forma implicita el shell establece el tipo de dato de la variable en funci\u00f3n del dato que se le asigne en su creaci\u00f3n. En el ejemplo anterior $numero es de forma autom\u00e1tica de tipo [double] , ya que al crearla se ha inicializado con un n\u00famero con decimales. Por contra la variable $Final_2021 es de tipo [int] ya que se ha guardado un n\u00famero entero en ella. Info GetType Para poder obtener el tipo de dato de una variable hay que usar el m\u00e9todo GetType().Name sobre cualquier variable: Write-Host $feo.GetType().Name. Tip Una variable cuya definici\u00f3n de tipo se ha realizado de forma impl\u00edcita, podr\u00e1 cambiar el tipo de dato almacenado durante la ejecuci\u00f3n del programa sin experimentar ning\u00fan tipo de error. Esta pr\u00e1ctica aunque c\u00f3moda no es muy recomendable . Explicita \u00b6 Es buena idea tomar el control del tipado de las variables y asignarlo en funci\u00f3n de las necesidades del programa. De esta forma se ahorrar\u00e1n futuras conversiones de datos y posibles p\u00e9rdidas de informaci\u00f3n. Para ello se usa la forma expl\u00edcita de crear variables y junto con su creaci\u00f3n se define el tipo de dato que va a contener. Example [ float ] $numero = 9.99 [int] $Final_2021 = 30 [string] ${Mi variable} = \u201cContiene espacios en el nombre\u201d Al contrario que en el caso anterior, cuando el dato asignado no coincida con el tipo esperado, pueden ocurrir dos cosas: que las caracter\u00edsticas del dato se modifiquen para amoldarse al tipo de variable, lo que puede traducirse en la p\u00e9rdida de datos y un mal funcionamiento del script, o que se producir\u00e1 un error si esa conversi\u00f3n no es posible y se detenga el script. Interacci\u00f3n con el usuario \u00b6 PowerShell posee dos cmdlets para realizar estas tareas. El primero de ellos es Write-Host y tiene un comportamiento similar al echo en GNU/Linux. El segundo comando para interactuar con el usuario es Read-Host el cual permite imprimir un mensaje por el terminal y recoger aquello que el usuario ha escrito. Funciona de forma muy parecida al comando read en el terminal de GNU/Linux. [ string ] $feo = Read-Host \u201c\u00bfCu\u00e1l es el nombre del marine de Doom?\u201d Write-Host \u201cNo se sabe, pero lo has intentado con $feo\u201d Note Este script detendr\u00e1 su ejecuci\u00f3n en la l\u00ednea donde aparece Read-Host , esperar\u00e1 a que el usuario conteste a la pregunta y seguir\u00e1 con la ejecuci\u00f3n, del mismo modo que ocurre con shellscript. Operadores \u00b6 Aritm\u00e9ticos \u00b6 Las operaciones aritm\u00e9ticas en PowerShell son m\u00e1s intuitivas que en shellscript. Son las mismas que en el caso anterior: + , - , * , / y % . Su uso es m\u00e1s sencillo puesto que es el propio terminal en que realiza los c\u00e1lculos aritm\u00e9ticos y no a trav\u00e9s de un comando. [ int ] $a=10 [float] $b=20 [int] $res=$a+$b Write-Host $res Write-Host $a+$b Write-Host \"$a x $b = \" ($a*$b) Tambi\u00e9n se dispone de expansores de terminal como en GNU/Linux. Note N\u00f3tese que en la \u00faltima l\u00ednea aparece directamente el producto $a*$b ya que al rodear la operaci\u00f3n con par\u00e9ntesis, se convierte en un expansor, realiza la operaci\u00f3n en su interior y env\u00eda el resultado fuera. Existen variantes que simplifican el uso de algunos operadores. Operador Uso Equivalencia += $contador += 5 $contador = $contador+5 -= $contador -= 5 $contador = $contador-5 *= $contador *= 5 $contador = $contador*5 /= $contador /= 5 $contador = $contador/5 Adem\u00e1s de estos operadores existen dos espec\u00edficos para el incremento ( ++ ) y decremento ( -- ) de una unidad, ideal para el uso de variables como contadores. L\u00f3gicos \u00b6 Operador Descripci\u00f3n -and Devuelve verdadero si las dos expresiones son verdaderas. -or Devuelve verdadero si una de las dos expresiones o las dos son verdaderas. -xor Devuelve verdadero si tan s\u00f3lo una de las expresiones es verdadera. -not o ! Devuelve verdadero cuando la expresi\u00f3n da el valor falso. Example Write-Host ((6 -ge 4) -and (7 -le 7)) Write-Host ((10 -gt 1) -or (2 -lt 2)) Write-Host ((1 -gt 0) -xor (4 -le 1)) Write-Host ( -not (12 -lt 10)) Write-Host (!(12 -lt 10)) Note En el ejemplo anterior si se ejecuta el script en un terminal PowerShell, todos los resultados ser\u00e1n verdaderos. Como en todos los lenguajes de programaci\u00f3n fuertemente tipados, existen operadores l\u00f3gicos para comprobar el tipo de dato de una variable, que resultan muy \u00fatiles para la interacci\u00f3n con los usuarios. Operador Acci\u00f3n Ejemplo -is Devuelve verdadero si es del tipo indicado. \u201cJavi\u201d -is [string] es verdadero -isnot Devuelve falso si es del tipo indicado. \u201cJavi\u201d -isnot [string] es falso -as Convierte tipos de datos compatibles. $valor = 19.90 ; Write-Host ($valor -as [int]) Comparaci\u00f3n \u00b6 los operadores tipo l\u00f3gicos devuelven tan s\u00f3lo un valor booleano que puede tener dos valores; verdadero o falso . Operador Acci\u00f3n Ejemplo -eq Comprueba si son iguales. 5 -eq 3 es falso -ieq Iguales. En cadenas no es casesensitive. \u201cJavi\u201d -ieq \u201cjavi\u201d es verdadero -ceq Iguales. En cadenas es casesensitive. \u201cJavi\u201d -ceq \u201cjavi\u201d es falso -ne Verifica si son diferentes. 5 -ne 3 es verdadero -lt Coteja si la izquierda es menor que derecha. 5 -lt 3 es falso -le Constata si la izquierda es menor o igual que derecha. 5 -le 3 es falso -gt Examina si la izquierda en mayor que la derecha. 5 -gt 3 es verdadero -ge Revisa si la izquierda en mayor o igual que la derecha. 5 -ge 3 es verdadero PowerShell a\u00f1ade operadores de comparaci\u00f3n que aportan un nivel de complejidad mayor. Operador Acci\u00f3n Ejemplo -like Eval\u00faa un patr\u00f3n \u201ces como\u201d. \u201cPerro\u201d -like \u201cPe*\u201d es verdadero -notlike Eval\u00faa un patr\u00f3n \u201cno es como\u201d. \u201cPerro\u201d -notlike \u201cPe*\u201d es falso -contains Contiene un valor. 1,2,3 -contains 2 es verdadero -notcontains No contiene un valor. 1,2,3 -notcontains 2 es falso Control del flujo en PowerShell \u00b6 En esta parte se indicar\u00e1 tan s\u00f3lo la sintaxis de las estructuras alternativas e iterativas, ya que los conceptos te\u00f3ricos ya se han abordado en el apartado de Shellscript. Alternativa Simple \u00b6 if ( condici\u00f3n ){ ejecutar este c\u00f3digo si la condici\u00f3n es verdadera } Alternativa doble \u00b6 if ( condici\u00f3n ) { ejecutar este c\u00f3digo si la condici\u00f3n es verdadera } else { ejecutar este c\u00f3digo si la condici\u00f3n es falsa } Alternativa m\u00faltiple \u00b6 if ( condici\u00f3n1 ) { ejecutar este c\u00f3digo si la condici\u00f3n1 es verdadera } elseif ( condici\u00f3n2 ) { ejecutar este c\u00f3digo si la condici\u00f3n2 es verdadera } else { ejecutar este c\u00f3digo si todas las condiciones son falsas } El equivalente a case en GNU/Linux \u00b6 switch ($valor){ opci\u00f3n1 { c\u00f3digo a ejecutar si opci\u00f3n1 coincide con $valor } opci\u00f3n2 { c\u00f3digo a ejecutar si opci\u00f3n2 coincide con $valor } opci\u00f3nN { c\u00f3digo a ejecutar si opci\u00f3nN coincide con $valor } default { c\u00f3digo a ejecutar si ninguna de las opciones coincide } } Example $saludo = Read-Host \"Escribe un saludo\" switch ($saludo){ \"Buenos d\u00edas\" { Write-Host \"Saludaste en Castellano\" } \"Bon dia\" { Write-Host \"Saludaste en Catal\u00e1n\" } \"Bo dias\" { Write-Host \"Saludaste en Gallego\" } \"Egun on\" { Write-Host \"Saludaste en Euskera\" } \"Good morning\" { Write-Host \"Saludaste en Ingl\u00e9s\" } \"Bonjour\" { Write-Host \"Saludaste en Franc\u00e9s\" } \"Buon Giorno\" { Write-Host \"Saludaste en Italiano\" } \"Bom d\u00eda\" { Write-Host \"Saludaste en Portugu\u00e9s\" } \"Guten Tag\" { Write-Host \"Saludaste en Alem\u00e1n\" } {$_ -is [string]} { Write Host \"La variable que has pasado es una cadena\" } default { \"Eso no parece un saludo\" } } Note Existe la posibilidad de colocar operadores l\u00f3gicos como opciones de un switch , si estos operadores l\u00f3gicos devuelven un valor verdadero, se ejecutar\u00e1 esa parte del c\u00f3digo, si se eval\u00faa a falso, no realizar\u00e1 esa parte del c\u00f3digo. El car\u00e1cter $_ hace referencia a la variable $saludo, de ese modo es posible realizar operaciones l\u00f3gicas con el valor pasado. Adem\u00e1s de todo esto, switch posee una serie de opciones que no est\u00e1n presentes en GNU/Linux, aunque es posible realizarlas de otra manera. Operador Descripci\u00f3n -wildcard S\u00f3lo aplicable a [string] . Indica si cumple un patr\u00f3n determinado. -exact S\u00f3lo aplicable a [string] . Debe coincidir exactamente con alguno de los patrones. -casesensitive S\u00f3lo aplicable a [string] . Debe coincidir en may\u00fasculas y min\u00fasculas. -file La entrada es un archivo. Se evaluar\u00e1 cada l\u00ednea del archivo. -regex S\u00f3lo aplicable a [string] . Permite usar expresiones regulares en la comparaci\u00f3n. Example -regex $target = 'https://bing.com' switch -Regex ($target){ '^ftp\\://.*$' { \"$_ is an ftp address\"; Break } '^\\w+@\\w+\\.com|edu|org$' { \"$_ is an email address\"; Break } '^(http[s]?)\\://.*$' { \"$_ is a web address that uses $($matches[1])\"; Break } } Example -wildcard switch -wildcard ( Read-Host \"Escribe u n\u00famero de tel\u00e9fono\" ){ \"8*\" { Write-Host \"Es un tel\u00e9fono fijo : $_\"; break } \"9*\" { Write-Host \"Es un tel\u00e9fono fijo : $_\"; break } \"6*\" { Write-Host \"Es un tel\u00e9fono m\u00f3vil : $_\"; break } default { \"$_ no parece un tel\u00e9fono\" } } El comando break que aparece al final de cada opci\u00f3n indica que si encuentra una coincidencia no siga buscando m\u00e1s y rompa el switch, ahorr\u00e1ndose as\u00ed el resto de comprobaciones. Estructuras iterativas \u00b6 while \u00b6 A diferencia de lo que ocurr\u00eda en GNU/Linux, en PowerShell existen diferencias entre las estructuras while, do while y do until . En este caso, la \u00fanica de las tres que evaluar\u00e1 la condici\u00f3n al inicio del bloque de c\u00f3digo ser\u00e1 la primera. El resto comprueba la condici\u00f3n al final del bloque ejecutando como m\u00ednimo una vez el c\u00f3digo que contiene. while ( condici\u00f3n ){ bloque de c\u00f3digo a ejecutar mientras condici\u00f3n sea verdadera } do { bloque de c\u00f3digo a ejecutar mientras condici\u00f3n sea verdadera } while ( condici\u00f3n ) Existe una variante de esta estructura que se crea sustituyendo el while por un until . Esto cambia el sentido de la condici\u00f3n y es este caso el bloque se repite hasta que la condici\u00f3n se cumpla. Esta estructura no es muy utilizada, pero siempre es bueno contar con herramientas extra. for \u00b6 Tambi\u00e9n la estructura for es sensiblemente diferente que en shellscript. Esta estructura en PowerShell tiene m\u00e1s que ver con los lenguajes de programaci\u00f3n y se utiliza cuando el programador sabe el n\u00famero de iteraciones que hay que realizar para solucionar un problema. for ( inicializaci\u00f3n; condici\u00f3n; incremento ){ bloque de c\u00f3digo a ejecutar mientras condici\u00f3n sea verdadera } Por ejemplo, la creaci\u00f3n de la tabla de multiplicar de un n\u00famero especificado por el usuario. Para resolver este problema s\u00ed se conoce el n\u00famero de iteraciones necesarias, concretamente diez. Example $numero = Read-Host \"Dame un n\u00famero\" Write-Host \"Esta es la tabla del $num\" for ( $i=0; $i -lt 11; $i++){ Write-Host \" $i x $numero = \"($i*$numero) } foreach \u00b6 La estructura foreach en PowerShell es el equivalente a for en shellscript. Est\u00e1 pensada para recorrer un conjunto de valores y ejecutar el bloque de c\u00f3digo una vez por cada elemento del conjunto. foreach ( elemento in conjunto ){ bloque de c\u00f3digo a ejecutar por cada elemento del conjunto } Al igual que ocurre en GNU/Linux, el conjunto puede serlo de cualquier tipo de objetos, incluso los ficheros de una carpeta. En el siguiente ejemplo se buscan los ficheros que en su nombre contengan la cadena de texto que el usuario ha especificado: Example $ruta = \"C:\\Users\\Administrador\\Desktop\" $busca = Read-Host \"Escribe el texto a buscar\" foreach ($archivo in Get-ChildItem $ruta){ if ($archivo.Name.IndexOf($busca) -ge 0){ Write-Host $archivo.Name } } Note Las opciones que ofrece PowerShell en cuanto a estructuras de control parece una oferta m\u00e1s completa que la de shellscript, aunque para las tareas que se van a realizar en este m\u00f3dulo, ambos sistemas poseen herramientas suficientes. Vectores \u00b6 PowerShell considera como un vector a toda colecci\u00f3n de objetos, sea cual sea su tipo. Los elementos que lo conforman pueden estar separados por comas, estar expresados por el operador de rango .. o ser el resultado de alguna expresi\u00f3n que devuelva una colecci\u00f3n, como as\u00ed lo hacen muchos cmdlets. Example $Vacia = @{} $Enteros = 1,2,3,4,5 $Texto = \u201cLunes\u201d,\u201cMartes\u201d,\u201dMi\u00e9rcoles\u201d, \u201cJueves\u201d,\u201dViernes\u201d $EnterosRango = 1..10 De esta forma se han definido cuatro vectores; el segundo contendr\u00e1 enteros y el tercero cadenas de caracteres. La \u00faltima l\u00ednea asigna los valores desde el 1 al 10 utilizando el operador rango .. . Note El operador de rango representa una secuencia de enteros, con los l\u00edmites superior e inferior separados por dos puntos decimales. Permite expresar el rango en orden ascendente o descendente, as\u00ed como tambi\u00e9n que los l\u00edmites inferior o superior sean establecidos por medio de variables que contengan enteros. Un vector tambi\u00e9n puede definirse como el resultado de una expresi\u00f3n. Example $EnterosFor = @(For($i;$i < 5;$i++){$i}) $Comando = Get-Process | Sort-Object ProcessName En la primera l\u00ednea $enteros ser\u00e1 completado a trav\u00e9s del resultado de una estructura iterativa, mientras que la segunda contendr\u00e1 el resultado del cmdlet indicado. Adem\u00e1s de todas estas formas de declaraci\u00f3n, tambi\u00e9n se puede realizar a trav\u00e9s del cmdlet New-Variable Example New-Variable -Name Enteros -Value 1,2,3,4,5 -Force New-Variable -Name Texto -Value \"Lunes\",\"Martes\",\"Mi\u00e9rcoles\",\"Jueves\",\"Viernes\" \u2013Force New-Variable -Name EnterosRango -Value (1..5) -Force New-Variable -Name EnterosFor -value (. {For($i=1;$i -lt 5;$i++){$i}}) -Force Note El atributo -Force sobrescribe la variable si esta ya existe, de ese modo no saltar\u00e1 ning\u00fan error a la hora de definir estas variables. Para obtener el n\u00famero de elementos de un vector se utiliza el m\u00e9todo Length, si se aplica a un elemento del vector, devolver\u00e1 el tama\u00f1o de este elemento, no del vector completo. Example $Texto.Length # mostrar\u00e1 5 por pantalla $Texto[2].Length # mostrar\u00e1 9, las letras de \u201cMi\u00e9rcoles\u201d Para a\u00f1adir elementos al final de un vector se utiliza el operador += . Example $Enteros += 6 $Texto += \u201cS\u00e1bado\u201d, \u201cDomingo\u201d Note La primera l\u00ednea a\u00f1ade el entero 6 al vector $Enteros , mientras que en la segunda se a\u00f1aden los elementos \u201cS\u00e1bado\u201d y \u201cDomingo\u201d al vector $Texto . Para eliminar un elemento de un vector PowerShell no ofrece un sistema parecido al de a\u00f1adir valores, sino que tendr\u00e1 que reescribirse el vector de nuevo sin los valores no deseados. Funciones \u00b6 Tambi\u00e9n en PowerShell es posible utilizar funciones a trav\u00e9s de la siguiente estructura: Function <NOMBRE> { Param (<Parametro>,<Parametro>,...) Comandos PowerShell } Warning El paso de par\u00e1metros a una funci\u00f3n se realiza de id\u00e9ntica forma que en shell script. La principal diferencia entre las funciones usadas en shell script es que ahora es preferible declarar y tipar antes de iniciar con el c\u00f3digo de la funci\u00f3n. Example Function Get-Sumar { param ([integer] $a, [integer] $b) $sumar = $a + $b Write-Host \u201cLa suma es $sumar\u201d } Note Si se ejecuta la siguiente instrucci\u00f3n: Get-Sumar 2 8 La salida del terminal ser\u00e1 La suma es 10 . Si se necesita que las funciones est\u00e9n disponibles durante la sesi\u00f3n del usuario o si es necesario enlazarlas desde otro script, se deber\u00e1 utilizar la notaci\u00f3n de punto, del mismo modo que ocurr\u00eda en shell script. Actividades PowerShell \u00b6 Note Escribe el c\u00f3digo de los scripts en PowerShell que se detallan en cada ejercicio. Deber\u00e1s crear un fichero de texto para cada ejercicio con el siguiente nombre: ejXXX.sh, donde las X representan el n\u00famero de ejercicio. Una vez terminada la pr\u00e1ctica, comprime todos estos ficheros en uno y s\u00fabelos al Moodle. Actividades Iniciales PowerShell \u00b6 Genera un Script que muestre los procesos del sistema ordenados por el id . Muestra los servicios cuyo nombre empiece por la letra n , utilizando la creaci\u00f3n de un script. Crea un script que si no se le pasa ning\u00fan argumento nos lo diga. Actividades de desarrollo UD1_04 \u00b6 Dise\u00f1a un script PowerShell que pida al usuario dos n\u00famero (comprobando que sean n\u00fameros) y muestre por pantalla el mayor de ellos o si son iguales. Crea un script PowerShell que al ejecutarlo muestre por pantalla uno de estos mensajes \u201cBuenos d\u00edas\u201d , \u201cBuenas tardes\u201d o \u201cBuenas noches\u201d , en funci\u00f3n de la hora que sea en el sistema (de 8:00 de la ma\u00f1ana a 15:00 ser\u00e1 ma\u00f1ana, de 15:00 a 20:00 ser\u00e1 tarde y el resto ser\u00e1 noche). Usa el cmdlet Get-Date . Construye tres script PowerShell utilizando estructuras iterativas: el primero ej118A.ps1 , que imprima la tabla de multiplicar de un n\u00famero preguntado al usuario. Este n\u00famero debe ser entero positivo. el segundo ej118B.ps1 , que pida un n\u00famero e indique si se trata de un n\u00famero par y si es n\u00famero primo. el tercero ej118C.ps1 , que muestre las diez primeras tablas de multiplicar por pantalla. Hay un tiempo de espera de un segundo entre ellas. Utiliza las estructuras while, do while, for y foreach y el cmdlet Start-Sleep. Dise\u00f1a un script PowerShell que lea un vector con 365 temperaturas y calcule la media y cuantos d\u00edas han estado por encima y cuantos por debajo de ella. Rellena el vector con valores aleatorios entre -5 y 35, para ello usa Get-Random. Actividades de desarrollo UD1_05 \u00b6 Crea un script PowerShell que rellene un vector con diez n\u00fameros de forma aleatoria y que los muestre por pantalla de la siguiente forma: en orden inverso a como han sido introducidos los valores. los valores ordenados de menor a mayor en una sola l\u00ednea. los valores ordenados de mayor a menor en una sola l\u00ednea la suma total de sus valores. cantidad de valores pares que contiene el vector. la suma total de n\u00fameros impares. la media aritm\u00e9tica de los valores que contiene el vector. Crea un script PowerShell para que haga una copias de seguridad de todos los archivos del directorio de trabajo del usuario actual. Deber\u00e1 realizar las siguientes acciones: comprobar\u00e1 si el archivo ya existe en la copia de seguridad, si es as\u00ed comprobar\u00e1 cual de los dos es m\u00e1s reciente y que tama\u00f1o tienen. Si es m\u00e1s reciente o posee un tama\u00f1o mayor, lo copiar\u00e1. En cualquier otro caso, no lo copia. llevar\u00e1 un registro de todos los archivos copiados cada vez que se ejecute mediante un archivo de bit\u00e1cora. Guarda este fichero el directorio que contiene el script. Crea una funci\u00f3n para cada tarea realizada en este script. Dise\u00f1a un script PowerShell que muestre un men\u00fa al usuario con cuatro operaciones disponibles: Crear directorio, Eliminar directorio, Mostrar directorio, Informe de directorio, Copia de directorio y Salir . Una vez elegida una opci\u00f3n correcta, el programa debe solicitar un nombre de directorio y hacer la operaci\u00f3n seleccionada. Tras esto debe mostrar un mensaje con el resultado de la operaci\u00f3n. Crea una funci\u00f3n para cada una de estas opciones. Si se elige la opci\u00f3n Informe de directorio , mostrar\u00e1 por pantalla el n\u00famero de ficheros que contiene, cuantos son carpetas, cuantos directorios y el tama\u00f1o total de ellos. Si la carpeta no existe, mostrar\u00e1 un error. Si elige la opci\u00f3n Copia de directorio , preguntar\u00e1 la carpeta de destino y mostrar\u00e1 fichero a fichero la copia. Realiza un script PowerShell que permita crear un informe de las IP libres en la red en la que se encuentra el equipo. Debe contener las siguientes opciones: el informe contendr\u00e1 un listado de todas las IP de la red a la que pertenece el equipo indicando si est\u00e1 libre o no (usa el comando ping). en el informe debe aparecer el tipo de red (A, B o C) en el que est\u00e1 inmerso el ordenador con el nombre de la red, su broadcast y su m\u00e1scara de subred.","title":"1.2- PowerShell"},{"location":"012_PowerShell.html#power-shell","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 3 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje y Criterios de evaluaci\u00f3n: Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Se han utilizado y combinado las estructuras del lenguaje para crear guiones. Se han utilizado herramientas para depurar errores sint\u00e1cticos y de ejecuci\u00f3n. Se han interpretado guiones de configuraci\u00f3n del sistema operativo. Se han realizado cambios y adaptaciones de guiones del sistema. Se han creado y probado guiones de administraci\u00f3n de servicios. Se han creado y probado guiones de automatizaci\u00f3n de tareas. Se han implantado guiones en sistemas propietarios . Se han consultado y utilizado librer\u00edas de funciones. Se han documentado los guiones creados.","title":"Power Shell"},{"location":"012_PowerShell.html#introduccion","text":"Los sistemas operativos basados en Microsoft Windows cuentan con la herramienta PowerShell , que surgi\u00f3 ante las carencias que presenta el viejo terminal basado en MS-DOS . PowerShell es una interfaz de consola (CLI) con posibilidad de escritura y uni\u00f3n de comandos por medio de instrucciones (scripts). Esta interfaz de consola est\u00e1 dise\u00f1ada para su uso por parte de administradores de sistemas , con el prop\u00f3sito de automatizar tareas o realizarlas de forma m\u00e1s controlada. En abril de 2006 Microsoft lanz\u00f3 una nueva interfaz CLI, con una sintaxis moderna que comparte similitudes con el lenguaje Perl. Perl es un lenguaje de programaci\u00f3n dise\u00f1ado por Larry Wall en 1987. Perl toma caracter\u00edsticas del lenguaje C, del lenguaje interpretado bourne shell, AWK, sed, Lisp y, en un grado inferior, de muchos otros lenguajes de programaci\u00f3n. Se trata de una interfaz gratuita, y que antes de Microsoft Windows 7 no se inclu\u00eda con el sistema operativo. En la actualidad, est\u00e1 incluida en todos los sistemas operativos de Microsoft, aunque requiere la presencia de .NET framework del que hereda sus caracter\u00edsticas orientadas a objetos. En agosto de 2016, Microsoft public\u00f3 su c\u00f3digo en GitHub para que pueda portarse a otros sistemas como GNU/Linux y MAC OSX. Los comandos incluidas en PowerShell reciben el nombre de cmdlets (command-let) y posee conjuntos espec\u00edficos para trabajar con Active Directory, Exchange , entre otros roles de servidor. Info cmdlets Existen cientos de cdmlet en la versi\u00f3n 5.1 de PowerShell. Es posible consultar la ayuda de cada uno de ellos en la p\u00e1gina oficial de Microsoft. Otra ventaja de PowerShell es que se dispone de la mayor\u00eda de comandos que del CLI tradicional de Microsoft. De ese modo, es posible ejecutar el comando dir en lugar del Get-ChildItem , cmdlet que realiza la misma tarea. En realidad lo que est\u00e1 usando es un alias del segundo para lanzar el primero. Dispone de autocompletado de comandos y par\u00e1metros que facilitar\u00e1 las tareas de creaci\u00f3n de scripts. Basta con comenzar a escribir un cmdlet y pulsarla tecla Tab. Si utilizamos PowerShell ISE al escribir aparecer\u00e1 una ventana con todos los cmdlets que coincidan con el texto escrito, incluso puede aparecer un recuadro con ayuda sobre su sintaxis. Para aceptar la sugerencia se pulsar la tecla Intro . Note Los nombres de todos los cmdlets est\u00e1n formados por un verbo, un gui\u00f3n y un nombre en singular. Habitualmente, se escribe con may\u00fasculas la primera letra de cada palabra, pero no se trata m\u00e1s que de una norma de estilo, porque PowerShell no distingue entre may\u00fasculas y min\u00fasculas.","title":"Introducci\u00f3n"},{"location":"012_PowerShell.html#primer-script","text":"Al igual que ocurre en GNU/Linux un script de PowerShell no es m\u00e1s que un archivo de texto plano que contiene una secuencia de comando y de cmdlets para realizar una tarea. La diferencia con ellos es que aqu\u00ed ser\u00e1 necesario dotarlos de una extensi\u00f3n; ps1 . Example Write-Host \"Hola!. Esto es mi primer script en PowerShell\" Write-Host \"Y esto es una segunda l\u00ednea\" A continuaci\u00f3n, se guarda el script desde el men\u00fa Acci\u00f3n \u2192 Guardar Como\u2026 asign\u00e1ndole un nombre. Para ejecutarlo tan s\u00f3lo es necesario escribir su nombre en el terminal de PowerShell anteponiendo un punto y una barra. Example ./Script.ps1 Aunque tambi\u00e9n es posible ejecutar el script desde la herramienta gr\u00e1fica pulsando la tecla F5 , ejecutar una parte de \u00e9l con F8 o detener la ejecuci\u00f3n con Ctrl+Intro .","title":"Primer Script"},{"location":"012_PowerShell.html#powershell-ise","text":"PowerShell viene acompa\u00f1ado de una herramienta gr\u00e1fica que facilita la administraci\u00f3n de todos los scripts. Se denomina Microsoft PowerShell ISE (Integrated Scripting Environment) , y se accede a trav\u00e9s de: Administrador del servidor \u2192 Herramientas \u2192 Windows PowerShell ISE . El uso de esta herramienta gr\u00e1fica va a facilitar la creaci\u00f3n de los scripts de forma significativa. Es pr\u00e1ctico comenzar con esta ayuda ya que la sintaxis de los cmdlets, aunque sea l\u00f3gica y sencilla, tambi\u00e9n lo es amplia y desconocida. Interfaz de la herramienta Windows PowerShell ISE Info Uno de los aspectos m\u00e1s interesantes que posee esta aplicaci\u00f3n es la barra de informaci\u00f3n que muestra un listado de todos los cmdlets de esta herramienta. Permite filtrarlos por funci\u00f3n y consultar la ayuda de cada uno de ellos. Tambi\u00e9n posee un formulario destinado a generar el c\u00f3digo de un cmdlet de forma autom\u00e1tica. Example Creaci\u00f3n de un comando que realice una copia de seguridad de los scripts de trabajo en una memoria externa. Es necesario el uso de Copy-Item para ello, pero no se conoce su sintaxis. Si escribimos este cmdlet en el recuadro Nombre y se pulsa sobre Mostrar Ayuda , aparecer\u00e1 un formulario con sus opciones. Tras completar las necesarias y pulsando el bot\u00f3n Insertar situado en la parte inferior, el c\u00f3digo completo ser\u00e1 escrito la parte destinada al terminal. Creaci\u00f3n autom\u00e1tica de scripts en Windows PowerShell ISE.","title":"PowerShell ISE"},{"location":"012_PowerShell.html#comentarios","text":"Note Los comentarios en PowerShell se realizan precediendo a la l\u00ednea con el car\u00e1cter # si se trata de una sola l\u00ednea y <# y #> si es multil\u00ednea.","title":"Comentarios"},{"location":"012_PowerShell.html#parametros-en-powershell","text":"Como ocurr\u00eda en GNU/Linux, los par\u00e1metros que reciba el script se deben recoger de forma interna en una variable para poder operar con ellos. Example param ([string]$nombre) Write-Host \"Hola!. Esto es mi primer script en PowerShell\" Write-Host \"Y esto es una segunda l\u00ednea\" Write-Host \"Hola de nuevo, tu nombre es $nombre\" Note El script anterior esperar\u00e1 un par\u00e1metro de tipo string que ser\u00e1 contenido en la variable nombre. En la cuarta l\u00ednea mostrar\u00e1 el contenido de la variable por pantalla. Para poder ejecutar este script, ser\u00e1 necesario acompa\u00f1arlo de un par\u00e1metro del siguiente modo. ./Script.ps1 \u201cF\u00ba Javier Hern\u00e1ndez Ill\u00e1n\u201d Para entender por completo el ejemplo anterior, ser\u00e1 necesario ver como PowerShell maneja las variables .","title":"Par\u00e1metros en PowerShell"},{"location":"012_PowerShell.html#variables","text":"Para definir una variable en PowerShell s\u00f3lo tenemos que nombrarla utilizando para ello cualquier combinaci\u00f3n de caracteres, ya sean n\u00fameros, letras o s\u00edmbolos. Es posible utilizar espacios en el nombre, aunque en este caso el nombre debe ir rodeado por s\u00edmbolos de llaves {} . Al contrario que ocurre en shellscript, PowerShell es fuertemente tipado , lo que significa que las variables no son tratadas como cadenas de texto, sino que hay que especificar el tipo de dato que se guardar\u00e1 en ella. Para definir variables es posible utilizar el m\u00e9todo expl\u00edcito (adem\u00e1s con New-Variable y sus opciones), pero tambi\u00e9n se puede utilizar el m\u00e9todo impl\u00edcito anteponiendo el s\u00edmbolo $ delante del nombre. Info Get-Variable En cualquier momento puedes obtener una lista completa de las variables que se hayan definido hasta ese momento. Para lograrlo, basta con utilizar Get- Variable.","title":"Variables"},{"location":"012_PowerShell.html#implicita","text":"Tipo Descripci\u00f3n [string] Cadena de caracteres Unicode [char] Un s\u00f3lo car\u00e1cter Unicode de 16 bits [byte] Un s\u00f3lo car\u00e1cter Unicode de 8 bits [int] Entero con signo de 32 bits [float] N\u00famero con coma flotante de 32 bits [double] N\u00famero con coma flotante de 64 bits [datetime] Fecha y Hora [bool] Valor l\u00f3gico booleano Example $numero = 9.99 $Final_2021 = 30 ${Mi variable} = \u201cContiene espacios en el nombre\u201d En la forma implicita el shell establece el tipo de dato de la variable en funci\u00f3n del dato que se le asigne en su creaci\u00f3n. En el ejemplo anterior $numero es de forma autom\u00e1tica de tipo [double] , ya que al crearla se ha inicializado con un n\u00famero con decimales. Por contra la variable $Final_2021 es de tipo [int] ya que se ha guardado un n\u00famero entero en ella. Info GetType Para poder obtener el tipo de dato de una variable hay que usar el m\u00e9todo GetType().Name sobre cualquier variable: Write-Host $feo.GetType().Name. Tip Una variable cuya definici\u00f3n de tipo se ha realizado de forma impl\u00edcita, podr\u00e1 cambiar el tipo de dato almacenado durante la ejecuci\u00f3n del programa sin experimentar ning\u00fan tipo de error. Esta pr\u00e1ctica aunque c\u00f3moda no es muy recomendable .","title":"Implicita"},{"location":"012_PowerShell.html#explicita","text":"Es buena idea tomar el control del tipado de las variables y asignarlo en funci\u00f3n de las necesidades del programa. De esta forma se ahorrar\u00e1n futuras conversiones de datos y posibles p\u00e9rdidas de informaci\u00f3n. Para ello se usa la forma expl\u00edcita de crear variables y junto con su creaci\u00f3n se define el tipo de dato que va a contener. Example [ float ] $numero = 9.99 [int] $Final_2021 = 30 [string] ${Mi variable} = \u201cContiene espacios en el nombre\u201d Al contrario que en el caso anterior, cuando el dato asignado no coincida con el tipo esperado, pueden ocurrir dos cosas: que las caracter\u00edsticas del dato se modifiquen para amoldarse al tipo de variable, lo que puede traducirse en la p\u00e9rdida de datos y un mal funcionamiento del script, o que se producir\u00e1 un error si esa conversi\u00f3n no es posible y se detenga el script.","title":"Explicita"},{"location":"012_PowerShell.html#interaccion-con-el-usuario","text":"PowerShell posee dos cmdlets para realizar estas tareas. El primero de ellos es Write-Host y tiene un comportamiento similar al echo en GNU/Linux. El segundo comando para interactuar con el usuario es Read-Host el cual permite imprimir un mensaje por el terminal y recoger aquello que el usuario ha escrito. Funciona de forma muy parecida al comando read en el terminal de GNU/Linux. [ string ] $feo = Read-Host \u201c\u00bfCu\u00e1l es el nombre del marine de Doom?\u201d Write-Host \u201cNo se sabe, pero lo has intentado con $feo\u201d Note Este script detendr\u00e1 su ejecuci\u00f3n en la l\u00ednea donde aparece Read-Host , esperar\u00e1 a que el usuario conteste a la pregunta y seguir\u00e1 con la ejecuci\u00f3n, del mismo modo que ocurre con shellscript.","title":"Interacci\u00f3n con el usuario"},{"location":"012_PowerShell.html#operadores","text":"","title":"Operadores"},{"location":"012_PowerShell.html#aritmeticos","text":"Las operaciones aritm\u00e9ticas en PowerShell son m\u00e1s intuitivas que en shellscript. Son las mismas que en el caso anterior: + , - , * , / y % . Su uso es m\u00e1s sencillo puesto que es el propio terminal en que realiza los c\u00e1lculos aritm\u00e9ticos y no a trav\u00e9s de un comando. [ int ] $a=10 [float] $b=20 [int] $res=$a+$b Write-Host $res Write-Host $a+$b Write-Host \"$a x $b = \" ($a*$b) Tambi\u00e9n se dispone de expansores de terminal como en GNU/Linux. Note N\u00f3tese que en la \u00faltima l\u00ednea aparece directamente el producto $a*$b ya que al rodear la operaci\u00f3n con par\u00e9ntesis, se convierte en un expansor, realiza la operaci\u00f3n en su interior y env\u00eda el resultado fuera. Existen variantes que simplifican el uso de algunos operadores. Operador Uso Equivalencia += $contador += 5 $contador = $contador+5 -= $contador -= 5 $contador = $contador-5 *= $contador *= 5 $contador = $contador*5 /= $contador /= 5 $contador = $contador/5 Adem\u00e1s de estos operadores existen dos espec\u00edficos para el incremento ( ++ ) y decremento ( -- ) de una unidad, ideal para el uso de variables como contadores.","title":"Aritm\u00e9ticos"},{"location":"012_PowerShell.html#logicos","text":"Operador Descripci\u00f3n -and Devuelve verdadero si las dos expresiones son verdaderas. -or Devuelve verdadero si una de las dos expresiones o las dos son verdaderas. -xor Devuelve verdadero si tan s\u00f3lo una de las expresiones es verdadera. -not o ! Devuelve verdadero cuando la expresi\u00f3n da el valor falso. Example Write-Host ((6 -ge 4) -and (7 -le 7)) Write-Host ((10 -gt 1) -or (2 -lt 2)) Write-Host ((1 -gt 0) -xor (4 -le 1)) Write-Host ( -not (12 -lt 10)) Write-Host (!(12 -lt 10)) Note En el ejemplo anterior si se ejecuta el script en un terminal PowerShell, todos los resultados ser\u00e1n verdaderos. Como en todos los lenguajes de programaci\u00f3n fuertemente tipados, existen operadores l\u00f3gicos para comprobar el tipo de dato de una variable, que resultan muy \u00fatiles para la interacci\u00f3n con los usuarios. Operador Acci\u00f3n Ejemplo -is Devuelve verdadero si es del tipo indicado. \u201cJavi\u201d -is [string] es verdadero -isnot Devuelve falso si es del tipo indicado. \u201cJavi\u201d -isnot [string] es falso -as Convierte tipos de datos compatibles. $valor = 19.90 ; Write-Host ($valor -as [int])","title":"L\u00f3gicos"},{"location":"012_PowerShell.html#comparacion","text":"los operadores tipo l\u00f3gicos devuelven tan s\u00f3lo un valor booleano que puede tener dos valores; verdadero o falso . Operador Acci\u00f3n Ejemplo -eq Comprueba si son iguales. 5 -eq 3 es falso -ieq Iguales. En cadenas no es casesensitive. \u201cJavi\u201d -ieq \u201cjavi\u201d es verdadero -ceq Iguales. En cadenas es casesensitive. \u201cJavi\u201d -ceq \u201cjavi\u201d es falso -ne Verifica si son diferentes. 5 -ne 3 es verdadero -lt Coteja si la izquierda es menor que derecha. 5 -lt 3 es falso -le Constata si la izquierda es menor o igual que derecha. 5 -le 3 es falso -gt Examina si la izquierda en mayor que la derecha. 5 -gt 3 es verdadero -ge Revisa si la izquierda en mayor o igual que la derecha. 5 -ge 3 es verdadero PowerShell a\u00f1ade operadores de comparaci\u00f3n que aportan un nivel de complejidad mayor. Operador Acci\u00f3n Ejemplo -like Eval\u00faa un patr\u00f3n \u201ces como\u201d. \u201cPerro\u201d -like \u201cPe*\u201d es verdadero -notlike Eval\u00faa un patr\u00f3n \u201cno es como\u201d. \u201cPerro\u201d -notlike \u201cPe*\u201d es falso -contains Contiene un valor. 1,2,3 -contains 2 es verdadero -notcontains No contiene un valor. 1,2,3 -notcontains 2 es falso","title":"Comparaci\u00f3n"},{"location":"012_PowerShell.html#control-del-flujo-en-powershell","text":"En esta parte se indicar\u00e1 tan s\u00f3lo la sintaxis de las estructuras alternativas e iterativas, ya que los conceptos te\u00f3ricos ya se han abordado en el apartado de Shellscript.","title":"Control del flujo en PowerShell"},{"location":"012_PowerShell.html#alternativa-simple","text":"if ( condici\u00f3n ){ ejecutar este c\u00f3digo si la condici\u00f3n es verdadera }","title":"Alternativa Simple"},{"location":"012_PowerShell.html#alternativa-doble","text":"if ( condici\u00f3n ) { ejecutar este c\u00f3digo si la condici\u00f3n es verdadera } else { ejecutar este c\u00f3digo si la condici\u00f3n es falsa }","title":"Alternativa doble"},{"location":"012_PowerShell.html#alternativa-multiple","text":"if ( condici\u00f3n1 ) { ejecutar este c\u00f3digo si la condici\u00f3n1 es verdadera } elseif ( condici\u00f3n2 ) { ejecutar este c\u00f3digo si la condici\u00f3n2 es verdadera } else { ejecutar este c\u00f3digo si todas las condiciones son falsas }","title":"Alternativa m\u00faltiple"},{"location":"012_PowerShell.html#el-equivalente-a-case-en-gnulinux","text":"switch ($valor){ opci\u00f3n1 { c\u00f3digo a ejecutar si opci\u00f3n1 coincide con $valor } opci\u00f3n2 { c\u00f3digo a ejecutar si opci\u00f3n2 coincide con $valor } opci\u00f3nN { c\u00f3digo a ejecutar si opci\u00f3nN coincide con $valor } default { c\u00f3digo a ejecutar si ninguna de las opciones coincide } } Example $saludo = Read-Host \"Escribe un saludo\" switch ($saludo){ \"Buenos d\u00edas\" { Write-Host \"Saludaste en Castellano\" } \"Bon dia\" { Write-Host \"Saludaste en Catal\u00e1n\" } \"Bo dias\" { Write-Host \"Saludaste en Gallego\" } \"Egun on\" { Write-Host \"Saludaste en Euskera\" } \"Good morning\" { Write-Host \"Saludaste en Ingl\u00e9s\" } \"Bonjour\" { Write-Host \"Saludaste en Franc\u00e9s\" } \"Buon Giorno\" { Write-Host \"Saludaste en Italiano\" } \"Bom d\u00eda\" { Write-Host \"Saludaste en Portugu\u00e9s\" } \"Guten Tag\" { Write-Host \"Saludaste en Alem\u00e1n\" } {$_ -is [string]} { Write Host \"La variable que has pasado es una cadena\" } default { \"Eso no parece un saludo\" } } Note Existe la posibilidad de colocar operadores l\u00f3gicos como opciones de un switch , si estos operadores l\u00f3gicos devuelven un valor verdadero, se ejecutar\u00e1 esa parte del c\u00f3digo, si se eval\u00faa a falso, no realizar\u00e1 esa parte del c\u00f3digo. El car\u00e1cter $_ hace referencia a la variable $saludo, de ese modo es posible realizar operaciones l\u00f3gicas con el valor pasado. Adem\u00e1s de todo esto, switch posee una serie de opciones que no est\u00e1n presentes en GNU/Linux, aunque es posible realizarlas de otra manera. Operador Descripci\u00f3n -wildcard S\u00f3lo aplicable a [string] . Indica si cumple un patr\u00f3n determinado. -exact S\u00f3lo aplicable a [string] . Debe coincidir exactamente con alguno de los patrones. -casesensitive S\u00f3lo aplicable a [string] . Debe coincidir en may\u00fasculas y min\u00fasculas. -file La entrada es un archivo. Se evaluar\u00e1 cada l\u00ednea del archivo. -regex S\u00f3lo aplicable a [string] . Permite usar expresiones regulares en la comparaci\u00f3n. Example -regex $target = 'https://bing.com' switch -Regex ($target){ '^ftp\\://.*$' { \"$_ is an ftp address\"; Break } '^\\w+@\\w+\\.com|edu|org$' { \"$_ is an email address\"; Break } '^(http[s]?)\\://.*$' { \"$_ is a web address that uses $($matches[1])\"; Break } } Example -wildcard switch -wildcard ( Read-Host \"Escribe u n\u00famero de tel\u00e9fono\" ){ \"8*\" { Write-Host \"Es un tel\u00e9fono fijo : $_\"; break } \"9*\" { Write-Host \"Es un tel\u00e9fono fijo : $_\"; break } \"6*\" { Write-Host \"Es un tel\u00e9fono m\u00f3vil : $_\"; break } default { \"$_ no parece un tel\u00e9fono\" } } El comando break que aparece al final de cada opci\u00f3n indica que si encuentra una coincidencia no siga buscando m\u00e1s y rompa el switch, ahorr\u00e1ndose as\u00ed el resto de comprobaciones.","title":"El equivalente a case en GNU/Linux"},{"location":"012_PowerShell.html#estructuras-iterativas","text":"","title":"Estructuras iterativas"},{"location":"012_PowerShell.html#vectores","text":"PowerShell considera como un vector a toda colecci\u00f3n de objetos, sea cual sea su tipo. Los elementos que lo conforman pueden estar separados por comas, estar expresados por el operador de rango .. o ser el resultado de alguna expresi\u00f3n que devuelva una colecci\u00f3n, como as\u00ed lo hacen muchos cmdlets. Example $Vacia = @{} $Enteros = 1,2,3,4,5 $Texto = \u201cLunes\u201d,\u201cMartes\u201d,\u201dMi\u00e9rcoles\u201d, \u201cJueves\u201d,\u201dViernes\u201d $EnterosRango = 1..10 De esta forma se han definido cuatro vectores; el segundo contendr\u00e1 enteros y el tercero cadenas de caracteres. La \u00faltima l\u00ednea asigna los valores desde el 1 al 10 utilizando el operador rango .. . Note El operador de rango representa una secuencia de enteros, con los l\u00edmites superior e inferior separados por dos puntos decimales. Permite expresar el rango en orden ascendente o descendente, as\u00ed como tambi\u00e9n que los l\u00edmites inferior o superior sean establecidos por medio de variables que contengan enteros. Un vector tambi\u00e9n puede definirse como el resultado de una expresi\u00f3n. Example $EnterosFor = @(For($i;$i < 5;$i++){$i}) $Comando = Get-Process | Sort-Object ProcessName En la primera l\u00ednea $enteros ser\u00e1 completado a trav\u00e9s del resultado de una estructura iterativa, mientras que la segunda contendr\u00e1 el resultado del cmdlet indicado. Adem\u00e1s de todas estas formas de declaraci\u00f3n, tambi\u00e9n se puede realizar a trav\u00e9s del cmdlet New-Variable Example New-Variable -Name Enteros -Value 1,2,3,4,5 -Force New-Variable -Name Texto -Value \"Lunes\",\"Martes\",\"Mi\u00e9rcoles\",\"Jueves\",\"Viernes\" \u2013Force New-Variable -Name EnterosRango -Value (1..5) -Force New-Variable -Name EnterosFor -value (. {For($i=1;$i -lt 5;$i++){$i}}) -Force Note El atributo -Force sobrescribe la variable si esta ya existe, de ese modo no saltar\u00e1 ning\u00fan error a la hora de definir estas variables. Para obtener el n\u00famero de elementos de un vector se utiliza el m\u00e9todo Length, si se aplica a un elemento del vector, devolver\u00e1 el tama\u00f1o de este elemento, no del vector completo. Example $Texto.Length # mostrar\u00e1 5 por pantalla $Texto[2].Length # mostrar\u00e1 9, las letras de \u201cMi\u00e9rcoles\u201d Para a\u00f1adir elementos al final de un vector se utiliza el operador += . Example $Enteros += 6 $Texto += \u201cS\u00e1bado\u201d, \u201cDomingo\u201d Note La primera l\u00ednea a\u00f1ade el entero 6 al vector $Enteros , mientras que en la segunda se a\u00f1aden los elementos \u201cS\u00e1bado\u201d y \u201cDomingo\u201d al vector $Texto . Para eliminar un elemento de un vector PowerShell no ofrece un sistema parecido al de a\u00f1adir valores, sino que tendr\u00e1 que reescribirse el vector de nuevo sin los valores no deseados.","title":"Vectores"},{"location":"012_PowerShell.html#funciones","text":"Tambi\u00e9n en PowerShell es posible utilizar funciones a trav\u00e9s de la siguiente estructura: Function <NOMBRE> { Param (<Parametro>,<Parametro>,...) Comandos PowerShell } Warning El paso de par\u00e1metros a una funci\u00f3n se realiza de id\u00e9ntica forma que en shell script. La principal diferencia entre las funciones usadas en shell script es que ahora es preferible declarar y tipar antes de iniciar con el c\u00f3digo de la funci\u00f3n. Example Function Get-Sumar { param ([integer] $a, [integer] $b) $sumar = $a + $b Write-Host \u201cLa suma es $sumar\u201d } Note Si se ejecuta la siguiente instrucci\u00f3n: Get-Sumar 2 8 La salida del terminal ser\u00e1 La suma es 10 . Si se necesita que las funciones est\u00e9n disponibles durante la sesi\u00f3n del usuario o si es necesario enlazarlas desde otro script, se deber\u00e1 utilizar la notaci\u00f3n de punto, del mismo modo que ocurr\u00eda en shell script.","title":"Funciones"},{"location":"012_PowerShell.html#actividades-powershell","text":"Note Escribe el c\u00f3digo de los scripts en PowerShell que se detallan en cada ejercicio. Deber\u00e1s crear un fichero de texto para cada ejercicio con el siguiente nombre: ejXXX.sh, donde las X representan el n\u00famero de ejercicio. Una vez terminada la pr\u00e1ctica, comprime todos estos ficheros en uno y s\u00fabelos al Moodle.","title":"Actividades PowerShell"},{"location":"012_PowerShell.html#actividades-iniciales-powershell","text":"Genera un Script que muestre los procesos del sistema ordenados por el id . Muestra los servicios cuyo nombre empiece por la letra n , utilizando la creaci\u00f3n de un script. Crea un script que si no se le pasa ning\u00fan argumento nos lo diga.","title":"Actividades Iniciales PowerShell"},{"location":"012_PowerShell.html#actividades-de-desarrollo-ud1_04","text":"Dise\u00f1a un script PowerShell que pida al usuario dos n\u00famero (comprobando que sean n\u00fameros) y muestre por pantalla el mayor de ellos o si son iguales. Crea un script PowerShell que al ejecutarlo muestre por pantalla uno de estos mensajes \u201cBuenos d\u00edas\u201d , \u201cBuenas tardes\u201d o \u201cBuenas noches\u201d , en funci\u00f3n de la hora que sea en el sistema (de 8:00 de la ma\u00f1ana a 15:00 ser\u00e1 ma\u00f1ana, de 15:00 a 20:00 ser\u00e1 tarde y el resto ser\u00e1 noche). Usa el cmdlet Get-Date . Construye tres script PowerShell utilizando estructuras iterativas: el primero ej118A.ps1 , que imprima la tabla de multiplicar de un n\u00famero preguntado al usuario. Este n\u00famero debe ser entero positivo. el segundo ej118B.ps1 , que pida un n\u00famero e indique si se trata de un n\u00famero par y si es n\u00famero primo. el tercero ej118C.ps1 , que muestre las diez primeras tablas de multiplicar por pantalla. Hay un tiempo de espera de un segundo entre ellas. Utiliza las estructuras while, do while, for y foreach y el cmdlet Start-Sleep. Dise\u00f1a un script PowerShell que lea un vector con 365 temperaturas y calcule la media y cuantos d\u00edas han estado por encima y cuantos por debajo de ella. Rellena el vector con valores aleatorios entre -5 y 35, para ello usa Get-Random.","title":"Actividades de desarrollo UD1_04"},{"location":"012_PowerShell.html#actividades-de-desarrollo-ud1_05","text":"Crea un script PowerShell que rellene un vector con diez n\u00fameros de forma aleatoria y que los muestre por pantalla de la siguiente forma: en orden inverso a como han sido introducidos los valores. los valores ordenados de menor a mayor en una sola l\u00ednea. los valores ordenados de mayor a menor en una sola l\u00ednea la suma total de sus valores. cantidad de valores pares que contiene el vector. la suma total de n\u00fameros impares. la media aritm\u00e9tica de los valores que contiene el vector. Crea un script PowerShell para que haga una copias de seguridad de todos los archivos del directorio de trabajo del usuario actual. Deber\u00e1 realizar las siguientes acciones: comprobar\u00e1 si el archivo ya existe en la copia de seguridad, si es as\u00ed comprobar\u00e1 cual de los dos es m\u00e1s reciente y que tama\u00f1o tienen. Si es m\u00e1s reciente o posee un tama\u00f1o mayor, lo copiar\u00e1. En cualquier otro caso, no lo copia. llevar\u00e1 un registro de todos los archivos copiados cada vez que se ejecute mediante un archivo de bit\u00e1cora. Guarda este fichero el directorio que contiene el script. Crea una funci\u00f3n para cada tarea realizada en este script. Dise\u00f1a un script PowerShell que muestre un men\u00fa al usuario con cuatro operaciones disponibles: Crear directorio, Eliminar directorio, Mostrar directorio, Informe de directorio, Copia de directorio y Salir . Una vez elegida una opci\u00f3n correcta, el programa debe solicitar un nombre de directorio y hacer la operaci\u00f3n seleccionada. Tras esto debe mostrar un mensaje con el resultado de la operaci\u00f3n. Crea una funci\u00f3n para cada una de estas opciones. Si se elige la opci\u00f3n Informe de directorio , mostrar\u00e1 por pantalla el n\u00famero de ficheros que contiene, cuantos son carpetas, cuantos directorios y el tama\u00f1o total de ellos. Si la carpeta no existe, mostrar\u00e1 un error. Si elige la opci\u00f3n Copia de directorio , preguntar\u00e1 la carpeta de destino y mostrar\u00e1 fichero a fichero la copia. Realiza un script PowerShell que permita crear un informe de las IP libres en la red en la que se encuentra el equipo. Debe contener las siguientes opciones: el informe contendr\u00e1 un listado de todas las IP de la red a la que pertenece el equipo indicando si est\u00e1 libre o no (usa el comando ping). en el informe debe aparecer el tipo de red (A, B o C) en el que est\u00e1 inmerso el ordenador con el nombre de la red, su broadcast y su m\u00e1scara de subred.","title":"Actividades de desarrollo UD1_05"},{"location":"013_Docker.html","text":"Docker \u00b6 Logo Docker. Docker (estibador en ingles) es un Sistema de Virtualizaci\u00f3n de Aplicaciones mediante contenedores , creado por Solomon Hykes y su equipo de ingenieros. En 2013 se convirti\u00f3 en un proyecto de software libre (licencia Apache) en el que participan cada vez m\u00e1s empresas. La versi\u00f3n 1.0 se public\u00f3 en junio de 2014 y ha tenido un desarrollo muy r\u00e1pido. En marzo de 2017 , Docker anunci\u00f3 un desarrollo todav\u00eda m\u00e1s r\u00e1pido, pasando a publicar una nueva versi\u00f3n cada mes. La numeraci\u00f3n de las versiones adopt\u00f3 al formato AA.MM (la primera fue Docker 17.03 ). En julio de 2018 , Docker anunci\u00f3 que volv\u00edan a un desarrollo m\u00e1s pausado. A partir de Docker 18.09 habr\u00eda una versi\u00f3n \"estable\" cada seis meses. Conceptos Previos \u00b6 Virtualizaci\u00f3n: Hipervisor \u00b6 En general, el objetivo de la virtualizaci\u00f3n es poder utilizar simult\u00e1neamente en un mismo ordenador dos o m\u00e1s sistemas operativos. Por lo tanto, para poder hablar de virtualizaci\u00f3n tienen que estar funcionando a la vez varios sistemas operativos . Note De acuerdo con esta definici\u00f3n, instalar dos sistemas operativos en un ordenador ( Windows y Linux , por ejemplo) y poder elegir uno u otro mediante un arranque dual no se considera virtualizaci\u00f3n , puesto que mediante un arranque dual no podemos ejecutar a la vez ambos sistemas. Y tampoco ser\u00eda virtualizaci\u00f3n la simulaci\u00f3n, que consiste en imitar el aspecto visual del sistema imitado. Por ejemplo, podr\u00edamos instalar un tema de escritorio en GNOME o KDE que imitara el escritorio de Windows. El problema de esta simulaci\u00f3n ser\u00eda que realmente no estar\u00edamos utilizando Windows sino simplemente algo que parece Windows. As\u00ed que, por ejemplo, no podr\u00edamos instalar una aplicaci\u00f3n de Windows puesto que el sistema operativo ser\u00eda Linux, que no acepta instaladores de Windows. Los sistemas operativos son los encargados de la gesti\u00f3n del hardware y requieren un control completo del mismo, por lo que dos sistemas operativos no pueden en principio estar funcionando a la vez sobre el mismo hardware. La soluci\u00f3n para la virtualizaci\u00f3n es la existencia de un hipervisor (en ingl\u00e9s, hypervisor). Ventajas Virtualizaci\u00f3n \u00b6 La virtualizaci\u00f3n tiene muchas aplicaciones interesantes: La m\u00e1s habitual es poder ejecutar aplicaciones que no est\u00e1n disponibles para el sistema operativo host , pero s\u00ed para otro sistema operativo que se instalar\u00eda como guest. La virtualizaci\u00f3n permite la conservaci\u00f3n del software . Debido al progreso del hardware, los procesadores antiguos dejan de fabricarse y los sistemas operativos y aplicaciones antiguos dejan de desarrollarse y dejan de funcionar en el hardware moderno. Pero si el sistema operativo puede instalarse como guest, puede seguir utiliz\u00e1ndose para siempre. La virtualizaci\u00f3n permite depurar y comprobar el funcionamiento de los programas y los sistemas operativos . Si un programa provoca un fallo de funcionamiento total, si se est\u00e1 ejecutando como guest, el sistema host puede recoger informaci\u00f3n sobre el motivo del fallo. La virtualizaci\u00f3n permite un mejor aprovechamiento del hardware , ya que un mismo ordenador puede contener muchos sistemas guests utilizados por usuarios diferentes, aislados unos de otros. Hipervisor \u00b6 El hipervisor es la pieza fundamental de la virtualizaci\u00f3n. Tradicionalmente, se distinguen dos tipos de hipervisores: Los hipervisores de tipo 1 , denominados \u00ab hipervisores bare metal \u00bb, dichos hipervisores est\u00e1n en contacto directo con el hardware de la m\u00e1quina, sin necesidad de ning\u00fan sistema operativo previo. Los hipervisores de tipo 2 , denominados \u00ab alojados \u00bb, y son una aplicaci\u00f3n m\u00e1s del sistema operativo instalado en la m\u00e1quina y el hipervisor accede al hardware de la m\u00e1quina a trav\u00e9s de ese sistema operativo. Tipos de Hipervisor. Note En el caso de los hipervisores de tipo 2 , el sistema operativo que tiene el control del hardware recibe el nombre de host (anfitri\u00f3n). Es el sistema operativo que se instal\u00f3 primero en el ordenador y el que se pone en marcha al arrancar el ordenador. Los dem\u00e1s sistemas operativos reciben el nombre de guests (hu\u00e9spedes) y pueden ejecutarse o no a voluntad del usuario. En el caso de los hipervisores de tipo 1 no hay un sistema operativo host, todos los sistemas operativos son guests del hipervisor. Example Tipo 1 : ejemplos de este tipo de hipervisores son VMware ESXi o Xen , los cuales son utilizados a nivel de centro de datos. Hyper-V de Microsoft se puede considerar un hipervisor de tipo 1 , porque aunque necesita que est\u00e9 instalado primero Windows para poder instalar Hyper-V , una vez instalado convierte a Windows en un guest m\u00e1s de Hyper-V (aunque con acceso prioritario con respecto al resto de guests). Tipo 1 / Tipo 2 : KVM , al estar integrado en el kernel de Linux, se puede considerar tanto de tipo 1 como de tipo 2 . Tipo 2 : VirtualBox es un hipervisor de tipo 2 . Contenedores \u00b6 El problema de los hipervisores y las m\u00e1quinas virtuales es que cada m\u00e1quina virtual es independiente de las dem\u00e1s. Al no reutilizarse ning\u00fan componente, se ocupa mucho espacio tanto en disco como en memoria y el tiempo de ejecuci\u00f3n siempre ser\u00e1 mayor que si s\u00f3lo hubiera un sistema operativo (sobre todo en el caso de hipervisores de tipo 2 ). Para resolver este problema se crearon los contenedores en los que se utilizan mecanismos existentes en el sistema operativo para aislar las aplicaciones , pero compartiendo el mayor n\u00famero posible de componentes del sistema operativo o incluso de las aplicaciones. Como definici\u00f3n, Un contenedor es el equivalente a una m\u00e1quina virtual de la virtualizaci\u00f3n cl\u00e1sica, pero mucho m\u00e1s ligera porque utiliza recursos del sistema operativo del hos t. Las aplicaciones de cada contenedor \"ven\" un sistema operativo, que puede ser diferente en cada contenedor, pero quien realiza el trabajo es el sistema operativo com\u00fan que hay por debajo . Note Los contenedores suelen ser elementos ef\u00edmeros . La facilidad con la que pueden crearse y ponerse en marcha hace m\u00e1s f\u00e1cil crear un nuevo contenedor que modificar uno ya existente. Por ello, los datos generados por las aplicaciones no se suelen guardar en los contenedores, sino fuera de ellos. Su ligereza hace m\u00e1s f\u00e1cil tener varios contenedores con una aplicaci\u00f3n en cada uno de ellos que tener un \u00fanico contenedor con varias aplicaciones en \u00e9l. Por ello, un aspecto importante de los contenedores es su orquestaci\u00f3n , es decir, la administraci\u00f3n simult\u00e1nea de muchos contenedores, una de las herramientas m\u00e1s utilizadas es Kubernetes . M\u00e1quinas Virtuales VS Contenedores \u00b6 Contenedores Vs M\u00e1quinas Virtuales. Caracter\u00edsticas principales Contenedores \u00b6 En resumen los contenedores: Consisten en Agrupar y Aislar Aplicaciones o grupos de aplicaciones que se ejecutan sobre un mismo n\u00facleo de sistema operativo . Su caracter\u00edstica principal se basa en su propio sistema de archivos ejecutable en cualquier Sistema Operativo . No es necesario emular el HW y SW completo como en las m\u00e1quinas virtuales, por lo tanto son mucho m\u00e1s ligeros , comparten el m\u00e1ximo de componentes con el sistema operativo host, y su rapidez, ya que gracias a que apenas a\u00f1aden capas adicionales consiguen casi velocidades nativas. Soluciona problemas de espacio y compatibilidades a la hora de puesta en marcha en servidores de producci\u00f3n. Los contenedores suelen ser elementos ef\u00edmeros . Caracter\u00edsticas principales de Docker \u00b6 Docker es una API amigable del tipo Open Source . Genera un proceso aislado del resto de los procesos de la m\u00e1quina gracias a: Ejecutar sobre su propio sistema de ficheros, con su propio espacio de usuarios y procesos, y sus propias interfaces de red... Es Modular ya que esta dividido en varios componentes. Es portable e inmutable utilizando la plataforma DockerHub . Su es lema \u201cBuild, Ship and Run, any app,\u201d . Lema Docker. Note Aunque un contenedor puede incluir cualquier n\u00famero de aplicaciones, lo habitual es que un contenedor contenga una sola aplicaci\u00f3n (y los programas necesarios para ponerse en marcha). Arquitectura Docker \u00b6 Docker Engine (\"Motor\" del Gestor Docker) : el cual basado en la arquitectura de Cliente-Servidor (que pueden estar en la misma m\u00e1quina, o en distintas), y realizada por mediante una API de REST que utiliza HTTP . API REST : interfaz de programaci\u00f3n con un estilo de arquitectura software para sistemas hipermedia distribuidos como la World Wide Web . \"Daemon Docker\" (Servicio) : lleva a cabo Gesti\u00f3n y enlace de los componentes del gestor. Im\u00e1genes : Las im\u00e1genes son una especie de plantillas que contienen como m\u00ednimo todo el software que necesita la aplicaci\u00f3n para ponerse en marcha. est\u00e1n formadas por una colecci\u00f3n ordenada de: Sistemas Archivos ; Repositorios ; Comandos ; Par\u00e1metros ; Aplicaciones . Contenedores : son el conjunto de procesos que encapsulan e identifican a una Imagen. Pueden ser: Creado, inicializado, parado, vuelto a ejecutar y destruido. Registros son im\u00e1genes son guardadas en registros para: Almacenar o Distribuir. Se realiza en Docker Hub y pueden ser P\u00fablicos y Privados. Componentes de Docker. Note El componente b\u00e1sico de Docker es el Docker Engine , pero Docker ofrece tambi\u00e9n una serie de herramientas para administrar, distribuir e instalar contenedores: Docker Compose , Docker Swarm . Las im\u00e1genes se pueden crear a partir de otras im\u00e1genes m\u00e1s b\u00e1sicas incluyendo software adicional en forma de capas. Todos los contenedores creados a partir de una imagen contienen el mismo software, aunque en el momento de su creaci\u00f3n se pueden personalizar algunos detalles Microservicios \u00b6 Uno de los objetivos principales de la configuraci\u00f3n e implantaci\u00f3n con Docker es es solucionar los problemas de: Errores de dependencias entre diferentes Sistemas Operativos de los trabajadores y m\u00e1quinas de puesta en marcha. Evitar la Elevada carga y capacidad de las M\u00e1quinas Virtuales. Caida de todos los servicios instalados de forma monol\u00edtica en los servidores. Tipos de despliegue: Monol\u00edtico \u2192 Todos los servicios en la misma m\u00e1quina. SOA (Service Oriented Architecture) \u2192 Diferentes M\u00e1quinas una con cada Servicio conectadas. MicroServicios \u2192Divisi\u00f3n m\u00e1s peque\u00f1a de los servicios. Momol\u00edtico Vs Microservicios. Instalaci\u00f3n \u00b6 Para la Instalaci\u00f3n de Docker es recomendable seguir la documentaci\u00f3n oficial. Adem\u00e1s se recomienda Instalar m\u00e1quina Ubuntu Server \u00faltima versi\u00f3n e instalar Docker en ella. Docker for Mac: Instalaci\u00f3n Mac Docker for Windows: Instalaci\u00f3n Windows Docker for ubuntu: Instalaci\u00f3n Ubuntu Warning Docker empez\u00f3 estando disponible solamente para distribuciones GNU/Linux, pero desde junio de 2016 tambi\u00e9n est\u00e1 disponible como aplicaci\u00f3n nativa en Windows Server 2016 y Windows 10. Docker utiliza la virtualizaci\u00f3n ofrecida por el sistema operativo. En el caso de Windows 10, eso significa que para usar Docker de forma nativa hay que activar Hyper-V que, por desgracia, es incompatible con VirtualBox. Para poder utilizar Docker en Windows 7 o en Windows 10 sin Hyper-V , Docker ofrece desde agosto de 2015 Docker Toolbox , que realmente es una m\u00e1quina virtual (que se ejecuta en VirtualBox) que contiene Docker. Principales Comandos \u00b6 A continuaci\u00f3n se muestran los comandos m\u00e1s utilizados: Comando Acci\u00f3n Comando Acci\u00f3n docker info obtener informaci\u00f3n relativa a docker docker start (docker container start) inicia la ejecuci\u00f3n docker run (docker container run) crea y ejecuta el contenedor docker rm (docker container eliminar) elimina el contenedor docker build crea una imagen docker cp (docker container copiar) docker ps muestra la lista de contenedores creados docker logs (docker container logs) muestra los errores docker inspect (docker container inspect) informaci\u00f3n detallada de los contenedores docker stats (docker container stats) muestra el estado docker stop (docker container stop) detiene la ejecuci\u00f3n del contenedor docker system prune limpiar todo el sistena de contenedores im\u00e1genes y volumenes Chuleta de Comandos Chuleta Docker. Primer Contenedor \u00b6 A continuaci\u00f3n se muestra un ejemplo guiado de la creaci\u00f3n del contenedor \"Hello World\" Comprobaci\u00f3n que inicialmente no hay ning\u00fan contenedor creado (la opci\u00f3n -a hace que se muestren tambi\u00e9n los contenedores detenidos, sin ella se muestran s\u00f3lo los contenedor que est\u00e9n en marcha): sudo docker ps -a o tambi\u00e9n sudo docker container ls -a Compruebe que inicialmente tampoco disponemos de ninguna imagen: sudo docker image ls Note Docker crea los contenedores a partir de im\u00e1genes locales (ya descargadas), pero si al crear el contenedor no se dispone de la imagen local, Docker descarga la imagen de su repositorio. La orden m\u00e1s simple para crear un contenedor sigue esta estructura: sudo docker run IMAGEN Example sudo docker run hello-world Note Como no tenemos todav\u00eda la imagen en nuestro ordenador, Docker descarga la imagen, crea el contenedor y lo pone en marcha. En este caso, la aplicaci\u00f3n que contiene el contenedor hello-world simplemente escribe un mensaje de salida al arrancar e inmediatamente se detiene el contenedor. Si listamos de nuevo imagenes y contenedores, las veremos creadas. Cada contenedor tiene un identificador (ID) y un nombre distinto. Docker \"bautiza\" los contenedores con un \" nombre peculiar \", compuesto de un adjetivo y un apellido. Podemos crear tantos contenedores como queramos a partir de una imagen. Una vez la imagen est\u00e1 disponible localmente, Docker no necesita descargarla y el proceso de creaci\u00f3n del contenedor es inmediato (aunque en el caso de hello-world la descarga es r\u00e1pida, con im\u00e1genes m\u00e1s grandes la descarga inicial puede tardar un rato). Tip Normalmente se aconseja usar siempre la opci\u00f3n -d , que arranca el contenedor en segundo plano ( detached ) y permite seguir teniendo acceso a la shell (aunque con hello-world no es estrictamente necesario porque el contenedor hello-world se detiene autom\u00e1ticamente tras mostrar el mensaje). Al crear el contenedor hello-world con la opci\u00f3n -d no se muestra el mensaje, simplemente muestra el identificador completo del contenedor. Los contenedores se pueden destruir mediante el comando rm, haciendo referencia a ellos mediante su nombre o su id. No es necesario indicar el id completo , basta con escribir los primeros caracteres (de manera que no haya ambig\u00fcedades). Adem\u00e1s podemos dar nombre a los contenedores al crearlos: sudo docker run -d --name=hola-1 hello-world Vol\u00famenes \u00b6 Docker simplifica enormemente la creaci\u00f3n de contenedores, y eso lleva a tratar los contenedores como un elemento ef\u00edmero , que se crea cuando se necesita y que no importa que se destruya puesto que puede ser reconstruido una y otra vez a partir de su imagen. Warning Pero si la aplicaci\u00f3n o aplicaciones incluidas en el contenedor generan datos y esos datos se guardan en el propio contenedor, en el momento en que se destruyera el contenedor perder\u00edamos esos datos . El objetivo principal de los volumenes es no perder datos si borro el contenedor y mejorar rendimiento del Docker . Para conseguir la persistencia de los datos, se pueden emplear dos t\u00e9cnicas: Los directorios enlazados (bind) , en la que la informaci\u00f3n se guarda fuera de Docker, en la m\u00e1quina host (por ejemplo si lo ejecutamos en la m\u00e1quina virtual de Ubuntu o la m\u00e1quina f\u00edsica de Lliurex en clase). Los vol\u00famenes , en la que la informaci\u00f3n se guarda mediante Docker, pero en unos elementos llamados vol\u00famenes , independientes de las im\u00e1genes y los contenedores. Adem\u00e1s los volumens se pueden catalogar en dos tipos. Volu\u0301menes de Datos : es como si montar\u00e1 un disco en el contenedor y por defecto se realizan en un path temporal. Volu\u0301menes de Host : Mismo concepto pero indic\u00e1ndole el path. Tip Aconsejable utilizar la t\u00e9cnica de volumenes , ya que, La ventaja frente a los directorios enlazados es que pueden ser gestionados por Docker. Otro detalle importante es que el acceso al contenido de los vol\u00famenes s\u00f3lo se puede hacer a trav\u00e9s de alg\u00fan contenedor que utilice el volumen. Ventajas Vol\u00famenes \u00b6 Los vol\u00famenes tienen varias ventajas sobre los directorios enlazados: Los vol\u00famenes son m\u00e1s f\u00e1ciles de respaldar o migrar que enlazar montajes. Puede administrar vol\u00famenes mediante los comandos de la CLI de Docker o la API de Docker. Los vol\u00famenes funcionan tanto en contenedores de Linux como de Windows. Los vol\u00famenes se pueden compartir de forma m\u00e1s segura entre varios contenedores. Los controladores de volumen le permiten almacenar vol\u00famenes en hosts remotos o proveedores en la nube, para cifrar el contenido de los vol\u00famenes o para agregar otras funciones. Los nuevos vol\u00famenes pueden tener su contenido precargado por un contenedor. Los vol\u00famenes en Docker Desktop tienen un rendimiento mucho mayor que los directorios enlazados de hosts de Mac y Windows. Note Adem\u00e1s, los vol\u00famenes suelen ser una mejor opci\u00f3n que los datos persistentes en la capa de escritura de un contenedor, porque un volumen no aumenta el tama\u00f1o de los contenedores que lo usan y el contenido del volumen existe fuera del ciclo de vida de un contenedor determinado. Gr\u00e1fico t\u00e9cnicas de persistencia de datos. Note Los vol\u00famenes son independientes de los contenedores, por lo que tambi\u00e9n podemos conservar los datos aunque se destruya el contenedor, reutilizarlos con otro contenedor, etc. Opciones \u00b6 Opciones: ` Docker volume (create|Is|inspect|rm)` para crear el volumen a la vez que creamos y ejecutamos un contenedor se utilzan las opciones v o --mount En general, --mount m\u00e1s expl\u00edcito y detallado. La mayor diferencia es que la sintaxis de -v combina todas las opciones juntas en un campo, mientras que la sintaxis --mount las separa. A continuaci\u00f3n se muestra una comparaci\u00f3n de la sintaxis de cada \"flag\". -v o --volume : consta de tres campos, separados por dos puntos ( :). Los campos deben estar en el orden correcto y el significado de cada campo no es inmediatamente obvio. En el caso de vol\u00famenes con nombre, el primer campo es el nombre del volumen y es \u00fanico en una m\u00e1quina host determinada. Para vol\u00famenes an\u00f3nimos, se omite el primer campo. El segundo campo es la ruta donde se monta el archivo o directorio en el contenedor. El tercer campo es opcional y es una lista de opciones separadas por comas, como ro (readonly). --mount : Consta de varios pares clave-valor, separados por comas (cada uno formado por una = dupla). La sintaxis de --mount es m\u00e1s detallada que -v o --volume ; adem\u00e1s el orden de las claves no es significativo, por lo tanto el valor de las \"flags\" son m\u00e1s f\u00e1ciles de entender. Valores de las duplas: type : puede ser bind , volume o tmpfs . source : Para vol\u00famenes con nombre, este es el nombre del volumen. Para vol\u00famenes an\u00f3nimos, este campo se omite. Puede especificarse como source o src. destination : toma como valor de la ruta en el archivo o directorio est\u00e1 montado en el contenedor. Puede ser especificado como destination, dst o target . readonly : si est\u00e1 presente, hace que el montaje de enlace se monte en el contenedor como de solo lectura. Puede especificarse como readonly o ro . volume-opt se puede especificar m\u00e1s de una vez, toma un par clave-valor que consta del nombre de la opci\u00f3n y su valor. Ejemplo: volume-opt=type=nfs Note Todas las opciones de vol\u00famenes est\u00e1n disponibles para los indicadores --mount y -v , por que a la hora de elegir uno u otro depende del t\u00e9cnico para su facilidad de configuraci\u00f3n donde por su sintaxis a priori ser\u00eda mejor --mount . Ejemplo \u00b6 A continuaci\u00f3n se muestra un ejemplo de creaci\u00f3n del servidor web NGINX. Example docker run -d \\ --name nginx1 -p 8080:80 \\ --mount type=volume,source=myvol1,target=/usr/share/nginx/html \\ nginx:latest Note Si en lugar de la opci\u00f3n -p 8080:80 se utiliza la opci\u00f3n -P hace que Docker asigne de forma aleatoria un puerto de la m\u00e1quina virtual al puerto asignado a Nginx en el contenedor. Si se creara una p\u00e1gina de incio del apache diferente a la de defecto podr\u00edamos copiarla en el volumen y esta cambiar\u00eda: nano index.html Nueva p\u00e1gina de inicio: <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"utf-8\"> <title>Apache en Docker</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> </head> <body> <h1>\u00a1Hola de nuevo, Mundo!</h1> </body> </html> Para cambiar la p\u00e1gina de inicio del apache se debe copiar dentro del volumen creado. docker cp index.html nginx1:/usr/share/nginx/html Si accedemos al servidor apache aparecer\u00e1 la nueva p\u00e1gina. Warning Si aparece el error forbiden 403, es debido a permisos del index.html, debemos entrar en container y cambiar los permisos. docker exec -it nginx1 /bin/bash cd /usr/share/nginx/html chown -R root:root index.html Adem\u00e1s podemos crear un nuevo contenedor con este volumen: docker run -d \\ --name nginx2 -p 8080:80 \\ --mount type=volume,source=myvol1,target=/usr/share/nginx/html \\ nginx:latest Se comprueba que el nuevo contenedor muestra la nueva p\u00e1gina index.html Warning Si se intenta borrar el volumen del ejemplo anterior mientras los contenedores est\u00e1n en marcha, Docker muestra un mensaje de error que indica los contenedores afectados . Redes \u00b6 Cuando se crean diferentes servicios o aplicaciones en contenedores distintos (siguiendo la premisa de microservicios), estos no estas conectados entre s\u00ed, en el caso que necesitar\u00e1n conexi\u00f3n se utilizar\u00edan \"redes Docker\". Este mecanismo funciona de manera distinta seg\u00fan la red docker donde est\u00e9n conectados los contenedores. Representaci\u00f3n Redes Docker. Opciones y tipos \u00b6 Opciones: docker network (create | Is | inspect | rm) A continuaci\u00f3n se introducen los distintos tipos de redes que nos ofrece docker: Bridge \u2192 por defecto. Todos los contenedores est\u00e1n en la misma red, separada del Host. Host \u2192 Cuando quiero que los contenedores est\u00e9n en mi misma red. None \u2192 contenedores aislados. Escenario de ejemplo de una Red Docker. Warning El uso de contenedores conectados a la red por defecto no est\u00e1 recomendado en entornos de producci\u00f3n. se podr\u00edan enlazar contenedores con el bridge por defecto con el flag --link . Tip La opci\u00f3n recomendable es definir una red bridge y crear los contenedores conectados a dicha red. El mayor problema es que ambos contenedores compartir\u00edan las variables de entorno y esto puede causar problemas de desarrollo. Por ejemplo: docker network create mired Se crean los contenedores conectados a dicha red: docker run -d --name servidor_mysql --network mired \\ -e MYSQL_DATABASE=bd_wp -e MYSQL_USER=user_wp -e MYSQL_PASSWORD=asdasd \\ -e MYSQL_ROOT_PASSWORD=asdasd mariadb docker run -d --name servidor --network mired javierhernandez/aplicacionweb:v1 Note En este caso no se comparten las variables de entorno. Tools \u00b6 Existen dos opciones destacables en Docker para agilizar el despliegue de Imagenes y contenedores: Dockerfile y Docker-compose Dockerfile : es un archivo de texto plano que contiene una serie de instrucciones necesarias para crear una imagen que, posteriormente, se convertir\u00e1 en una sola aplicaci\u00f3n utilizada para un determinado prop\u00f3sito. Summary Im\u00e1genes\u2192 docker build \u2192 docker_file Docker-compose : es una herramienta que permite simplificar el uso de Docker. A partir de archivos YAML es mas sencillo crear contendores, conectarlos, habilitar puertos, volumenes, etc. Summary Contenedores\u2192 docker run \u2192 docker_compose.yml Dockerfile \u00b6 Las instrucciones principales que pueden utilizarse en un Dockerfile son: Ver tambi\u00e9n: Best practices for writing Dockerfiles Example A continuaci\u00f3n se muestra un ejemplo para la realizaci\u00f3n de la pr\u00e1ctica de ampliaci\u00f3n extraido de Apache oficial de docker . Primer paso : generar imagen con un Dockerfile . Se crea el archivo de texto dockerfile. mkdir docker touch dockerfile nano dockerfile Ejemplo edici\u00f3n Dockerfile. # syntax=docker/dockerfile:1 FROM nginx:alpine RUN apk update COPY index.html/ /usr/share/nginx/html/ Nota Se puede probar a introducir el volumen en el docker file: VOLUME /myvol1 Se crea la imagen y el contenedor. docker build -t franciscojav1981/my-nginx . docker run -dit --name my-nginx -p 8081:80 franciscojav1981/my-nginx Warning Mucho cuidado con el \u00faltimo punto de la instucci\u00f3n de build, tiene un espacio antes. Es el \u00faltimo argumento (y el \u00fanico imprescindible) es el nombre del archivo Dockerfile que tiene que utilizar para generar la imagen. Como en este caso se encuentra en el mismo directorio y tiene el nombre predeterminado Dockerfile, se puede escribir simplemente punto ( . ). Para indicar el nombre de la imagen se debe a\u00f1adir la opci\u00f3n -t . El nombre de la imagen debe seguir el patr\u00f3n nombre-de-usuario/nombre-de-imagen . Si la imagen s\u00f3lo se va a utilizar localmente, el nombre de usuario y de la imagen pueden ser cualquier palabra. Segundo paso : subir imagen al Docker Hub. Se debe generar una cuenta de Docker Hub con la cuenta corporativa de Office 365: Sign Up Con el comando docker login , se realiza el acceso a la plataforma desde el terminal, introduciendo usuario y contrase\u00f1a. docker login Con el comando docker push , se realiza el \"Upload\" de la imagen. docker push franciscojav1981/my-nginx Por \u00faltimo Se debe comprobar accediendo a la platadorma de Docker Hub. Docker-compose \u00b6 Docker-compose es otro proyecto open source que permite definir aplicaciones muilti-contenedor de una manera sencilla y declarativa. Es una alternativa m\u00e1s c\u00f3moda al uso de los comandos docker run y docker build, que resultan un tanto tediosos cuando trabajamos con aplicaciones de varios componentes. Se define un fichero docker-compose.yml que se puede observar en el ejemplo realizado en la pr\u00e1ctica en el \u00faltimo apartado. Example A continuaci\u00f3n se muestra un ejemplo para la realizaci\u00f3n de la pr\u00e1ctica de ampliaci\u00f3n: Instalaci\u00f3n Wordpress Primer Paso : instalaci\u00f3n de Docker-compose. Install Docker Compose Segundo paso : Crear directorio del proyecto y dentro el archivo yaml . mkdir my_wordpress touch docker-compose.yml nano docker-compose.yml 3. Tercer paso : se edita el yaml . version : \"3.9\" services : db : image : mysql:5.7 volumes : - db_data:/var/lib/mysql restart : always environment : MYSQL_ROOT_PASSWORD : somewordpress MYSQL_DATABASE : wordpress MYSQL_USER : wordpress MYSQL_PASSWORD : wordpress wordpress : depends_on : - db image : wordpress:latest volumes : - wordpress_data:/var/www/html ports : - \"8000:80\" restart : always environment : WORDPRESS_DB_HOST : db:3306 WORDPRESS_DB_USER : wordpress WORDPRESS_DB_PASSWORD : wordpress WORDPRESS_DB_NAME : wordpress volumes : db_data : {} wordpress_data : {} Cuarto paso : en la carpeta creada del proyecto se ejecuta el comando de docker-compose up -d docker-compose up -d Por \u00faltimo Se comprueba que se ha creado el contenedor. Cuidado.","title":"1.3- Docker"},{"location":"013_Docker.html#docker","text":"Logo Docker. Docker (estibador en ingles) es un Sistema de Virtualizaci\u00f3n de Aplicaciones mediante contenedores , creado por Solomon Hykes y su equipo de ingenieros. En 2013 se convirti\u00f3 en un proyecto de software libre (licencia Apache) en el que participan cada vez m\u00e1s empresas. La versi\u00f3n 1.0 se public\u00f3 en junio de 2014 y ha tenido un desarrollo muy r\u00e1pido. En marzo de 2017 , Docker anunci\u00f3 un desarrollo todav\u00eda m\u00e1s r\u00e1pido, pasando a publicar una nueva versi\u00f3n cada mes. La numeraci\u00f3n de las versiones adopt\u00f3 al formato AA.MM (la primera fue Docker 17.03 ). En julio de 2018 , Docker anunci\u00f3 que volv\u00edan a un desarrollo m\u00e1s pausado. A partir de Docker 18.09 habr\u00eda una versi\u00f3n \"estable\" cada seis meses.","title":"Docker"},{"location":"013_Docker.html#conceptos-previos","text":"","title":"Conceptos Previos"},{"location":"013_Docker.html#virtualizacion-hipervisor","text":"En general, el objetivo de la virtualizaci\u00f3n es poder utilizar simult\u00e1neamente en un mismo ordenador dos o m\u00e1s sistemas operativos. Por lo tanto, para poder hablar de virtualizaci\u00f3n tienen que estar funcionando a la vez varios sistemas operativos . Note De acuerdo con esta definici\u00f3n, instalar dos sistemas operativos en un ordenador ( Windows y Linux , por ejemplo) y poder elegir uno u otro mediante un arranque dual no se considera virtualizaci\u00f3n , puesto que mediante un arranque dual no podemos ejecutar a la vez ambos sistemas. Y tampoco ser\u00eda virtualizaci\u00f3n la simulaci\u00f3n, que consiste en imitar el aspecto visual del sistema imitado. Por ejemplo, podr\u00edamos instalar un tema de escritorio en GNOME o KDE que imitara el escritorio de Windows. El problema de esta simulaci\u00f3n ser\u00eda que realmente no estar\u00edamos utilizando Windows sino simplemente algo que parece Windows. As\u00ed que, por ejemplo, no podr\u00edamos instalar una aplicaci\u00f3n de Windows puesto que el sistema operativo ser\u00eda Linux, que no acepta instaladores de Windows. Los sistemas operativos son los encargados de la gesti\u00f3n del hardware y requieren un control completo del mismo, por lo que dos sistemas operativos no pueden en principio estar funcionando a la vez sobre el mismo hardware. La soluci\u00f3n para la virtualizaci\u00f3n es la existencia de un hipervisor (en ingl\u00e9s, hypervisor).","title":"Virtualizaci\u00f3n: Hipervisor"},{"location":"013_Docker.html#contenedores","text":"El problema de los hipervisores y las m\u00e1quinas virtuales es que cada m\u00e1quina virtual es independiente de las dem\u00e1s. Al no reutilizarse ning\u00fan componente, se ocupa mucho espacio tanto en disco como en memoria y el tiempo de ejecuci\u00f3n siempre ser\u00e1 mayor que si s\u00f3lo hubiera un sistema operativo (sobre todo en el caso de hipervisores de tipo 2 ). Para resolver este problema se crearon los contenedores en los que se utilizan mecanismos existentes en el sistema operativo para aislar las aplicaciones , pero compartiendo el mayor n\u00famero posible de componentes del sistema operativo o incluso de las aplicaciones. Como definici\u00f3n, Un contenedor es el equivalente a una m\u00e1quina virtual de la virtualizaci\u00f3n cl\u00e1sica, pero mucho m\u00e1s ligera porque utiliza recursos del sistema operativo del hos t. Las aplicaciones de cada contenedor \"ven\" un sistema operativo, que puede ser diferente en cada contenedor, pero quien realiza el trabajo es el sistema operativo com\u00fan que hay por debajo . Note Los contenedores suelen ser elementos ef\u00edmeros . La facilidad con la que pueden crearse y ponerse en marcha hace m\u00e1s f\u00e1cil crear un nuevo contenedor que modificar uno ya existente. Por ello, los datos generados por las aplicaciones no se suelen guardar en los contenedores, sino fuera de ellos. Su ligereza hace m\u00e1s f\u00e1cil tener varios contenedores con una aplicaci\u00f3n en cada uno de ellos que tener un \u00fanico contenedor con varias aplicaciones en \u00e9l. Por ello, un aspecto importante de los contenedores es su orquestaci\u00f3n , es decir, la administraci\u00f3n simult\u00e1nea de muchos contenedores, una de las herramientas m\u00e1s utilizadas es Kubernetes .","title":"Contenedores"},{"location":"013_Docker.html#maquinas-virtuales-vs-contenedores","text":"Contenedores Vs M\u00e1quinas Virtuales.","title":"M\u00e1quinas Virtuales VS Contenedores"},{"location":"013_Docker.html#caracteristicas-principales-contenedores","text":"En resumen los contenedores: Consisten en Agrupar y Aislar Aplicaciones o grupos de aplicaciones que se ejecutan sobre un mismo n\u00facleo de sistema operativo . Su caracter\u00edstica principal se basa en su propio sistema de archivos ejecutable en cualquier Sistema Operativo . No es necesario emular el HW y SW completo como en las m\u00e1quinas virtuales, por lo tanto son mucho m\u00e1s ligeros , comparten el m\u00e1ximo de componentes con el sistema operativo host, y su rapidez, ya que gracias a que apenas a\u00f1aden capas adicionales consiguen casi velocidades nativas. Soluciona problemas de espacio y compatibilidades a la hora de puesta en marcha en servidores de producci\u00f3n. Los contenedores suelen ser elementos ef\u00edmeros .","title":"Caracter\u00edsticas principales Contenedores"},{"location":"013_Docker.html#caracteristicas-principales-de-docker","text":"Docker es una API amigable del tipo Open Source . Genera un proceso aislado del resto de los procesos de la m\u00e1quina gracias a: Ejecutar sobre su propio sistema de ficheros, con su propio espacio de usuarios y procesos, y sus propias interfaces de red... Es Modular ya que esta dividido en varios componentes. Es portable e inmutable utilizando la plataforma DockerHub . Su es lema \u201cBuild, Ship and Run, any app,\u201d . Lema Docker. Note Aunque un contenedor puede incluir cualquier n\u00famero de aplicaciones, lo habitual es que un contenedor contenga una sola aplicaci\u00f3n (y los programas necesarios para ponerse en marcha).","title":"Caracter\u00edsticas principales de Docker"},{"location":"013_Docker.html#arquitectura-docker","text":"Docker Engine (\"Motor\" del Gestor Docker) : el cual basado en la arquitectura de Cliente-Servidor (que pueden estar en la misma m\u00e1quina, o en distintas), y realizada por mediante una API de REST que utiliza HTTP . API REST : interfaz de programaci\u00f3n con un estilo de arquitectura software para sistemas hipermedia distribuidos como la World Wide Web . \"Daemon Docker\" (Servicio) : lleva a cabo Gesti\u00f3n y enlace de los componentes del gestor. Im\u00e1genes : Las im\u00e1genes son una especie de plantillas que contienen como m\u00ednimo todo el software que necesita la aplicaci\u00f3n para ponerse en marcha. est\u00e1n formadas por una colecci\u00f3n ordenada de: Sistemas Archivos ; Repositorios ; Comandos ; Par\u00e1metros ; Aplicaciones . Contenedores : son el conjunto de procesos que encapsulan e identifican a una Imagen. Pueden ser: Creado, inicializado, parado, vuelto a ejecutar y destruido. Registros son im\u00e1genes son guardadas en registros para: Almacenar o Distribuir. Se realiza en Docker Hub y pueden ser P\u00fablicos y Privados. Componentes de Docker. Note El componente b\u00e1sico de Docker es el Docker Engine , pero Docker ofrece tambi\u00e9n una serie de herramientas para administrar, distribuir e instalar contenedores: Docker Compose , Docker Swarm . Las im\u00e1genes se pueden crear a partir de otras im\u00e1genes m\u00e1s b\u00e1sicas incluyendo software adicional en forma de capas. Todos los contenedores creados a partir de una imagen contienen el mismo software, aunque en el momento de su creaci\u00f3n se pueden personalizar algunos detalles","title":"Arquitectura Docker"},{"location":"013_Docker.html#microservicios","text":"Uno de los objetivos principales de la configuraci\u00f3n e implantaci\u00f3n con Docker es es solucionar los problemas de: Errores de dependencias entre diferentes Sistemas Operativos de los trabajadores y m\u00e1quinas de puesta en marcha. Evitar la Elevada carga y capacidad de las M\u00e1quinas Virtuales. Caida de todos los servicios instalados de forma monol\u00edtica en los servidores. Tipos de despliegue: Monol\u00edtico \u2192 Todos los servicios en la misma m\u00e1quina. SOA (Service Oriented Architecture) \u2192 Diferentes M\u00e1quinas una con cada Servicio conectadas. MicroServicios \u2192Divisi\u00f3n m\u00e1s peque\u00f1a de los servicios. Momol\u00edtico Vs Microservicios.","title":"Microservicios"},{"location":"013_Docker.html#instalacion","text":"Para la Instalaci\u00f3n de Docker es recomendable seguir la documentaci\u00f3n oficial. Adem\u00e1s se recomienda Instalar m\u00e1quina Ubuntu Server \u00faltima versi\u00f3n e instalar Docker en ella. Docker for Mac: Instalaci\u00f3n Mac Docker for Windows: Instalaci\u00f3n Windows Docker for ubuntu: Instalaci\u00f3n Ubuntu Warning Docker empez\u00f3 estando disponible solamente para distribuciones GNU/Linux, pero desde junio de 2016 tambi\u00e9n est\u00e1 disponible como aplicaci\u00f3n nativa en Windows Server 2016 y Windows 10. Docker utiliza la virtualizaci\u00f3n ofrecida por el sistema operativo. En el caso de Windows 10, eso significa que para usar Docker de forma nativa hay que activar Hyper-V que, por desgracia, es incompatible con VirtualBox. Para poder utilizar Docker en Windows 7 o en Windows 10 sin Hyper-V , Docker ofrece desde agosto de 2015 Docker Toolbox , que realmente es una m\u00e1quina virtual (que se ejecuta en VirtualBox) que contiene Docker.","title":"Instalaci\u00f3n"},{"location":"013_Docker.html#principales-comandos","text":"A continuaci\u00f3n se muestran los comandos m\u00e1s utilizados: Comando Acci\u00f3n Comando Acci\u00f3n docker info obtener informaci\u00f3n relativa a docker docker start (docker container start) inicia la ejecuci\u00f3n docker run (docker container run) crea y ejecuta el contenedor docker rm (docker container eliminar) elimina el contenedor docker build crea una imagen docker cp (docker container copiar) docker ps muestra la lista de contenedores creados docker logs (docker container logs) muestra los errores docker inspect (docker container inspect) informaci\u00f3n detallada de los contenedores docker stats (docker container stats) muestra el estado docker stop (docker container stop) detiene la ejecuci\u00f3n del contenedor docker system prune limpiar todo el sistena de contenedores im\u00e1genes y volumenes Chuleta de Comandos Chuleta Docker.","title":"Principales Comandos"},{"location":"013_Docker.html#primer-contenedor","text":"A continuaci\u00f3n se muestra un ejemplo guiado de la creaci\u00f3n del contenedor \"Hello World\" Comprobaci\u00f3n que inicialmente no hay ning\u00fan contenedor creado (la opci\u00f3n -a hace que se muestren tambi\u00e9n los contenedores detenidos, sin ella se muestran s\u00f3lo los contenedor que est\u00e9n en marcha): sudo docker ps -a o tambi\u00e9n sudo docker container ls -a Compruebe que inicialmente tampoco disponemos de ninguna imagen: sudo docker image ls Note Docker crea los contenedores a partir de im\u00e1genes locales (ya descargadas), pero si al crear el contenedor no se dispone de la imagen local, Docker descarga la imagen de su repositorio. La orden m\u00e1s simple para crear un contenedor sigue esta estructura: sudo docker run IMAGEN Example sudo docker run hello-world Note Como no tenemos todav\u00eda la imagen en nuestro ordenador, Docker descarga la imagen, crea el contenedor y lo pone en marcha. En este caso, la aplicaci\u00f3n que contiene el contenedor hello-world simplemente escribe un mensaje de salida al arrancar e inmediatamente se detiene el contenedor. Si listamos de nuevo imagenes y contenedores, las veremos creadas. Cada contenedor tiene un identificador (ID) y un nombre distinto. Docker \"bautiza\" los contenedores con un \" nombre peculiar \", compuesto de un adjetivo y un apellido. Podemos crear tantos contenedores como queramos a partir de una imagen. Una vez la imagen est\u00e1 disponible localmente, Docker no necesita descargarla y el proceso de creaci\u00f3n del contenedor es inmediato (aunque en el caso de hello-world la descarga es r\u00e1pida, con im\u00e1genes m\u00e1s grandes la descarga inicial puede tardar un rato). Tip Normalmente se aconseja usar siempre la opci\u00f3n -d , que arranca el contenedor en segundo plano ( detached ) y permite seguir teniendo acceso a la shell (aunque con hello-world no es estrictamente necesario porque el contenedor hello-world se detiene autom\u00e1ticamente tras mostrar el mensaje). Al crear el contenedor hello-world con la opci\u00f3n -d no se muestra el mensaje, simplemente muestra el identificador completo del contenedor. Los contenedores se pueden destruir mediante el comando rm, haciendo referencia a ellos mediante su nombre o su id. No es necesario indicar el id completo , basta con escribir los primeros caracteres (de manera que no haya ambig\u00fcedades). Adem\u00e1s podemos dar nombre a los contenedores al crearlos: sudo docker run -d --name=hola-1 hello-world","title":"Primer Contenedor"},{"location":"013_Docker.html#volumenes","text":"Docker simplifica enormemente la creaci\u00f3n de contenedores, y eso lleva a tratar los contenedores como un elemento ef\u00edmero , que se crea cuando se necesita y que no importa que se destruya puesto que puede ser reconstruido una y otra vez a partir de su imagen. Warning Pero si la aplicaci\u00f3n o aplicaciones incluidas en el contenedor generan datos y esos datos se guardan en el propio contenedor, en el momento en que se destruyera el contenedor perder\u00edamos esos datos . El objetivo principal de los volumenes es no perder datos si borro el contenedor y mejorar rendimiento del Docker . Para conseguir la persistencia de los datos, se pueden emplear dos t\u00e9cnicas: Los directorios enlazados (bind) , en la que la informaci\u00f3n se guarda fuera de Docker, en la m\u00e1quina host (por ejemplo si lo ejecutamos en la m\u00e1quina virtual de Ubuntu o la m\u00e1quina f\u00edsica de Lliurex en clase). Los vol\u00famenes , en la que la informaci\u00f3n se guarda mediante Docker, pero en unos elementos llamados vol\u00famenes , independientes de las im\u00e1genes y los contenedores. Adem\u00e1s los volumens se pueden catalogar en dos tipos. Volu\u0301menes de Datos : es como si montar\u00e1 un disco en el contenedor y por defecto se realizan en un path temporal. Volu\u0301menes de Host : Mismo concepto pero indic\u00e1ndole el path. Tip Aconsejable utilizar la t\u00e9cnica de volumenes , ya que, La ventaja frente a los directorios enlazados es que pueden ser gestionados por Docker. Otro detalle importante es que el acceso al contenido de los vol\u00famenes s\u00f3lo se puede hacer a trav\u00e9s de alg\u00fan contenedor que utilice el volumen.","title":"Vol\u00famenes"},{"location":"013_Docker.html#ventajas-volumenes","text":"Los vol\u00famenes tienen varias ventajas sobre los directorios enlazados: Los vol\u00famenes son m\u00e1s f\u00e1ciles de respaldar o migrar que enlazar montajes. Puede administrar vol\u00famenes mediante los comandos de la CLI de Docker o la API de Docker. Los vol\u00famenes funcionan tanto en contenedores de Linux como de Windows. Los vol\u00famenes se pueden compartir de forma m\u00e1s segura entre varios contenedores. Los controladores de volumen le permiten almacenar vol\u00famenes en hosts remotos o proveedores en la nube, para cifrar el contenido de los vol\u00famenes o para agregar otras funciones. Los nuevos vol\u00famenes pueden tener su contenido precargado por un contenedor. Los vol\u00famenes en Docker Desktop tienen un rendimiento mucho mayor que los directorios enlazados de hosts de Mac y Windows. Note Adem\u00e1s, los vol\u00famenes suelen ser una mejor opci\u00f3n que los datos persistentes en la capa de escritura de un contenedor, porque un volumen no aumenta el tama\u00f1o de los contenedores que lo usan y el contenido del volumen existe fuera del ciclo de vida de un contenedor determinado. Gr\u00e1fico t\u00e9cnicas de persistencia de datos. Note Los vol\u00famenes son independientes de los contenedores, por lo que tambi\u00e9n podemos conservar los datos aunque se destruya el contenedor, reutilizarlos con otro contenedor, etc.","title":"Ventajas Vol\u00famenes"},{"location":"013_Docker.html#opciones","text":"Opciones: ` Docker volume (create|Is|inspect|rm)` para crear el volumen a la vez que creamos y ejecutamos un contenedor se utilzan las opciones v o --mount En general, --mount m\u00e1s expl\u00edcito y detallado. La mayor diferencia es que la sintaxis de -v combina todas las opciones juntas en un campo, mientras que la sintaxis --mount las separa. A continuaci\u00f3n se muestra una comparaci\u00f3n de la sintaxis de cada \"flag\". -v o --volume : consta de tres campos, separados por dos puntos ( :). Los campos deben estar en el orden correcto y el significado de cada campo no es inmediatamente obvio. En el caso de vol\u00famenes con nombre, el primer campo es el nombre del volumen y es \u00fanico en una m\u00e1quina host determinada. Para vol\u00famenes an\u00f3nimos, se omite el primer campo. El segundo campo es la ruta donde se monta el archivo o directorio en el contenedor. El tercer campo es opcional y es una lista de opciones separadas por comas, como ro (readonly). --mount : Consta de varios pares clave-valor, separados por comas (cada uno formado por una = dupla). La sintaxis de --mount es m\u00e1s detallada que -v o --volume ; adem\u00e1s el orden de las claves no es significativo, por lo tanto el valor de las \"flags\" son m\u00e1s f\u00e1ciles de entender. Valores de las duplas: type : puede ser bind , volume o tmpfs . source : Para vol\u00famenes con nombre, este es el nombre del volumen. Para vol\u00famenes an\u00f3nimos, este campo se omite. Puede especificarse como source o src. destination : toma como valor de la ruta en el archivo o directorio est\u00e1 montado en el contenedor. Puede ser especificado como destination, dst o target . readonly : si est\u00e1 presente, hace que el montaje de enlace se monte en el contenedor como de solo lectura. Puede especificarse como readonly o ro . volume-opt se puede especificar m\u00e1s de una vez, toma un par clave-valor que consta del nombre de la opci\u00f3n y su valor. Ejemplo: volume-opt=type=nfs Note Todas las opciones de vol\u00famenes est\u00e1n disponibles para los indicadores --mount y -v , por que a la hora de elegir uno u otro depende del t\u00e9cnico para su facilidad de configuraci\u00f3n donde por su sintaxis a priori ser\u00eda mejor --mount .","title":"Opciones"},{"location":"013_Docker.html#ejemplo","text":"A continuaci\u00f3n se muestra un ejemplo de creaci\u00f3n del servidor web NGINX. Example docker run -d \\ --name nginx1 -p 8080:80 \\ --mount type=volume,source=myvol1,target=/usr/share/nginx/html \\ nginx:latest Note Si en lugar de la opci\u00f3n -p 8080:80 se utiliza la opci\u00f3n -P hace que Docker asigne de forma aleatoria un puerto de la m\u00e1quina virtual al puerto asignado a Nginx en el contenedor. Si se creara una p\u00e1gina de incio del apache diferente a la de defecto podr\u00edamos copiarla en el volumen y esta cambiar\u00eda: nano index.html Nueva p\u00e1gina de inicio: <!DOCTYPE html> <html lang=\"es\"> <head> <meta charset=\"utf-8\"> <title>Apache en Docker</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> </head> <body> <h1>\u00a1Hola de nuevo, Mundo!</h1> </body> </html> Para cambiar la p\u00e1gina de inicio del apache se debe copiar dentro del volumen creado. docker cp index.html nginx1:/usr/share/nginx/html Si accedemos al servidor apache aparecer\u00e1 la nueva p\u00e1gina. Warning Si aparece el error forbiden 403, es debido a permisos del index.html, debemos entrar en container y cambiar los permisos. docker exec -it nginx1 /bin/bash cd /usr/share/nginx/html chown -R root:root index.html Adem\u00e1s podemos crear un nuevo contenedor con este volumen: docker run -d \\ --name nginx2 -p 8080:80 \\ --mount type=volume,source=myvol1,target=/usr/share/nginx/html \\ nginx:latest Se comprueba que el nuevo contenedor muestra la nueva p\u00e1gina index.html Warning Si se intenta borrar el volumen del ejemplo anterior mientras los contenedores est\u00e1n en marcha, Docker muestra un mensaje de error que indica los contenedores afectados .","title":"Ejemplo"},{"location":"013_Docker.html#redes","text":"Cuando se crean diferentes servicios o aplicaciones en contenedores distintos (siguiendo la premisa de microservicios), estos no estas conectados entre s\u00ed, en el caso que necesitar\u00e1n conexi\u00f3n se utilizar\u00edan \"redes Docker\". Este mecanismo funciona de manera distinta seg\u00fan la red docker donde est\u00e9n conectados los contenedores. Representaci\u00f3n Redes Docker.","title":"Redes"},{"location":"013_Docker.html#opciones-y-tipos","text":"Opciones: docker network (create | Is | inspect | rm) A continuaci\u00f3n se introducen los distintos tipos de redes que nos ofrece docker: Bridge \u2192 por defecto. Todos los contenedores est\u00e1n en la misma red, separada del Host. Host \u2192 Cuando quiero que los contenedores est\u00e9n en mi misma red. None \u2192 contenedores aislados. Escenario de ejemplo de una Red Docker. Warning El uso de contenedores conectados a la red por defecto no est\u00e1 recomendado en entornos de producci\u00f3n. se podr\u00edan enlazar contenedores con el bridge por defecto con el flag --link . Tip La opci\u00f3n recomendable es definir una red bridge y crear los contenedores conectados a dicha red. El mayor problema es que ambos contenedores compartir\u00edan las variables de entorno y esto puede causar problemas de desarrollo. Por ejemplo: docker network create mired Se crean los contenedores conectados a dicha red: docker run -d --name servidor_mysql --network mired \\ -e MYSQL_DATABASE=bd_wp -e MYSQL_USER=user_wp -e MYSQL_PASSWORD=asdasd \\ -e MYSQL_ROOT_PASSWORD=asdasd mariadb docker run -d --name servidor --network mired javierhernandez/aplicacionweb:v1 Note En este caso no se comparten las variables de entorno.","title":"Opciones y tipos"},{"location":"013_Docker.html#tools","text":"Existen dos opciones destacables en Docker para agilizar el despliegue de Imagenes y contenedores: Dockerfile y Docker-compose Dockerfile : es un archivo de texto plano que contiene una serie de instrucciones necesarias para crear una imagen que, posteriormente, se convertir\u00e1 en una sola aplicaci\u00f3n utilizada para un determinado prop\u00f3sito. Summary Im\u00e1genes\u2192 docker build \u2192 docker_file Docker-compose : es una herramienta que permite simplificar el uso de Docker. A partir de archivos YAML es mas sencillo crear contendores, conectarlos, habilitar puertos, volumenes, etc. Summary Contenedores\u2192 docker run \u2192 docker_compose.yml","title":"Tools"},{"location":"013_Docker.html#dockerfile","text":"Las instrucciones principales que pueden utilizarse en un Dockerfile son: Ver tambi\u00e9n: Best practices for writing Dockerfiles Example A continuaci\u00f3n se muestra un ejemplo para la realizaci\u00f3n de la pr\u00e1ctica de ampliaci\u00f3n extraido de Apache oficial de docker . Primer paso : generar imagen con un Dockerfile . Se crea el archivo de texto dockerfile. mkdir docker touch dockerfile nano dockerfile Ejemplo edici\u00f3n Dockerfile. # syntax=docker/dockerfile:1 FROM nginx:alpine RUN apk update COPY index.html/ /usr/share/nginx/html/ Nota Se puede probar a introducir el volumen en el docker file: VOLUME /myvol1 Se crea la imagen y el contenedor. docker build -t franciscojav1981/my-nginx . docker run -dit --name my-nginx -p 8081:80 franciscojav1981/my-nginx Warning Mucho cuidado con el \u00faltimo punto de la instucci\u00f3n de build, tiene un espacio antes. Es el \u00faltimo argumento (y el \u00fanico imprescindible) es el nombre del archivo Dockerfile que tiene que utilizar para generar la imagen. Como en este caso se encuentra en el mismo directorio y tiene el nombre predeterminado Dockerfile, se puede escribir simplemente punto ( . ). Para indicar el nombre de la imagen se debe a\u00f1adir la opci\u00f3n -t . El nombre de la imagen debe seguir el patr\u00f3n nombre-de-usuario/nombre-de-imagen . Si la imagen s\u00f3lo se va a utilizar localmente, el nombre de usuario y de la imagen pueden ser cualquier palabra. Segundo paso : subir imagen al Docker Hub. Se debe generar una cuenta de Docker Hub con la cuenta corporativa de Office 365: Sign Up Con el comando docker login , se realiza el acceso a la plataforma desde el terminal, introduciendo usuario y contrase\u00f1a. docker login Con el comando docker push , se realiza el \"Upload\" de la imagen. docker push franciscojav1981/my-nginx Por \u00faltimo Se debe comprobar accediendo a la platadorma de Docker Hub.","title":"Dockerfile"},{"location":"013_Docker.html#docker-compose","text":"Docker-compose es otro proyecto open source que permite definir aplicaciones muilti-contenedor de una manera sencilla y declarativa. Es una alternativa m\u00e1s c\u00f3moda al uso de los comandos docker run y docker build, que resultan un tanto tediosos cuando trabajamos con aplicaciones de varios componentes. Se define un fichero docker-compose.yml que se puede observar en el ejemplo realizado en la pr\u00e1ctica en el \u00faltimo apartado. Example A continuaci\u00f3n se muestra un ejemplo para la realizaci\u00f3n de la pr\u00e1ctica de ampliaci\u00f3n: Instalaci\u00f3n Wordpress Primer Paso : instalaci\u00f3n de Docker-compose. Install Docker Compose Segundo paso : Crear directorio del proyecto y dentro el archivo yaml . mkdir my_wordpress touch docker-compose.yml nano docker-compose.yml 3. Tercer paso : se edita el yaml . version : \"3.9\" services : db : image : mysql:5.7 volumes : - db_data:/var/lib/mysql restart : always environment : MYSQL_ROOT_PASSWORD : somewordpress MYSQL_DATABASE : wordpress MYSQL_USER : wordpress MYSQL_PASSWORD : wordpress wordpress : depends_on : - db image : wordpress:latest volumes : - wordpress_data:/var/www/html ports : - \"8000:80\" restart : always environment : WORDPRESS_DB_HOST : db:3306 WORDPRESS_DB_USER : wordpress WORDPRESS_DB_PASSWORD : wordpress WORDPRESS_DB_NAME : wordpress volumes : db_data : {} wordpress_data : {} Cuarto paso : en la carpeta creada del proyecto se ejecuta el comando de docker-compose up -d docker-compose up -d Por \u00faltimo Se comprueba que se ha creado el contenedor. Cuidado.","title":"Docker-compose"},{"location":"021_Introduccion_SD.html","text":"Administraci\u00f3n de servicios de directorio \u00b6 Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 3 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje y Criterios de evaluaci\u00f3n: Administra el servicio de directorio interpretando especificaciones e integr\u00e1ndolo en una red. Se han identificado la funci\u00f3n, los elementos y las estructuras l\u00f3gicas del servicio de directorio. Se ha determinado y creado el esquema del servicio de directorio. Se ha realizado la instalaci\u00f3n del servicio de directorio en el servidor. Se ha realizado la configuraci\u00f3n y personalizaci\u00f3n del servicio de directorio. Se ha integrado el servicio de directorio con otros servicios. Se han aplicado filtros de b\u00fasqueda en el servicio de directorio. Se ha utilizado el servicio de directorio como mecanismo de acreditaci\u00f3n centralizada de los usuarios en una red. Se ha realizado la configuraci\u00f3n del cliente para su integraci\u00f3n en el servicio de directorio. Se han utilizado herramientas gr\u00e1ficas y comandos para la administraci\u00f3n del servicio de directorio. Se ha documentado la estructura e implantaci\u00f3n del servicio de directorio. Introducci\u00f3n \u00b6 La organizaci\u00f3n de una red de trabajo empresarial supone un reto organizativo que el administrador del sistema debe afrontar con garantias de \u00e9xito. Para ello dispone de herramientas organizativas como los servicios de directorio, tanto SAMBA como Active Directory , ambas basadas en el protocolo LDAP , las cuales ofrecen una amplia gama de herramientas que facilitan la organizaci\u00f3n de recursos de una red. Note Si no se concibe un ordenador sin sistema operativo que lo administre, tampoco debe existir una red de cierta entidad sin sistema operativo de red que la gestione. En definitiva, un sistema operativo de red (SOR en lo sucesivo) , est\u00e1 dise\u00f1ado para administrar redes y todos los elementos que la componen. Sus tareas m\u00e1s importantes son: La gesti\u00f3n centralizada de los recursos. Ofrecer servicios a los clientes. Proporcionar acceso seguro a esos recursos y monitorizar todo lo que pasa en la red. Arquitectura de Redes \u00b6 Los sistemas operativos en red pueden catalogarse en distribuidos y centralizados. Los primeros se componen de un software que controla todos los equipos inform\u00e1ticos de foma distribuido en modo \"cluster\" . Un ejemplo es el SO llamado Amoeba de A.S.Tanenbaum . Se utilizan en despliegues espec\u00edficos que no competen en este m\u00f3dulo. por lo tanto a continuaci\u00f3n se desarrollaran los centralizados. Estructura Red plana \u00b6 Antes del desarrollo de las herramientas de los servicios de red, se comenz\u00f3 a desarrollar la Estructura trabajo en grupo , la cual trataba la red en modo plano. Una red plana, entre iguales o punto a punto , es aquella en la ninguno de los equipos realiza tareas de administraci\u00f3n de la red, sino tan s\u00f3lo de s\u00ed mismo. No existe un equipo que haga las veces de administrador, por lo que en realidad, todos los clientes se convierten en administradores de los recursos que ofrecen a la red. Example Si un cliente decide compartir un recuso, \u00e9ste estar\u00e1 disponible para todos los miembros de la red sin distinci\u00f3n. Si es necesario limitar el acceso a un subconjunto de usuarios, habr\u00e1 que establecer una contrase\u00f1a y hac\u00e9rsela llegar a trav\u00e9s de un medio seguro. Introducci\u00f3n de un equipo a un grupo de trabajo Warning Si cada uno de los usuarios empieza a compartir recursos sin control, su localizaci\u00f3n puede ser una tarea complicada, ya que los usuarios de la red deben conocer en todo momento su distribuci\u00f3n y configuraci\u00f3n. La localizaci\u00f3n puede suponer un grave problema. Microsoft introdujo en sus sistemas operativos la posibilidad de crear grupos de trabajo que divid\u00edan la red en subconjuntos. De este modo, si se sabe a qu\u00e9 grupo pertenece el equipo que comparte un recurso ser\u00e1 m\u00e1s sencillo su localizaci\u00f3n. Estas divisiones se realizaban por funciones, por ubicaci\u00f3n f\u00edsica o por cualquier otro criterio de la empresa. Warning Resultaba m\u00e1s sencillo localizar recursos, pero no solucionaban el problema de acceso . Este sistema de organizaci\u00f3n de red presenta numerosos problemas de seguridad. Estructura cliente-servidor \u00b6 Se trata de un modelo de aplicaci\u00f3n centralizada en el que las tareas se dividen entre los proveedores de recursos o servicios. A estas m\u00e1quinas se las conoce como servidores y a los equipos que demandan estos servicios se les conoce como clientes . Esquema de red cliente servidor En este tipo de redes: Los clientes est\u00e1n conectados a un servidor en el que se centralizan los recursos y servicios con que se cuenta la red. El servidor es el encargado de ponerlos a disposici\u00f3n de los clientes cada vez que estos son solicitados. Por lo tanto, todas las gestiones que se realizan se concentran en el servidor, lo que facilita la localizaci\u00f3n de los recurso de una forma sencilla. Warning Sin embargo, agregar un segundo servidor puede complicar las cosas de manera significativa. El problema surge porque cada servidor individual mantiene su propia lista de usuarios y recursos. El servidor A ofrece alojamiento a aplicaciones, el servidor B al correo electr\u00f3nico y las aplicaciones de contabilidad y la base de datos se encuentran en el servidor C . Red cliente-servidor con varios servidores. Los usuarios que requieren acceso a la base de datos y utilizar las aplicaciones, necesitan una cuenta en dos se los tres servidores. Cada una de esas cuentas de usuarios debe ser creada y mantenida de manera separada. Es f\u00e1cil para los servidores perder sincron\u00eda cuando deben ser actualizados manualmente. Note Estas y otras cuestiones ser\u00e1n resueltas con el siguiente modo de organizaci\u00f3n de red. Servicios de directorio \u00b6 los servicios de directorios , son un conjunto de aplicaciones que guardan y administran toda la informaci\u00f3n sobre los elementos de una red. Cada recurso de la red se considera como un objeto , donde su informaci\u00f3n se almacena como atributos . Para la gesti\u00f3n de esta informaci\u00f3n, el servicio de directorio establece una serie de permisos de acceso y condiciones de seguridad que la salvaguardan esta informaci\u00f3n. Ofrecen una infraestructura para localizar, manejar, administrar, y organizar los componentes y recursos comunes de una red. Note Los recursos pueden ser: vol\u00famenes, carpetas, archivos, impresoras, usuarios, grupos, dispositivos, n\u00fameros de tel\u00e9fono y un largo etc\u00e9tera. Los servicios de directorios contienen diferentes objetos relacionados entre s\u00ed, y que ser\u00e1 conveniente familiarizarse con ellos: Directorio , es un repositorio \u00fanico para la informaci\u00f3n relativa a los objetos de una organizaci\u00f3n. Dominio , es una colecci\u00f3n de objetos dentro de un directorio. Objeto , cualquiera de los elementos que forman parte del directorio. Pueden ser recursos, usuarios, equipos, relaciones de confianza, servidores, unidades organizativas entre otros. En general todos estos objetos se clasifican en tres categor\u00edas: usuarios , identificados a trav\u00e9s del binomio nombre/contrase\u00f1a y que pueden organizarse en grupos. recursos , elementos que los usuarios pueden usar para el correcto desarrollo de su actividad. servicios , que son funciones a los que el usuario tienen acceso como el correo electr\u00f3nico , copias de seguridad en la nube , conexi\u00f3n Internet entre otros . Unidad organizativa , es un contendedor de objetos que permite organizarlos en subconjuntos de forma jer\u00e1rquica. Facilita la organizaci\u00f3n de los dominios. Grupo , conjunto de objetos usuario. Al igual que las unidades organizativas, facilitan la organizaci\u00f3n y administraci\u00f3n de los objetos, los grupos lo hacen con objetos tipo usuario. Controlador de dominio , equipo que contiene la base de datos de objetos para un determinado dominio, incluida la informaci\u00f3n de seguridad y la responsabilidad de la autenticaci\u00f3n de objetos de su \u00e1mbito de gobierno. Cat\u00e1logo global , base de datos con la informaci\u00f3n de todos los objetos que contiene el directorio. Esta informaci\u00f3n habitualmente se divide entre los controladores de dominio siendo \u00e9stos responsables del mantenimiento de su parte de esta informaci\u00f3n. Maestro de operaciones , existen un conjunto de operaciones que deben estar centralizadas para mantener la consistencia del sistema. El equipo encargado de esas operaciones obtiene este rol espec\u00edfico. Seg\u00fan el caso puede ser un equipo independiente que controle estas operaciones o asignar estas tareas a un equipo existente. \u00c1rbol , un conjunto de dominios dependientes de una ra\u00edz com\u00fan y que tienen una estructura jer\u00e1rquica. Se caracterizan por tener un espacio de nombres com\u00fan (un servidor DNS propio). El objetivo de esta fragmentaci\u00f3n de la estructura es replicar s\u00f3lo la informaci\u00f3n necesaria y disminuir el tr\u00e1fico de red. Bosque , se trata del mayor contenedor l\u00f3gico dentro del directorio, conteniendo a todos los \u00e1rboles dentro de su \u00e1mbito. Cada uno de estos contenedores posee su propio espacio de nombres y una forma de relacionarse con el resto de bosques. Esquema , se refiere a la estructura de los objetos que forman la base de datos. Usa la t\u00e9cnica clase/objeto para definir la estructura de un objeto. Si se crean dos objetos usuarios, ambos tendr\u00e1n los mismos atributos (estructura), pero diferentes valores de atributos. Sitio , conjunto de objetos equipo que se encuentran relacionados de una forma l\u00f3gica, geogr\u00e1fica o t\u00e9cnica particular y que necesitan un subconjunto de normas diferentes al resto. Relaciones de confianza , son un m\u00e9todo de comunicaci\u00f3n segura entre dominios, \u00e1rboles y bosques, que permiten a los usuarios autentificarse en otra parte del directorio a la que no pertenece. Note Para nombrar a todos estos objetos que componen la red, los servicios de directorio definen un espacio de nombres un\u00edvoco, e identifican a cada uno de estos objetos con un nombre \u00fanico en todo el directorio. La tecnolog\u00eda utilizada para crear este espacio de nombres es la DNS (Domain Name Server) , y su funcionamiento es similar al de Internet. Cada uno de los objetos del directorio posee un DN (Distinguished Name) que lo identifica de forma un\u00edvoca del resto de elementos del directorio. Ventajas \u00b6 los servicios de directorio, ofrecen una capa de abstracci\u00f3n para facilitar el acceso a los objetos. Se debe indicar una \u00fanica ubicaci\u00f3n en donde se dirigir\u00e1n las peticiones de informaci\u00f3n. No importa si la informaci\u00f3n solicitada se encuentra o no en ese emplazamiento. Autonom\u00eda , Es posible que toda la informaci\u00f3n no est\u00e9 contenida en un \u00fanico equipo por cuestiones de rendimiento, escalabilidad o idiosincrasia del sistemas inform\u00e1tico. En estos casos crear un subconjunto de la informaci\u00f3n contenida en los servicios de directorio parece una buena opci\u00f3n y dotarlos de las herramientas necesarias para su gesti\u00f3n aut\u00f3noma. Si se permite el s\u00edmil, es el Google del sistema inform\u00e1tico que se gestiona. Servicios de directorio destacables \u00b6 Active Directory , ideado por Microsoft e implementado desde su versi\u00f3n Microsoft Windows 2000 que usaba tecnolog\u00eda propietaria, para m\u00e1s tarde adaptar el protocolo LDAP a su servicio. OpenLDAP , recibe el nombre del protocolo hom\u00f3nimo que gestiona el intercambio de informaci\u00f3n. Es uno de los m\u00e1s usados en sistemas basados en GNU/Linux . SambaLDAP , un servicio compuesto por un conjunto de protocolos ( OpenLDAP , Kerberos y Samba ) que permite la f\u00e1cil coexistencia de entre sistemas operativos diferentes. Otros: Novell Directory Services , Red Hat Directory Server o Apache Directory Server . Note En resumen , un servicio de directorio ofrece toda la informaci\u00f3n de los recursos de la red a trav\u00e9s de una \u00fanica ubicaci\u00f3n. Para ello convierte cada recurso en un objeto y almacena su informaci\u00f3n en una base de datos jer\u00e1rquica y, opcionalmente, distribuida. La gesti\u00f3n de estos datos se realiza a trav\u00e9s de un protocolo determinado por la versi\u00f3n del servicio de directorio escogido. Protocolo LDAP \u00b6 El LDAP (Lightweight Directory Access Protocol) es un protocolo a nivel de aplicaci\u00f3n que da acceso a un servicio de directorio ordenado y distribuido para la b\u00fasqueda de la informaci\u00f3n de un entrono de red. En la d\u00e9cada de los 80, la especificaci\u00f3n de directorio X.500 vio la luz. El protocolo que daba acceso a la informaci\u00f3n contenida en \u00e9l, fue DAP (Directory Access Protocol) y estaba basado en la pila de protocolos OSI (Open Systems Interconexion). Gracias al auge de Internet, la pila de protocolos TCP/IP cobraron especial protagonismo y su uso fue generalizado en cualquier infraestructura de red, incluidas las LAN. Ante esta situaci\u00f3n, en 1993 se implement\u00f3 el protocolo LDAP que utilizaba la pila de protocolos TCP/IP para el acceso a la informaci\u00f3n contenido en un servicio de directorio. El funcionamiento de LDAP es relativamente simple : un cliente se inicia una sesi\u00f3n en un servidor LDAP solicitando alguna informaci\u00f3n. Esquema de funcionamiento del protocolo LDAP","title":"2.1- Introducci\u00f3n de servicios de directorio"},{"location":"021_Introduccion_SD.html#administracion-de-servicios-de-directorio","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 3 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje y Criterios de evaluaci\u00f3n: Administra el servicio de directorio interpretando especificaciones e integr\u00e1ndolo en una red. Se han identificado la funci\u00f3n, los elementos y las estructuras l\u00f3gicas del servicio de directorio. Se ha determinado y creado el esquema del servicio de directorio. Se ha realizado la instalaci\u00f3n del servicio de directorio en el servidor. Se ha realizado la configuraci\u00f3n y personalizaci\u00f3n del servicio de directorio. Se ha integrado el servicio de directorio con otros servicios. Se han aplicado filtros de b\u00fasqueda en el servicio de directorio. Se ha utilizado el servicio de directorio como mecanismo de acreditaci\u00f3n centralizada de los usuarios en una red. Se ha realizado la configuraci\u00f3n del cliente para su integraci\u00f3n en el servicio de directorio. Se han utilizado herramientas gr\u00e1ficas y comandos para la administraci\u00f3n del servicio de directorio. Se ha documentado la estructura e implantaci\u00f3n del servicio de directorio.","title":"Administraci\u00f3n de servicios de directorio"},{"location":"021_Introduccion_SD.html#introduccion","text":"La organizaci\u00f3n de una red de trabajo empresarial supone un reto organizativo que el administrador del sistema debe afrontar con garantias de \u00e9xito. Para ello dispone de herramientas organizativas como los servicios de directorio, tanto SAMBA como Active Directory , ambas basadas en el protocolo LDAP , las cuales ofrecen una amplia gama de herramientas que facilitan la organizaci\u00f3n de recursos de una red. Note Si no se concibe un ordenador sin sistema operativo que lo administre, tampoco debe existir una red de cierta entidad sin sistema operativo de red que la gestione. En definitiva, un sistema operativo de red (SOR en lo sucesivo) , est\u00e1 dise\u00f1ado para administrar redes y todos los elementos que la componen. Sus tareas m\u00e1s importantes son: La gesti\u00f3n centralizada de los recursos. Ofrecer servicios a los clientes. Proporcionar acceso seguro a esos recursos y monitorizar todo lo que pasa en la red.","title":"Introducci\u00f3n"},{"location":"021_Introduccion_SD.html#arquitectura-de-redes","text":"Los sistemas operativos en red pueden catalogarse en distribuidos y centralizados. Los primeros se componen de un software que controla todos los equipos inform\u00e1ticos de foma distribuido en modo \"cluster\" . Un ejemplo es el SO llamado Amoeba de A.S.Tanenbaum . Se utilizan en despliegues espec\u00edficos que no competen en este m\u00f3dulo. por lo tanto a continuaci\u00f3n se desarrollaran los centralizados.","title":"Arquitectura de Redes"},{"location":"021_Introduccion_SD.html#estructura-red-plana","text":"Antes del desarrollo de las herramientas de los servicios de red, se comenz\u00f3 a desarrollar la Estructura trabajo en grupo , la cual trataba la red en modo plano. Una red plana, entre iguales o punto a punto , es aquella en la ninguno de los equipos realiza tareas de administraci\u00f3n de la red, sino tan s\u00f3lo de s\u00ed mismo. No existe un equipo que haga las veces de administrador, por lo que en realidad, todos los clientes se convierten en administradores de los recursos que ofrecen a la red. Example Si un cliente decide compartir un recuso, \u00e9ste estar\u00e1 disponible para todos los miembros de la red sin distinci\u00f3n. Si es necesario limitar el acceso a un subconjunto de usuarios, habr\u00e1 que establecer una contrase\u00f1a y hac\u00e9rsela llegar a trav\u00e9s de un medio seguro. Introducci\u00f3n de un equipo a un grupo de trabajo Warning Si cada uno de los usuarios empieza a compartir recursos sin control, su localizaci\u00f3n puede ser una tarea complicada, ya que los usuarios de la red deben conocer en todo momento su distribuci\u00f3n y configuraci\u00f3n. La localizaci\u00f3n puede suponer un grave problema. Microsoft introdujo en sus sistemas operativos la posibilidad de crear grupos de trabajo que divid\u00edan la red en subconjuntos. De este modo, si se sabe a qu\u00e9 grupo pertenece el equipo que comparte un recurso ser\u00e1 m\u00e1s sencillo su localizaci\u00f3n. Estas divisiones se realizaban por funciones, por ubicaci\u00f3n f\u00edsica o por cualquier otro criterio de la empresa. Warning Resultaba m\u00e1s sencillo localizar recursos, pero no solucionaban el problema de acceso . Este sistema de organizaci\u00f3n de red presenta numerosos problemas de seguridad.","title":"Estructura Red plana"},{"location":"021_Introduccion_SD.html#estructura-cliente-servidor","text":"Se trata de un modelo de aplicaci\u00f3n centralizada en el que las tareas se dividen entre los proveedores de recursos o servicios. A estas m\u00e1quinas se las conoce como servidores y a los equipos que demandan estos servicios se les conoce como clientes . Esquema de red cliente servidor En este tipo de redes: Los clientes est\u00e1n conectados a un servidor en el que se centralizan los recursos y servicios con que se cuenta la red. El servidor es el encargado de ponerlos a disposici\u00f3n de los clientes cada vez que estos son solicitados. Por lo tanto, todas las gestiones que se realizan se concentran en el servidor, lo que facilita la localizaci\u00f3n de los recurso de una forma sencilla. Warning Sin embargo, agregar un segundo servidor puede complicar las cosas de manera significativa. El problema surge porque cada servidor individual mantiene su propia lista de usuarios y recursos. El servidor A ofrece alojamiento a aplicaciones, el servidor B al correo electr\u00f3nico y las aplicaciones de contabilidad y la base de datos se encuentran en el servidor C . Red cliente-servidor con varios servidores. Los usuarios que requieren acceso a la base de datos y utilizar las aplicaciones, necesitan una cuenta en dos se los tres servidores. Cada una de esas cuentas de usuarios debe ser creada y mantenida de manera separada. Es f\u00e1cil para los servidores perder sincron\u00eda cuando deben ser actualizados manualmente. Note Estas y otras cuestiones ser\u00e1n resueltas con el siguiente modo de organizaci\u00f3n de red.","title":"Estructura cliente-servidor"},{"location":"021_Introduccion_SD.html#servicios-de-directorio","text":"los servicios de directorios , son un conjunto de aplicaciones que guardan y administran toda la informaci\u00f3n sobre los elementos de una red. Cada recurso de la red se considera como un objeto , donde su informaci\u00f3n se almacena como atributos . Para la gesti\u00f3n de esta informaci\u00f3n, el servicio de directorio establece una serie de permisos de acceso y condiciones de seguridad que la salvaguardan esta informaci\u00f3n. Ofrecen una infraestructura para localizar, manejar, administrar, y organizar los componentes y recursos comunes de una red. Note Los recursos pueden ser: vol\u00famenes, carpetas, archivos, impresoras, usuarios, grupos, dispositivos, n\u00fameros de tel\u00e9fono y un largo etc\u00e9tera. Los servicios de directorios contienen diferentes objetos relacionados entre s\u00ed, y que ser\u00e1 conveniente familiarizarse con ellos: Directorio , es un repositorio \u00fanico para la informaci\u00f3n relativa a los objetos de una organizaci\u00f3n. Dominio , es una colecci\u00f3n de objetos dentro de un directorio. Objeto , cualquiera de los elementos que forman parte del directorio. Pueden ser recursos, usuarios, equipos, relaciones de confianza, servidores, unidades organizativas entre otros. En general todos estos objetos se clasifican en tres categor\u00edas: usuarios , identificados a trav\u00e9s del binomio nombre/contrase\u00f1a y que pueden organizarse en grupos. recursos , elementos que los usuarios pueden usar para el correcto desarrollo de su actividad. servicios , que son funciones a los que el usuario tienen acceso como el correo electr\u00f3nico , copias de seguridad en la nube , conexi\u00f3n Internet entre otros . Unidad organizativa , es un contendedor de objetos que permite organizarlos en subconjuntos de forma jer\u00e1rquica. Facilita la organizaci\u00f3n de los dominios. Grupo , conjunto de objetos usuario. Al igual que las unidades organizativas, facilitan la organizaci\u00f3n y administraci\u00f3n de los objetos, los grupos lo hacen con objetos tipo usuario. Controlador de dominio , equipo que contiene la base de datos de objetos para un determinado dominio, incluida la informaci\u00f3n de seguridad y la responsabilidad de la autenticaci\u00f3n de objetos de su \u00e1mbito de gobierno. Cat\u00e1logo global , base de datos con la informaci\u00f3n de todos los objetos que contiene el directorio. Esta informaci\u00f3n habitualmente se divide entre los controladores de dominio siendo \u00e9stos responsables del mantenimiento de su parte de esta informaci\u00f3n. Maestro de operaciones , existen un conjunto de operaciones que deben estar centralizadas para mantener la consistencia del sistema. El equipo encargado de esas operaciones obtiene este rol espec\u00edfico. Seg\u00fan el caso puede ser un equipo independiente que controle estas operaciones o asignar estas tareas a un equipo existente. \u00c1rbol , un conjunto de dominios dependientes de una ra\u00edz com\u00fan y que tienen una estructura jer\u00e1rquica. Se caracterizan por tener un espacio de nombres com\u00fan (un servidor DNS propio). El objetivo de esta fragmentaci\u00f3n de la estructura es replicar s\u00f3lo la informaci\u00f3n necesaria y disminuir el tr\u00e1fico de red. Bosque , se trata del mayor contenedor l\u00f3gico dentro del directorio, conteniendo a todos los \u00e1rboles dentro de su \u00e1mbito. Cada uno de estos contenedores posee su propio espacio de nombres y una forma de relacionarse con el resto de bosques. Esquema , se refiere a la estructura de los objetos que forman la base de datos. Usa la t\u00e9cnica clase/objeto para definir la estructura de un objeto. Si se crean dos objetos usuarios, ambos tendr\u00e1n los mismos atributos (estructura), pero diferentes valores de atributos. Sitio , conjunto de objetos equipo que se encuentran relacionados de una forma l\u00f3gica, geogr\u00e1fica o t\u00e9cnica particular y que necesitan un subconjunto de normas diferentes al resto. Relaciones de confianza , son un m\u00e9todo de comunicaci\u00f3n segura entre dominios, \u00e1rboles y bosques, que permiten a los usuarios autentificarse en otra parte del directorio a la que no pertenece. Note Para nombrar a todos estos objetos que componen la red, los servicios de directorio definen un espacio de nombres un\u00edvoco, e identifican a cada uno de estos objetos con un nombre \u00fanico en todo el directorio. La tecnolog\u00eda utilizada para crear este espacio de nombres es la DNS (Domain Name Server) , y su funcionamiento es similar al de Internet. Cada uno de los objetos del directorio posee un DN (Distinguished Name) que lo identifica de forma un\u00edvoca del resto de elementos del directorio.","title":"Servicios de directorio"},{"location":"021_Introduccion_SD.html#ventajas","text":"los servicios de directorio, ofrecen una capa de abstracci\u00f3n para facilitar el acceso a los objetos. Se debe indicar una \u00fanica ubicaci\u00f3n en donde se dirigir\u00e1n las peticiones de informaci\u00f3n. No importa si la informaci\u00f3n solicitada se encuentra o no en ese emplazamiento. Autonom\u00eda , Es posible que toda la informaci\u00f3n no est\u00e9 contenida en un \u00fanico equipo por cuestiones de rendimiento, escalabilidad o idiosincrasia del sistemas inform\u00e1tico. En estos casos crear un subconjunto de la informaci\u00f3n contenida en los servicios de directorio parece una buena opci\u00f3n y dotarlos de las herramientas necesarias para su gesti\u00f3n aut\u00f3noma. Si se permite el s\u00edmil, es el Google del sistema inform\u00e1tico que se gestiona.","title":"Ventajas"},{"location":"021_Introduccion_SD.html#servicios-de-directorio-destacables","text":"Active Directory , ideado por Microsoft e implementado desde su versi\u00f3n Microsoft Windows 2000 que usaba tecnolog\u00eda propietaria, para m\u00e1s tarde adaptar el protocolo LDAP a su servicio. OpenLDAP , recibe el nombre del protocolo hom\u00f3nimo que gestiona el intercambio de informaci\u00f3n. Es uno de los m\u00e1s usados en sistemas basados en GNU/Linux . SambaLDAP , un servicio compuesto por un conjunto de protocolos ( OpenLDAP , Kerberos y Samba ) que permite la f\u00e1cil coexistencia de entre sistemas operativos diferentes. Otros: Novell Directory Services , Red Hat Directory Server o Apache Directory Server . Note En resumen , un servicio de directorio ofrece toda la informaci\u00f3n de los recursos de la red a trav\u00e9s de una \u00fanica ubicaci\u00f3n. Para ello convierte cada recurso en un objeto y almacena su informaci\u00f3n en una base de datos jer\u00e1rquica y, opcionalmente, distribuida. La gesti\u00f3n de estos datos se realiza a trav\u00e9s de un protocolo determinado por la versi\u00f3n del servicio de directorio escogido.","title":"Servicios de directorio destacables"},{"location":"021_Introduccion_SD.html#protocolo-ldap","text":"El LDAP (Lightweight Directory Access Protocol) es un protocolo a nivel de aplicaci\u00f3n que da acceso a un servicio de directorio ordenado y distribuido para la b\u00fasqueda de la informaci\u00f3n de un entrono de red. En la d\u00e9cada de los 80, la especificaci\u00f3n de directorio X.500 vio la luz. El protocolo que daba acceso a la informaci\u00f3n contenida en \u00e9l, fue DAP (Directory Access Protocol) y estaba basado en la pila de protocolos OSI (Open Systems Interconexion). Gracias al auge de Internet, la pila de protocolos TCP/IP cobraron especial protagonismo y su uso fue generalizado en cualquier infraestructura de red, incluidas las LAN. Ante esta situaci\u00f3n, en 1993 se implement\u00f3 el protocolo LDAP que utilizaba la pila de protocolos TCP/IP para el acceso a la informaci\u00f3n contenido en un servicio de directorio. El funcionamiento de LDAP es relativamente simple : un cliente se inicia una sesi\u00f3n en un servidor LDAP solicitando alguna informaci\u00f3n. Esquema de funcionamiento del protocolo LDAP","title":"Protocolo LDAP"},{"location":"022_LDAP.html","text":"LDAP \u00b6 El LDAP (Lightweight Directory Access Protocol) es un protocolo a nivel de aplicaci\u00f3n que da acceso a un servicio de directorio ordenado y distribuido para la b\u00fasqueda de la informaci\u00f3n de un entrono de red. En la d\u00e9cada de los 80, la especificaci\u00f3n de directorio X.500 vio la luz. El protocolo que daba acceso a la informaci\u00f3n contenida en \u00e9l, fue DAP (Directory Access Protocol) y estaba basado en la pila de protocolos OSI (Open Systems Interconexion) . Gracias al auge de Internet, la pila de protocolos TCP/IP cobraron especial protagonismo y su uso fue generalizado en cualquier infraestructura de red, incluidas las LAN. Ante esta situaci\u00f3n, en 1993 se implement\u00f3 el protocolo LDAP que utilizaba la pila de protocolos TCP/IP para el acceso a la informaci\u00f3n contenido en un servicio de directorio. El funcionamiento de LDAP es relativamente simple : un cliente se inicia una sesi\u00f3n en un servidor LDAP solicitando alguna informaci\u00f3n. Esquema de funcionamiento del protocolo LDAP Conclusi\u00f3n LDAP, es un protocolo que ofrece el acceso a un servicio de directorio implementado sobre un entorno de red, con el objeto de acceder a una determinada informaci\u00f3n. Puede ejecutarse sobre TCP/IP o sobre cualquier otro servicio de transferencia orientado a la conexi\u00f3n. Podemos considerarlo como un sistema de almacenamiento de red al que se pueden realizar consultas. Antes de trabajar con LDAP, hay varios conceptos importantes que deben entenderse. El primer paso importante para dar el acceso comentado se basa en la autentificaci\u00f3n de usuarios . AUTENTICAR USUARIOS \u00b6 Existen diferentes formas de autenticar usuarios en una red linux, pero una de las m\u00e1s usadas es la combinaci\u00f3n de tres herramientas diferentes: NSS , PAM y LDAP . La idea consiste en disponer de un servidor que facilite la acci\u00f3n de autenticar usuarios , de modo, que \u00e9stos recurran al servidor cada vez que un cliente necesite identificarse. De esta forma, la cuenta de usuario no es espec\u00edfica de un equipo cliente , si no que ser\u00e1 v\u00e1lida en cualquier equipo de la red que haya sido debidamente configurado. Herramientas autenticaci\u00f3n usuarios en Unix PAM \u00b6 Pluggable Authentication Module (PAM) : o m\u00f3dulo de autenticaci\u00f3n conectable en espa\u00f1ol, es un mecanismo para integrar m\u00faltiples esquemas de autenticaci\u00f3n de bajo nivel en una interfaz de programaci\u00f3n de aplicaciones (API) de alto nivel. Es decir, Establece una interfaz entre los programas de usuario y distintos m\u00e9todos de autenticaci\u00f3n . De esta forma, el m\u00e9todo de autenticaci\u00f3n, se hace transparente para los programas . La idea se basa en la creaci\u00f3n de m\u00f3dulos de autenticaci\u00f3n . Esto hace que, sin realizar modificaciones en el sistema , podamos utilizar m\u00e9todos que vayan desde el uso t\u00edpico de un nombre de usuario y una contrase\u00f1a, hasta aceptar contrase\u00f1as de un solo uso , restringir el acceso a determinados horarios o establecer pol\u00edticas de autenticaci\u00f3n espec\u00edficas para cada usuario o grupos de usuarios. Esquema de la estructura PAM Note En la actualidad, PAM es el m\u00e9todo que utilizan la mayor\u00eda de las aplicaciones y herramientas de UNIX para autenticar usuarios. NSS \u00b6 Name Service Switch es un servicio que permite la resoluci\u00f3n de nombres de usuario y contrase\u00f1as (o grupos) mediante el acceso a diferentes or\u00edgenes de informaci\u00f3n. En condiciones normales, esta informaci\u00f3n se encuentra en los archivos locales del sistema operativo, en concreto en /etc/passwd , /etc/shadow y /etc/group pero puede proceder de otras fuentes, como DNS (Domain Name System) , NIS (Network Information Service) , LDAP (Lightweight Directory Access Protocol) o WINS (Windows Internet Name Service) . Note Este servicio esta gestionado desde el fichero: /etc/nsswitch.conf Modelo de Nomenclatura LDAP \u00b6 La estructura b\u00e1sica de LDAP es un \u00e1rbol de nodos llamado Directory Information Tree (DIT) donde cada nodo es una entrada. Cada entrada se define por un DN (Distinguished Name) y contiene un conjunto de atributos. Este DN es una cadena que indica la ruta en el \u00e1rbol de dicha entrada y ser\u00e1 \u00fanico en todo el \u00e1rbol. Un ejemplo del aspecto que ofrece un DN ser\u00eda el siguiente: Example cn=usuario1,ou=usuarios,dc=midominio,dc=es Puede verse que cada componente (la coma es el car\u00e1cter separador) se muestra como un par \u00abatributo=valor\u00bb donde el atributo es una abreviatura usada por LDAP. En el ejemplo anterior la estructura representada es: Entrada \u00b6 Una entrada LDAP es una recopilaci\u00f3n de informaci\u00f3n sobre una entidad. Cada entrada consta de tres componentes principales: Nombre distinguido DN y RDN (Relative Distinguished Name) Colecci\u00f3n de atributos Colecci\u00f3n de clases de objetos Cada uno de estos se describe con m\u00e1s detalle a continuaci\u00f3n. DN y RDN \u00b6 El nombre distinguido de una entrada, a menudo denominado DN , identifica de forma \u00fanica esa entrada y su posici\u00f3n en la jerarqu\u00eda del \u00e1rbol de informaci\u00f3n de directorio (DIT). El DN de una entrada LDAP es muy parecido a la ruta a un archivo en un sistema de archivos . Un DN LDAP se compone de cero o m\u00e1s elementos denominados nombres distinguidos relativos o RDN . Cada RDN se compone de uno o m\u00e1s (generalmente solo uno) pares de atributo-valor. Example \"uid = john.doe\" representa un RDN compuesto por un atributo llamado \"uid\" con un valor de \"john.doe\". Si un RDN tiene varios pares de atributo-valor, est\u00e1n separados por signos m\u00e1s, como \"givenName = John + sn = Doe\" . DSE \u00b6 El nombre distinguido especial compuesto por cero RDN (y por lo tanto tiene una representaci\u00f3n de cadena que es solo una cadena vac\u00eda ) a veces se denomina \"DN nulo\" y hace referencia a un tipo especial de entrada llamado DSE ra\u00edz que proporciona informaci\u00f3n sobre el contenido y las capacidades de el servidor de directorio. M\u00faltiples RDN \u00b6 Para DN con m\u00faltiples RDN , el orden de los RDN especifica la posici\u00f3n de la entrada asociada en el DIT. Los RDN est\u00e1n separados por comas, y cada RDN en un DN representa un nivel en la jerarqu\u00eda en orden descendente (es decir, acerc\u00e1ndose a la ra\u00edz del \u00e1rbol, que se denomina contexto de nomenclatura). Example el DN \"uid = john.doe, ou = People, dc = example, dc = com\" tiene cuatro RDN. Atributos \u00b6 Cada atributo de una entrada tendr\u00e1 un tipo y un valor con el formato atributo/valor que permite caracterizar un aspecto del objeto que define la entrada. Estos atributos tienen nombres que hacen referencia a su contenido y pueden ser de dos tipos: 1. **Atributos normales**: Son los atributos que identifican al objeto 2. **Atributos operativos**: Son los atributos que utiliza el servidor para administrar el directorio Entre los atributos que suelen utilizarse habitualmente, encontramos los siguientes, aunque puede haber muchos mas: dn (distinguished name): nombre distintivo de una entrada, contiene un conjunto de atributos y es de car\u00e1cter \u00fanico. dc (domain component): se refiere al componente del dominio, ya sea un componente, una etiqueta o un nombre de dominio DNS. ou (organizational unit): unidad organizativa. cn (common name): nombre com\u00fan. sn (surname): apellido. uid (userid): nombre de usuario. mail: direcci\u00f3n de e-mail. telephoneNumber: n\u00famero de tel\u00e9fono. Example DN cn=John Smith, o=airius.com, c=DE RDN cn=John Smith + DN of ancestor o=airius.com, c=DE Modelo de nomenclatura LDAP Clases de objetos \u00b6 Las clases de objeto son elementos de esquema que especifican colecciones de tipos de atributos que pueden estar relacionados con un tipo particular de objeto, proceso u otra entidad. Cada entrada tiene una clase de objeto estructural, que indica qu\u00e9 tipo de objeto representa una entrada (por ejemplo, si es informaci\u00f3n sobre una persona, un grupo, un dispositivo, un servicio, etc.) tambi\u00e9n puede tener cero o m\u00e1s objetos auxiliares. clases que sugieren caracter\u00edsticas adicionales para esa entrada. Al igual que los tipos de atributos, las clases de objetos deben tener un identificador de objeto , pero tambi\u00e9n pueden tener cero o m\u00e1s nombres . Actividades Iniciales \u00b6 Configuraci\u00f3n b\u00e1sica e instalaci\u00f3n de OpenLDAP","title":"2.2- LDAP"},{"location":"022_LDAP.html#ldap","text":"El LDAP (Lightweight Directory Access Protocol) es un protocolo a nivel de aplicaci\u00f3n que da acceso a un servicio de directorio ordenado y distribuido para la b\u00fasqueda de la informaci\u00f3n de un entrono de red. En la d\u00e9cada de los 80, la especificaci\u00f3n de directorio X.500 vio la luz. El protocolo que daba acceso a la informaci\u00f3n contenida en \u00e9l, fue DAP (Directory Access Protocol) y estaba basado en la pila de protocolos OSI (Open Systems Interconexion) . Gracias al auge de Internet, la pila de protocolos TCP/IP cobraron especial protagonismo y su uso fue generalizado en cualquier infraestructura de red, incluidas las LAN. Ante esta situaci\u00f3n, en 1993 se implement\u00f3 el protocolo LDAP que utilizaba la pila de protocolos TCP/IP para el acceso a la informaci\u00f3n contenido en un servicio de directorio. El funcionamiento de LDAP es relativamente simple : un cliente se inicia una sesi\u00f3n en un servidor LDAP solicitando alguna informaci\u00f3n. Esquema de funcionamiento del protocolo LDAP Conclusi\u00f3n LDAP, es un protocolo que ofrece el acceso a un servicio de directorio implementado sobre un entorno de red, con el objeto de acceder a una determinada informaci\u00f3n. Puede ejecutarse sobre TCP/IP o sobre cualquier otro servicio de transferencia orientado a la conexi\u00f3n. Podemos considerarlo como un sistema de almacenamiento de red al que se pueden realizar consultas. Antes de trabajar con LDAP, hay varios conceptos importantes que deben entenderse. El primer paso importante para dar el acceso comentado se basa en la autentificaci\u00f3n de usuarios .","title":"LDAP"},{"location":"022_LDAP.html#autenticar-usuarios","text":"Existen diferentes formas de autenticar usuarios en una red linux, pero una de las m\u00e1s usadas es la combinaci\u00f3n de tres herramientas diferentes: NSS , PAM y LDAP . La idea consiste en disponer de un servidor que facilite la acci\u00f3n de autenticar usuarios , de modo, que \u00e9stos recurran al servidor cada vez que un cliente necesite identificarse. De esta forma, la cuenta de usuario no es espec\u00edfica de un equipo cliente , si no que ser\u00e1 v\u00e1lida en cualquier equipo de la red que haya sido debidamente configurado. Herramientas autenticaci\u00f3n usuarios en Unix","title":"AUTENTICAR USUARIOS"},{"location":"022_LDAP.html#pam","text":"Pluggable Authentication Module (PAM) : o m\u00f3dulo de autenticaci\u00f3n conectable en espa\u00f1ol, es un mecanismo para integrar m\u00faltiples esquemas de autenticaci\u00f3n de bajo nivel en una interfaz de programaci\u00f3n de aplicaciones (API) de alto nivel. Es decir, Establece una interfaz entre los programas de usuario y distintos m\u00e9todos de autenticaci\u00f3n . De esta forma, el m\u00e9todo de autenticaci\u00f3n, se hace transparente para los programas . La idea se basa en la creaci\u00f3n de m\u00f3dulos de autenticaci\u00f3n . Esto hace que, sin realizar modificaciones en el sistema , podamos utilizar m\u00e9todos que vayan desde el uso t\u00edpico de un nombre de usuario y una contrase\u00f1a, hasta aceptar contrase\u00f1as de un solo uso , restringir el acceso a determinados horarios o establecer pol\u00edticas de autenticaci\u00f3n espec\u00edficas para cada usuario o grupos de usuarios. Esquema de la estructura PAM Note En la actualidad, PAM es el m\u00e9todo que utilizan la mayor\u00eda de las aplicaciones y herramientas de UNIX para autenticar usuarios.","title":"PAM"},{"location":"022_LDAP.html#nss","text":"Name Service Switch es un servicio que permite la resoluci\u00f3n de nombres de usuario y contrase\u00f1as (o grupos) mediante el acceso a diferentes or\u00edgenes de informaci\u00f3n. En condiciones normales, esta informaci\u00f3n se encuentra en los archivos locales del sistema operativo, en concreto en /etc/passwd , /etc/shadow y /etc/group pero puede proceder de otras fuentes, como DNS (Domain Name System) , NIS (Network Information Service) , LDAP (Lightweight Directory Access Protocol) o WINS (Windows Internet Name Service) . Note Este servicio esta gestionado desde el fichero: /etc/nsswitch.conf","title":"NSS"},{"location":"022_LDAP.html#modelo-de-nomenclatura-ldap","text":"La estructura b\u00e1sica de LDAP es un \u00e1rbol de nodos llamado Directory Information Tree (DIT) donde cada nodo es una entrada. Cada entrada se define por un DN (Distinguished Name) y contiene un conjunto de atributos. Este DN es una cadena que indica la ruta en el \u00e1rbol de dicha entrada y ser\u00e1 \u00fanico en todo el \u00e1rbol. Un ejemplo del aspecto que ofrece un DN ser\u00eda el siguiente: Example cn=usuario1,ou=usuarios,dc=midominio,dc=es Puede verse que cada componente (la coma es el car\u00e1cter separador) se muestra como un par \u00abatributo=valor\u00bb donde el atributo es una abreviatura usada por LDAP. En el ejemplo anterior la estructura representada es:","title":"Modelo de Nomenclatura LDAP"},{"location":"022_LDAP.html#entrada","text":"Una entrada LDAP es una recopilaci\u00f3n de informaci\u00f3n sobre una entidad. Cada entrada consta de tres componentes principales: Nombre distinguido DN y RDN (Relative Distinguished Name) Colecci\u00f3n de atributos Colecci\u00f3n de clases de objetos Cada uno de estos se describe con m\u00e1s detalle a continuaci\u00f3n.","title":"Entrada"},{"location":"022_LDAP.html#actividades-iniciales","text":"Configuraci\u00f3n b\u00e1sica e instalaci\u00f3n de OpenLDAP","title":"Actividades Iniciales"},{"location":"Practica01_LDAP.html","text":"Configuraci\u00f3n b\u00e1sica del servidor \u00b6 Vamos a comenzar por modificar el contenido del fichero /etc/hosts para indicar un FQDN a nuestro servidor. El objetivo de este cambio es que cuando hagamos referencia a pandora.ldap, nuestro sistema entienda que nos estamos refiriendo al servidor. Esto, adem\u00e1s, facilitar\u00e1 la labor de configuraci\u00f3n de nuestro servicio de directorio. sudo nano /etc/hosts Implantaci\u00f3n del Servicio OpenLDAP \u00b6 Ahora vamos a ver, en forma de gu\u00eda pr\u00e1ctica, la implantaci\u00f3n del servicio OpenLDAP en nuestro servidor Ubuntu 20.04 En primer lugar, vamos a instalar los paquetes necesarios en nuestro servidor. sudo apt install slapd ldap-utils Autom\u00e1ticamente nos aparecer\u00e1 una ventana donde introduciremos la contrase\u00f1a de administrador para el directorio LDAP. Seguidamente terminar\u00e1 el proceso de instalaci\u00f3n. Podemos comprobar que se ha instalado correctamente ejecutando el comando slapcat. Dicho comando nos mostrar\u00e1 en formato LDIF el contenido de las entradas existentes en el servicio de directorio. sudo slapcat Ahora vamos a realizar la configuraci\u00f3n de nuestro servicio de directorio usando el asistente de slapd. Para ello ejecutamos la siguiente instrucci\u00f3n: sudo dpkg-reconfigure slapd El primer paso del asistente nos pregunta si queremos omitir la configuraci\u00f3n del servidor OpenLDAP. Elegiremos que NO para poder configurarlo. A continuaci\u00f3n nos pregunta por el dominio en el que se encuentra nuestro servidor, esto va a formar parte del DN del directorio LDAP. Al haberlo indicado anteriormente en el fichero /etc/hosts, autom\u00e1ticamente el asistente lo recoge y solo debemos darle a OK. Si no lo hubi\u00e9semos indicado, habr\u00eda que indicarlo manualmente. Luego nos pregunta por el nombre de la organizaci\u00f3n a la que va a pertenecer nuestro servidor LDAP. Se puede elegir una contrase\u00f1a facil para la pr\u00e1ctica como pandora . Pulsamos OK. Ahora nos vuelve a pedir la contrase\u00f1a de administrador del directorio LDAP. Esta que pongamos va a machacar la que indicamos en el proceso de instalaci\u00f3n y ser\u00e1 la definitiva. Como suele pasar, la deberemos introducir dos veces para evitar errores tipogr\u00e1ficos. Seguidamente nos pregunta si queremos que se elimine la base de datos del directorio LDAP cuando se borre el paquete slapd del sistema. Le diremos que NO. Y por \u00faltimo nos pregunta si queremos mover los datos de alguna antigua base de datos de directorio LDAP a la nueva que estamos configurando. En nuestro caso, como no tenemos ninguna antigua no va afectar en nada, lo dejaremos en SI y finalizaremos la configuraci\u00f3n. Una vez finalizado el asistente, volvemos a ejecutar el comando slapcat y veremos como se han modificado los valores de los atributos de las entradas, con los datos que nosotros acabamos de indicar. sudo slapcat","title":"Practica01 LDAP"},{"location":"Practica01_LDAP.html#configuracion-basica-del-servidor","text":"Vamos a comenzar por modificar el contenido del fichero /etc/hosts para indicar un FQDN a nuestro servidor. El objetivo de este cambio es que cuando hagamos referencia a pandora.ldap, nuestro sistema entienda que nos estamos refiriendo al servidor. Esto, adem\u00e1s, facilitar\u00e1 la labor de configuraci\u00f3n de nuestro servicio de directorio. sudo nano /etc/hosts","title":"Configuraci\u00f3n b\u00e1sica del servidor"},{"location":"Practica01_LDAP.html#implantacion-del-servicio-openldap","text":"Ahora vamos a ver, en forma de gu\u00eda pr\u00e1ctica, la implantaci\u00f3n del servicio OpenLDAP en nuestro servidor Ubuntu 20.04 En primer lugar, vamos a instalar los paquetes necesarios en nuestro servidor. sudo apt install slapd ldap-utils Autom\u00e1ticamente nos aparecer\u00e1 una ventana donde introduciremos la contrase\u00f1a de administrador para el directorio LDAP. Seguidamente terminar\u00e1 el proceso de instalaci\u00f3n. Podemos comprobar que se ha instalado correctamente ejecutando el comando slapcat. Dicho comando nos mostrar\u00e1 en formato LDIF el contenido de las entradas existentes en el servicio de directorio. sudo slapcat Ahora vamos a realizar la configuraci\u00f3n de nuestro servicio de directorio usando el asistente de slapd. Para ello ejecutamos la siguiente instrucci\u00f3n: sudo dpkg-reconfigure slapd El primer paso del asistente nos pregunta si queremos omitir la configuraci\u00f3n del servidor OpenLDAP. Elegiremos que NO para poder configurarlo. A continuaci\u00f3n nos pregunta por el dominio en el que se encuentra nuestro servidor, esto va a formar parte del DN del directorio LDAP. Al haberlo indicado anteriormente en el fichero /etc/hosts, autom\u00e1ticamente el asistente lo recoge y solo debemos darle a OK. Si no lo hubi\u00e9semos indicado, habr\u00eda que indicarlo manualmente. Luego nos pregunta por el nombre de la organizaci\u00f3n a la que va a pertenecer nuestro servidor LDAP. Se puede elegir una contrase\u00f1a facil para la pr\u00e1ctica como pandora . Pulsamos OK. Ahora nos vuelve a pedir la contrase\u00f1a de administrador del directorio LDAP. Esta que pongamos va a machacar la que indicamos en el proceso de instalaci\u00f3n y ser\u00e1 la definitiva. Como suele pasar, la deberemos introducir dos veces para evitar errores tipogr\u00e1ficos. Seguidamente nos pregunta si queremos que se elimine la base de datos del directorio LDAP cuando se borre el paquete slapd del sistema. Le diremos que NO. Y por \u00faltimo nos pregunta si queremos mover los datos de alguna antigua base de datos de directorio LDAP a la nueva que estamos configurando. En nuestro caso, como no tenemos ninguna antigua no va afectar en nada, lo dejaremos en SI y finalizaremos la configuraci\u00f3n. Una vez finalizado el asistente, volvemos a ejecutar el comando slapcat y veremos como se han modificado los valores de los atributos de las entradas, con los datos que nosotros acabamos de indicar. sudo slapcat","title":"Implantaci\u00f3n del Servicio OpenLDAP"}]}