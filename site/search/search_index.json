{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Administraci\u00f3n de Sistemas Operativos \u00b6 Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Administraci\u00f3n de Sistemas Operativos , que se imparte en el segundo curso del ciclo formativo de grado superior de Administraci\u00f3n de Sistemas Inform\u00e1ticos en Red. La duraci\u00f3n del m\u00f3dulo es de 120 horas lectivas, a raz\u00f3n de 6 horas semanales , y se desarrolla a lo largo de los dos primeros trimestres del curso . Se ha planificado bas\u00e1ndose en 3 sesiones de 2 horas lectivas por semana. \u00bfQu\u00e9 voy a aprender? \u00b6 Administrar sistemas operativos de servidor, instalando y configurando el software, en condiciones de calidad para asegurar el funcionamiento del sistema. Administrar servicios de recursos compartidos (acceso a directorios, impresi\u00f3n, accesos remotos, entre otros) instalando y configurando el software, en condiciones de calidad. Administrar usuarios de acuerdo a las especificaciones de explotaci\u00f3n para garantizar los accesos y la disponibilidad de los recursos del sistema. Gestionar los recursos de diferentes sistemas operativos (programando y verificando su cumplimiento). Resultados de aprendizaje \u00b6 Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Administra el servicio de directorio interpretando especificaciones e integr\u00e1ndolo en una red. Administra procesos del sistema describi\u00e9ndolos y aplicando criterios de seguridad y eficiencia. Gestiona la automatizaci\u00f3n de tareas del sistema, aplicando criterios de eficiencia y utilizando comandos y herramientas gr\u00e1ficas. Administra de forma remota el sistema operativo en red valorando su importancia y aplicando criterios de seguridad. Administra servidores de impresi\u00f3n describiendo sus funciones e integr\u00e1ndolos en una red. Integra sistemas operativos libres y propietarios, justificando y garantizando su interoperabilidad. Unidades did\u00e1cticas / Temporalizaci\u00f3n \u00b6 A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 3, y parte de la unidad 4. As\u00ed pues, desde la mitad de la unidad 4 a la unidad 7 se ver\u00e1n en la segunda evaluaci\u00f3n. Primera evaluaci\u00f3n. (Duraci\u00f3n estimada: 68 sesiones) \u00b6 Tools: Scripting y Docker. (18h) Scripts de Linux. (bash). Procedimientos bat. (cmd). Scripts de PowerShell. Introducci\u00f3n a Docker. Administraci\u00f3n de servicio de directorio. (24h) LDAP. Directorio Activo con Windows Server. (18h) Administraci\u00f3n de procesos del sistema. El planificador. Algoritmos de planificaci\u00f3n de procesos. Sincronizaci\u00f3n, Interrupciones y excepciones. Secuencia de arranque del sistema. Segunda evaluaci\u00f3n. (Duraci\u00f3n estimada: 62 sesiones) \u00b6 Informaci\u00f3n del sistema. (16h). B\u00fasqueda de informaci\u00f3n del sistema. \u00d3rdenes. Herramientas gr\u00e1ficas. Gesti\u00f3n de la informaci\u00f3n del sistema. Rendimiento . Estad\u00edsticas. Servicios de acceso y administraci\u00f3n remota. (12h) Terminales en modo texto. Servicios de acceso remoto del propio sistema operativo. Escritorio remoto. Herramientas gr\u00e1ficas externas para la administraci\u00f3n remota. Administrador de servidores de impresi\u00f3n. (12h) Tipos de impresoras para trabajo en red. Protocolos de impresi\u00f3n. Servidores de impresi\u00f3n. Integraci\u00f3n de sistemas operativos. (20h) Samba. NFS. Instrumentos de calificaci\u00f3n \u00b6 La nota de cada evaluaci\u00f3n se calcula mediante: 40% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto 3: Entregada y soluci\u00f3n correcta. 60% Actividad de evaluaci\u00f3n Una o dos pruebas por evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Inicio"},{"location":"index.html#administracion-de-sistemas-operativos","text":"Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Administraci\u00f3n de Sistemas Operativos , que se imparte en el segundo curso del ciclo formativo de grado superior de Administraci\u00f3n de Sistemas Inform\u00e1ticos en Red. La duraci\u00f3n del m\u00f3dulo es de 120 horas lectivas, a raz\u00f3n de 6 horas semanales , y se desarrolla a lo largo de los dos primeros trimestres del curso . Se ha planificado bas\u00e1ndose en 3 sesiones de 2 horas lectivas por semana.","title":"Administraci\u00f3n de Sistemas Operativos"},{"location":"index.html#que-voy-a-aprender","text":"Administrar sistemas operativos de servidor, instalando y configurando el software, en condiciones de calidad para asegurar el funcionamiento del sistema. Administrar servicios de recursos compartidos (acceso a directorios, impresi\u00f3n, accesos remotos, entre otros) instalando y configurando el software, en condiciones de calidad. Administrar usuarios de acuerdo a las especificaciones de explotaci\u00f3n para garantizar los accesos y la disponibilidad de los recursos del sistema. Gestionar los recursos de diferentes sistemas operativos (programando y verificando su cumplimiento).","title":"\u00bfQu\u00e9 voy a aprender?"},{"location":"index.html#resultados-de-aprendizaje","text":"Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Administra el servicio de directorio interpretando especificaciones e integr\u00e1ndolo en una red. Administra procesos del sistema describi\u00e9ndolos y aplicando criterios de seguridad y eficiencia. Gestiona la automatizaci\u00f3n de tareas del sistema, aplicando criterios de eficiencia y utilizando comandos y herramientas gr\u00e1ficas. Administra de forma remota el sistema operativo en red valorando su importancia y aplicando criterios de seguridad. Administra servidores de impresi\u00f3n describiendo sus funciones e integr\u00e1ndolos en una red. Integra sistemas operativos libres y propietarios, justificando y garantizando su interoperabilidad.","title":"Resultados de aprendizaje"},{"location":"index.html#unidades-didacticas-temporalizacion","text":"A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 3, y parte de la unidad 4. As\u00ed pues, desde la mitad de la unidad 4 a la unidad 7 se ver\u00e1n en la segunda evaluaci\u00f3n.","title":"Unidades did\u00e1cticas / Temporalizaci\u00f3n"},{"location":"index.html#primera-evaluacion-duracion-estimada-68-sesiones","text":"Tools: Scripting y Docker. (18h) Scripts de Linux. (bash). Procedimientos bat. (cmd). Scripts de PowerShell. Introducci\u00f3n a Docker. Administraci\u00f3n de servicio de directorio. (24h) LDAP. Directorio Activo con Windows Server. (18h) Administraci\u00f3n de procesos del sistema. El planificador. Algoritmos de planificaci\u00f3n de procesos. Sincronizaci\u00f3n, Interrupciones y excepciones. Secuencia de arranque del sistema.","title":"Primera evaluaci\u00f3n. (Duraci\u00f3n estimada: 68 sesiones)"},{"location":"index.html#segunda-evaluacion-duracion-estimada-62-sesiones","text":"Informaci\u00f3n del sistema. (16h). B\u00fasqueda de informaci\u00f3n del sistema. \u00d3rdenes. Herramientas gr\u00e1ficas. Gesti\u00f3n de la informaci\u00f3n del sistema. Rendimiento . Estad\u00edsticas. Servicios de acceso y administraci\u00f3n remota. (12h) Terminales en modo texto. Servicios de acceso remoto del propio sistema operativo. Escritorio remoto. Herramientas gr\u00e1ficas externas para la administraci\u00f3n remota. Administrador de servidores de impresi\u00f3n. (12h) Tipos de impresoras para trabajo en red. Protocolos de impresi\u00f3n. Servidores de impresi\u00f3n. Integraci\u00f3n de sistemas operativos. (20h) Samba. NFS.","title":"Segunda evaluaci\u00f3n. (Duraci\u00f3n estimada: 62 sesiones)"},{"location":"index.html#instrumentos-de-calificacion","text":"La nota de cada evaluaci\u00f3n se calcula mediante: 40% Trabajo en Clase / Actividades Se eval\u00faan todas las actividades realizadas en clase y en casa. Las actividades se eval\u00faan mediante tareas de Aules con calificaciones comprendidas entre 0 y 3 puntos: 0: No entregada 1: Entregada pero soluci\u00f3n err\u00f3nea o incompleta 2: Entregada y soluci\u00f3n aceptable, aunque tiene alg\u00fan apartado incompleto 3: Entregada y soluci\u00f3n correcta. 60% Actividad de evaluaci\u00f3n Una o dos pruebas por evaluaci\u00f3n. La nota final se calcula mediante la media de cada una de las evaluaciones.","title":"Instrumentos de calificaci\u00f3n"},{"location":"01Tools.html","text":"Tools: Scripting y Docker \u00b6 Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 9 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje: Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Criterios de evaluaci\u00f3n: Se han utilizado y combinado las estructuras del lenguaje para crear guiones. Se han utilizado herramientas para depurar errores sint\u00e1cticos y de ejecuci\u00f3n. Se han interpretado guiones de configuraci\u00f3n del sistema operativo. Se han realizado cambios y adaptaciones de guiones del sistema. Se han creado y probado guiones de administraci\u00f3n de servicios. Se han creado y probado guiones de automatizaci\u00f3n de tareas. Se han implantado guiones en sistemas libres y propietarios. Se han consultado y utilizado librer\u00edas de funciones. Se han documentado los guiones creados. Introducci\u00f3n Linux \u00b6 Breve Historia \u00b6 1969 La empresa AT&T desarrolla el sistema operativo UNIX y vendido posteriormente a Novell. 1983 Richard Stallman comienza el proyecto GNU (GNU is Not Unix) para crear un SO tipo UNIX pero de software libre. Software libre: Aquel software, que una vez adquirido (no tiene porque ser gratuito), puede ser usado, copiado, modificado y redistribuido, con cambios o mejoras. 1985 Microsoft publica Windows, un sistema operativo con interfaz gr\u00e1fica de usuario (GUI) para su sistema operativo MS-DOS. 1991 Linus Torvald comienza a programar el sistema operativo Linux (Linus + UNIX). El c\u00f3digo era totalmente nuevo, pero emulaba el funcionamiento del sistema operativo MINIX (Tanenbaum), con estructura de micronucleo. 1992 Se juntan el proyecto Linux y GNU \u2192 GNU/Linux. 2001 Se lanza el primer sistema operativo MAC (MAC OS X) con interfaz de escritorio. MAC est\u00e1 basado en UNIX. Principales Actores \u00b6 Principales Actores en la creaci\u00f3n de GNU/Linux Caracter\u00edsticas \u00b6 Software Libre \u2192 Cualquiera puede usarlo o descargarlo. Licencias GPL (General Public License) de GNU. La Licencia P\u00fablica General de GNU o m\u00e1s conocida por su nombre en ingl\u00e9s GNU General Public License es una licencia de derecho de autor ampliamente usada en el mundo del software libre y c\u00f3digo abierto, \u200b y garantiza a los usuarios finales la libertad de usar, estudiar, compartir y modificar el software. C\u00f3digo Abierto \u2192 Cualquiera puede ver y modificar el c\u00f3digo. Tabla con algunas caracter\u00edsticas de Linux Distribuciones \u00b6 Gratuitas: Ubuntu, CentOS, Mint, Fedora, Knoppix, OpenSUSE. En el caso de Ubuntu sacan distribuciones LTS que tienen mayor tiempo de actualizaciones. Las versiones indican el a\u00f1o y el mes en que se saca dicha versi\u00f3n. Por ejemplo 17.04 (A\u00f1o 2017, Abril). Pago: RedHat o SUSE. Se paga por el soporte, no por el software en s\u00ed. Las distribuciones de pago tambi\u00e9n suelen tener sus versiones gratuitas. Principales distribuciones \u00b6 Algunas Distribuciones de Linux Shell \u00b6 En inform\u00e1tica, el shell o int\u00e9rprete de \u00f3rdenes o int\u00e9rprete de comandos es el programa inform\u00e1tico que provee una interfaz de usuario para acceder a los servicios del sistema operativo. Dependiendo del tipo de interfaz que empleen, los shells pueden ser: De l\u00edneas texto ( CLI , Command-Line Interface, interfaz de l\u00ednea de comandos), Gr\u00e1ficos ( GUI , Graphical User Interface, interfaz gr\u00e1fica de usuario), De lenguaje natural ( NUI , Natural User Interface, interfaz natural de usuario). En un terminal (Shell) es posible crear cualquier comando que el usuario necesite, incluso para las tareas m\u00e1s espec\u00edficas. Debido a estar directamente conectado al Kernel a diferencia de las palicaciones como se puede observar en la siguiente figura. Estructura de Linux Por lo tanto, es buena pr\u00e1ctica que el administrador del sistema tenga conocimientos en el manejo del terminal as\u00ed como en la programaci\u00f3n de scripts. Linux dispone de varios Shell diferentes csh , bash , sh , ksh , zsh , etc... En este tema utilizaremos el Shell bash . Formato comandos \u00b6 En general, el formato de las \u00f3rdenes de GNU/Linux es el siguiente: Comando , que indica la acci\u00f3n que se va a ejecutar. Modificadores , que cambian el comportamiento est\u00e1ndar del comando para adaptarlo a las necesidades. Argumentos , elementos necesarios para realizar la acci\u00f3n del comando. Shell Script en GNU/Linux \u00b6 Un Shell script (gui\u00f3n) es un archivo de texto que contiene una serie de comandos que, ordenados de forma espec\u00edfica, realizan la tarea para la que fueron dise\u00f1ados, es decir, es un programa escrito de comandos Shell para ser ejecutados de forma secuencial. De esta forma se pueden automatizar tareas repetitivas ahorrando tiempo al administrador. Un programa escrito en shell se denomina shellscript, programa shell o simplemente un shell. Principales comandos \u00b6 Comando Acci\u00f3n ls muestra el contenido de una carpeta cd cambiar de directorio mkdir crear directorios shutdown apaga el equipo ( restart o reboot ) clear limpia la pantalla date/cal muestra hora/calendario del sistema who muestra quien est\u00e1 conectado uname muestra informaci\u00f3n del sistema df muestra estado del disco fsck comprueba integridad de discos mount monta particiones y vol\u00famenes unmount desmonta particiones y vol\u00famenes fdisk administra particiones echo imprime por pantalla # comentarios Creaci\u00f3n Shell scripts \u00b6 Para crear un script utilizaremos cualquiera de los editores de texto plano como vi , vim , nano . Despu\u00e9s de crear el archivo hay que dotarlo de permisos de lectura y ejecuci\u00f3n. chmod ugo=rx script.sh Para ejecutar el archivo: ubicados en la carpeta que contiene el archivo, se pueden utilizar tres formas: se teclea el nombre del archivo en el terminal precedido del comando sh sh script.sh precedido de un punto . . script.sh ./ script.sh definir la carpeta dentro de la variable de entorno PATH . O editar el fichero .bashrc . Ya se podr\u00eda ejecutar directamente el fichero con el nombre del script. mkdir /home/administrador/scripts PATH=$PATH:/home/administrador/scripts export PATH Cualquiera de estas dos primeras formas ejecutar\u00e1 el contenido del shell script en un subshell o hilo del terminal original. El programa se ejecuta hasta que se terminan las \u00f3rdenes del archivo, se recibe una se\u00f1al de finalizaci\u00f3n, se encuentra un error sint\u00e1ctico o se llega a una orden exit . Cuando el programa termina, el subshell muere y el terminal original toma el control del sistema. Esto no ocurre si se usa la opci\u00f3n de PATH, la cual ejecuta el contenido del shell script en el mismo terminal donde fue invocado. El primer Shellscript \u00b6 Crea un ejemplo llamado listar.sh cd ~ mkdir scripts cd scripts touch listar.sh nano listar.sh Genera, guarda y prueba el siguiente c\u00f3digo. #! /bin/bash clear ls -la echo \u201cListado realizado el \u201c$(date) echo \u00b6 echo (para usar las opciones hay utilizar el modificador -e ) \\ barra \\n nueva l\u00ednea \\t tabulador horizontal \\v tabulador vertical \\b espacio atr\u00e1s Variables \u00b6 Es un par\u00e1metro que cambia su valor durante la ejecuci\u00f3n del programa Se da un nombre para identificarla y recuperarla, antecedido por el car\u00e1cter $ El nombre esta compuesto por letras y n\u00fameros y por el car\u00e1cter subrayado \u201c _ \u201d. Deben empezar por letra o \u201c _ \u201d En shellscript no se declaran y no importa el tipo Ejemplo: #! /bin/bash #********************************* #Este es mi segundo script #********************************* MIVARIABLE=\u2018Administraci\u00f3n de Sistemas Operativos ASO\u2019 echo $MIVARIABLE Variables de entorno \u00b6 Variable Funci\u00f3n $BASH Ruta del programa Bash $HOME Ruta completa del home del usuario $PATH Lista los directorios de donde busca los programas $RANDOM Devuelve un valor num\u00e9rico aleatorio Aritm\u00e9ticos \u00b6 S\u00edmbolo Funci\u00f3n + suma - resta * multiplicaci\u00f3n / divisi\u00f3n % modulo (resto) Ejemplo: #!/bin/bash #********************************* #Esto es mi tercer script #********************************* NUMERO=4 let SUMA=NUMERO+3 echo $SUMA NUMERO=5 let SUMA=NUMERO+5 echo $SUMA NUMERO=10 let SUMA=NUMERO-10 Par\u00e1metros \u00b6 Son especificaciones que se le hacen al programa al momento de llamarlo para obtener un efecto diferente. Introducen un valor, cadena o variable dentro del script. Utilizaci\u00f3n de par\u00e1metros: S\u00edmbolo Funci\u00f3n $1 representa el 1\u00ba par\u00e1metro pasado al script $2 representa el 2\u00ba par\u00e1metro $3 representa el 3\u00ba par\u00e1metro (podemos usar hasta $9) $ * representa todos los par\u00e1metros separados por espacio $# representa el n\u00famero de par\u00e1metros que se han pasado $0 representa el par\u00e1metro 0, es decir, el nombre del script o el nombre de la funci\u00f3n Ejemplo: #!/bin/bash echo \u2018El primer par\u00e1metro que se ha pasado es \u2018 $1 echo \u2018El tercer par\u00e1metro que se ha pasado es \u2018 $3 echo \u2018El conjunto de todos los par\u00e1metros : \u2018 $* echo \u2018Me has pasado un total de \u2018 $# \u2018 par\u00e1metros\u2019\u201d echo \u2018El par\u00e1metro 0 es : \u2018 $0 #Fin del script ./scriptFeo.sh Caballo Perro 675 Nueva El primer par\u00e1metro que se ha pasado es Caballo El tercer par\u00e1metro que se ha pasado es 675 El conjunto de todos los par\u00e1metros : Caballo Perro 675 Nueva Me has pasado un total de 4 par\u00e1metros El par\u00e1metro 0 es : ./scriptFeo.sh Actividades iniciales \u00b6 Escribe el c\u00f3digo de los shell scripts que se detallan en cada ejercicio. Deber\u00e1s crear un fichero de texto para cada ejercicio con el siguiente nombre: ejX.sh , donde la X representa el n\u00famero de ejercicio. Una vez terminada la pr\u00e1ctica, comprime todos estos ficheros en uno y s\u00fabelos al Moodle del m\u00f3dulo . Crea un shell script que muestre por pantalla el mensaje \u201c\u00a1Hola Mundo!\u201d . Realiza un shell script que admita un \u00fanico par\u00e1metro correspondiente al nombre de un fichero de texto. Mostrar\u00e1 por pantalla el n\u00famero de l\u00edneas del mismo utilizando el comando wc . Crea un shell script que muestre por pantalla el resultado de de las siguientes operaciones. Debes tener en cuenta que a, b y c son variables enteras que son preguntadas al usuario al iniciar el script. a%b a/c 2 * b + 3 * (a-c) a * (b/c) (a*c)%","title":"1.- Tools: Scripting y Docker."},{"location":"01Tools.html#tools-scripting-y-docker","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n Duraci\u00f3n estimada: 9 sesiones (2h por sesi\u00f3n) Resultado de aprendizaje: Utiliza lenguajes de guiones en sistemas operativos, describiendo su aplicaci\u00f3n y administrando servicios del sistema operativo. Criterios de evaluaci\u00f3n: Se han utilizado y combinado las estructuras del lenguaje para crear guiones. Se han utilizado herramientas para depurar errores sint\u00e1cticos y de ejecuci\u00f3n. Se han interpretado guiones de configuraci\u00f3n del sistema operativo. Se han realizado cambios y adaptaciones de guiones del sistema. Se han creado y probado guiones de administraci\u00f3n de servicios. Se han creado y probado guiones de automatizaci\u00f3n de tareas. Se han implantado guiones en sistemas libres y propietarios. Se han consultado y utilizado librer\u00edas de funciones. Se han documentado los guiones creados.","title":"Tools: Scripting y Docker"},{"location":"01Tools.html#introduccion-linux","text":"","title":"Introducci\u00f3n Linux"},{"location":"01Tools.html#breve-historia","text":"1969 La empresa AT&T desarrolla el sistema operativo UNIX y vendido posteriormente a Novell. 1983 Richard Stallman comienza el proyecto GNU (GNU is Not Unix) para crear un SO tipo UNIX pero de software libre. Software libre: Aquel software, que una vez adquirido (no tiene porque ser gratuito), puede ser usado, copiado, modificado y redistribuido, con cambios o mejoras. 1985 Microsoft publica Windows, un sistema operativo con interfaz gr\u00e1fica de usuario (GUI) para su sistema operativo MS-DOS. 1991 Linus Torvald comienza a programar el sistema operativo Linux (Linus + UNIX). El c\u00f3digo era totalmente nuevo, pero emulaba el funcionamiento del sistema operativo MINIX (Tanenbaum), con estructura de micronucleo. 1992 Se juntan el proyecto Linux y GNU \u2192 GNU/Linux. 2001 Se lanza el primer sistema operativo MAC (MAC OS X) con interfaz de escritorio. MAC est\u00e1 basado en UNIX.","title":"Breve Historia"},{"location":"01Tools.html#principales-actores","text":"Principales Actores en la creaci\u00f3n de GNU/Linux","title":"Principales Actores"},{"location":"01Tools.html#caracteristicas","text":"Software Libre \u2192 Cualquiera puede usarlo o descargarlo. Licencias GPL (General Public License) de GNU. La Licencia P\u00fablica General de GNU o m\u00e1s conocida por su nombre en ingl\u00e9s GNU General Public License es una licencia de derecho de autor ampliamente usada en el mundo del software libre y c\u00f3digo abierto, \u200b y garantiza a los usuarios finales la libertad de usar, estudiar, compartir y modificar el software. C\u00f3digo Abierto \u2192 Cualquiera puede ver y modificar el c\u00f3digo. Tabla con algunas caracter\u00edsticas de Linux","title":"Caracter\u00edsticas"},{"location":"01Tools.html#distribuciones","text":"Gratuitas: Ubuntu, CentOS, Mint, Fedora, Knoppix, OpenSUSE. En el caso de Ubuntu sacan distribuciones LTS que tienen mayor tiempo de actualizaciones. Las versiones indican el a\u00f1o y el mes en que se saca dicha versi\u00f3n. Por ejemplo 17.04 (A\u00f1o 2017, Abril). Pago: RedHat o SUSE. Se paga por el soporte, no por el software en s\u00ed. Las distribuciones de pago tambi\u00e9n suelen tener sus versiones gratuitas.","title":"Distribuciones"},{"location":"01Tools.html#principales-distribuciones","text":"Algunas Distribuciones de Linux","title":"Principales distribuciones"},{"location":"01Tools.html#shell","text":"En inform\u00e1tica, el shell o int\u00e9rprete de \u00f3rdenes o int\u00e9rprete de comandos es el programa inform\u00e1tico que provee una interfaz de usuario para acceder a los servicios del sistema operativo. Dependiendo del tipo de interfaz que empleen, los shells pueden ser: De l\u00edneas texto ( CLI , Command-Line Interface, interfaz de l\u00ednea de comandos), Gr\u00e1ficos ( GUI , Graphical User Interface, interfaz gr\u00e1fica de usuario), De lenguaje natural ( NUI , Natural User Interface, interfaz natural de usuario). En un terminal (Shell) es posible crear cualquier comando que el usuario necesite, incluso para las tareas m\u00e1s espec\u00edficas. Debido a estar directamente conectado al Kernel a diferencia de las palicaciones como se puede observar en la siguiente figura. Estructura de Linux Por lo tanto, es buena pr\u00e1ctica que el administrador del sistema tenga conocimientos en el manejo del terminal as\u00ed como en la programaci\u00f3n de scripts. Linux dispone de varios Shell diferentes csh , bash , sh , ksh , zsh , etc... En este tema utilizaremos el Shell bash .","title":"Shell"},{"location":"01Tools.html#formato-comandos","text":"En general, el formato de las \u00f3rdenes de GNU/Linux es el siguiente: Comando , que indica la acci\u00f3n que se va a ejecutar. Modificadores , que cambian el comportamiento est\u00e1ndar del comando para adaptarlo a las necesidades. Argumentos , elementos necesarios para realizar la acci\u00f3n del comando.","title":"Formato comandos"},{"location":"01Tools.html#shell-script-en-gnulinux","text":"Un Shell script (gui\u00f3n) es un archivo de texto que contiene una serie de comandos que, ordenados de forma espec\u00edfica, realizan la tarea para la que fueron dise\u00f1ados, es decir, es un programa escrito de comandos Shell para ser ejecutados de forma secuencial. De esta forma se pueden automatizar tareas repetitivas ahorrando tiempo al administrador. Un programa escrito en shell se denomina shellscript, programa shell o simplemente un shell.","title":"Shell Script en GNU/Linux"},{"location":"01Tools.html#principales-comandos","text":"Comando Acci\u00f3n ls muestra el contenido de una carpeta cd cambiar de directorio mkdir crear directorios shutdown apaga el equipo ( restart o reboot ) clear limpia la pantalla date/cal muestra hora/calendario del sistema who muestra quien est\u00e1 conectado uname muestra informaci\u00f3n del sistema df muestra estado del disco fsck comprueba integridad de discos mount monta particiones y vol\u00famenes unmount desmonta particiones y vol\u00famenes fdisk administra particiones echo imprime por pantalla # comentarios","title":"Principales comandos"},{"location":"01Tools.html#creacion-shell-scripts","text":"Para crear un script utilizaremos cualquiera de los editores de texto plano como vi , vim , nano . Despu\u00e9s de crear el archivo hay que dotarlo de permisos de lectura y ejecuci\u00f3n. chmod ugo=rx script.sh Para ejecutar el archivo: ubicados en la carpeta que contiene el archivo, se pueden utilizar tres formas: se teclea el nombre del archivo en el terminal precedido del comando sh sh script.sh precedido de un punto . . script.sh ./ script.sh definir la carpeta dentro de la variable de entorno PATH . O editar el fichero .bashrc . Ya se podr\u00eda ejecutar directamente el fichero con el nombre del script. mkdir /home/administrador/scripts PATH=$PATH:/home/administrador/scripts export PATH Cualquiera de estas dos primeras formas ejecutar\u00e1 el contenido del shell script en un subshell o hilo del terminal original. El programa se ejecuta hasta que se terminan las \u00f3rdenes del archivo, se recibe una se\u00f1al de finalizaci\u00f3n, se encuentra un error sint\u00e1ctico o se llega a una orden exit . Cuando el programa termina, el subshell muere y el terminal original toma el control del sistema. Esto no ocurre si se usa la opci\u00f3n de PATH, la cual ejecuta el contenido del shell script en el mismo terminal donde fue invocado.","title":"Creaci\u00f3n Shell scripts"},{"location":"01Tools.html#el-primer-shellscript","text":"Crea un ejemplo llamado listar.sh cd ~ mkdir scripts cd scripts touch listar.sh nano listar.sh Genera, guarda y prueba el siguiente c\u00f3digo. #! /bin/bash clear ls -la echo \u201cListado realizado el \u201c$(date)","title":"El primer Shellscript"},{"location":"01Tools.html#echo","text":"echo (para usar las opciones hay utilizar el modificador -e ) \\ barra \\n nueva l\u00ednea \\t tabulador horizontal \\v tabulador vertical \\b espacio atr\u00e1s","title":"echo"},{"location":"01Tools.html#variables","text":"Es un par\u00e1metro que cambia su valor durante la ejecuci\u00f3n del programa Se da un nombre para identificarla y recuperarla, antecedido por el car\u00e1cter $ El nombre esta compuesto por letras y n\u00fameros y por el car\u00e1cter subrayado \u201c _ \u201d. Deben empezar por letra o \u201c _ \u201d En shellscript no se declaran y no importa el tipo Ejemplo: #! /bin/bash #********************************* #Este es mi segundo script #********************************* MIVARIABLE=\u2018Administraci\u00f3n de Sistemas Operativos ASO\u2019 echo $MIVARIABLE","title":"Variables"},{"location":"01Tools.html#variables-de-entorno","text":"Variable Funci\u00f3n $BASH Ruta del programa Bash $HOME Ruta completa del home del usuario $PATH Lista los directorios de donde busca los programas $RANDOM Devuelve un valor num\u00e9rico aleatorio","title":"Variables de entorno"},{"location":"01Tools.html#aritmeticos","text":"S\u00edmbolo Funci\u00f3n + suma - resta * multiplicaci\u00f3n / divisi\u00f3n % modulo (resto) Ejemplo: #!/bin/bash #********************************* #Esto es mi tercer script #********************************* NUMERO=4 let SUMA=NUMERO+3 echo $SUMA NUMERO=5 let SUMA=NUMERO+5 echo $SUMA NUMERO=10 let SUMA=NUMERO-10","title":"Aritm\u00e9ticos"},{"location":"01Tools.html#parametros","text":"Son especificaciones que se le hacen al programa al momento de llamarlo para obtener un efecto diferente. Introducen un valor, cadena o variable dentro del script. Utilizaci\u00f3n de par\u00e1metros: S\u00edmbolo Funci\u00f3n $1 representa el 1\u00ba par\u00e1metro pasado al script $2 representa el 2\u00ba par\u00e1metro $3 representa el 3\u00ba par\u00e1metro (podemos usar hasta $9) $ * representa todos los par\u00e1metros separados por espacio $# representa el n\u00famero de par\u00e1metros que se han pasado $0 representa el par\u00e1metro 0, es decir, el nombre del script o el nombre de la funci\u00f3n Ejemplo: #!/bin/bash echo \u2018El primer par\u00e1metro que se ha pasado es \u2018 $1 echo \u2018El tercer par\u00e1metro que se ha pasado es \u2018 $3 echo \u2018El conjunto de todos los par\u00e1metros : \u2018 $* echo \u2018Me has pasado un total de \u2018 $# \u2018 par\u00e1metros\u2019\u201d echo \u2018El par\u00e1metro 0 es : \u2018 $0 #Fin del script ./scriptFeo.sh Caballo Perro 675 Nueva El primer par\u00e1metro que se ha pasado es Caballo El tercer par\u00e1metro que se ha pasado es 675 El conjunto de todos los par\u00e1metros : Caballo Perro 675 Nueva Me has pasado un total de 4 par\u00e1metros El par\u00e1metro 0 es : ./scriptFeo.sh","title":"Par\u00e1metros"},{"location":"01Tools.html#actividades-iniciales","text":"Escribe el c\u00f3digo de los shell scripts que se detallan en cada ejercicio. Deber\u00e1s crear un fichero de texto para cada ejercicio con el siguiente nombre: ejX.sh , donde la X representa el n\u00famero de ejercicio. Una vez terminada la pr\u00e1ctica, comprime todos estos ficheros en uno y s\u00fabelos al Moodle del m\u00f3dulo . Crea un shell script que muestre por pantalla el mensaje \u201c\u00a1Hola Mundo!\u201d . Realiza un shell script que admita un \u00fanico par\u00e1metro correspondiente al nombre de un fichero de texto. Mostrar\u00e1 por pantalla el n\u00famero de l\u00edneas del mismo utilizando el comando wc . Crea un shell script que muestre por pantalla el resultado de de las siguientes operaciones. Debes tener en cuenta que a, b y c son variables enteras que son preguntadas al usuario al iniciar el script. a%b a/c 2 * b + 3 * (a-c) a * (b/c) (a*c)%","title":"Actividades iniciales"}]}